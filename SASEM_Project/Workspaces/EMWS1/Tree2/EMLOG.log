*------------------------------------------------------------*
User:                jy
Date:                November 17, 2019
Time:                16:11:48
Site:                12600285
Platform:            X64_8PRO
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                November 17, 2019
Time:                16:11:38
*------------------------------------------------------------*
14716  proc freq data=EMWS1.Tree2_VariableSet noprint;
14717  table ROLE*LEVEL/out=WORK.Tree2META;
14718  run;
 
NOTE: There were 46 observations read from the data set EMWS1.TREE2_VARIABLESET.
NOTE: The data set WORK.TREE2META has 8 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.12 seconds
      cpu time            0.03 seconds
 
 
14719  proc print data=WORK.Tree2META label noobs;
14720  var ROLE LEVEL COUNT;
14721  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14722  title9 ' ';
14723  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14724  run;
 
NOTE: There were 8 observations read from the data set WORK.TREE2META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14725  title10;
 
14726  %let EMNORLEN = %DMNORLEN;
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN EMWS1 Impt_TRAIN
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN EMWS1 Impt_TRAIN
14773  data WORK.Tree2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
14774  length ORDER $20;
14775  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
14776     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14777  set EMWS1.TREE2_AUDIENCE_SCORE_P_DM( where=(_TYPE_="TARGET"));
14778  NumLevels=2;
14779  select(upcase(ORDER));
14780  when('DESC') ORDER = 'Descending';
14781  when('ASC') ORDER = 'Ascending';
14782  when('FMTDESC') ORDER = 'Formatted Descending';
14783  when('FMTASC') ORDER = 'Formatted Ascending';
14784  otherwise ORDER = 'Descending';
14785  end;
14786  output;
14787  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_AUDIENCE_SCORE_P_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE2_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
14788  title9 ' ';
14789  proc print data=WORK.Tree2_EVENT noobs label;
14790  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
14791  title9 ' ';
14792  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
14793  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE2_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
14794  title10;
 
"No decisions defined for target "audience_score_positive"."
14795  proc print data = EMWS1.Tree2_audience_score_p_DM noobs label;
14796  var _type_ variable label;
14797  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14798  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14799  title9 ' ';
14800  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14801  run;
 
NOTE: There were 7 observations read from the data set EMWS1.TREE2_AUDIENCE_SCORE_P_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14802  title10;
 
14803  %let EMEXCEPTIONSTRING=;
15365  *------------------------------------------------------------*;
15366  * Tree2: Generation of macros and macro variables;
15367  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15368  *------------------------------------------------------------*;
 
15369  %let EMEXCEPTIONSTRING=;
15370  *------------------------------------------------------------*;
15371  * TRAIN: Tree2;
15372  *------------------------------------------------------------*;
15373  %let EM_ACTION = TRAIN;
15374  %let syscc = 0;
15375  %macro main;
15376
15377    %if %upcase(&EM_ACTION) = CREATE %then %do;
15378      filename temp catalog 'sashelp.emmodl.tree_create.source';
15379      %include temp;
15380      filename temp;
15381
15382      %em_tree_create;
15383    %end;
15384
15385     %else
15386     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15387
15388         filename temp catalog 'sashelp.emmodl.tree_train.source';
15389         %include temp;
15390         filename temp;
15391         %em_tree_train;
15392     %end;
15393
15394    %else
15395    %if %upcase(&EM_ACTION) = SCORE %then %do;
15396      filename temp catalog 'sashelp.emmodl.tree_score.source';
15397      %include temp;
15398      filename temp;
15399
15400      %em_tree_score;
15401
15402    %end;
15403
15404    %else
15405    %if %upcase(&EM_ACTION) = REPORT %then %do;
15406
15407         filename temp catalog 'sashelp.emmodl.tree_report.source';
15408         %include temp;
15409         filename temp;
15410
15411         %em_tree_report;
15412     %end;
15413
15414    %else
15415    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15416
15417         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15418         %include temp;
15419         filename temp;
15420         %EM_TREE_OPENTREEVIEWER;
15421
15422     %end;
15423
15424    %else
15425    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15426
15427         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15428         %include temp;
15429         filename temp;
15430         %EM_TREE_CLOSETREEVIEWER;
15431
15432     %end;
15433
15434
15435     %doendm:
15436  %mend main;
15437
15438  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15440 +%macro em_tree_train;
15442 +   %if &EM_IMPORT_DATA eq %then %do;
15443 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15444 +       %put &em_codebar;
15445 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15446 +       %put &errormsg;
15447 +       %put &em_codebar;
15448 +       %goto doendm;
15449 +   %end;
15450 +   %else
15451 +       %let EMEXCEPTIONSTRING =;
15453 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15454 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15455 +        %put &em_codebar;
15456 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15457 +        %put &errormsg;
15458 +        %put &em_codebar;
15459 +        %goto doendm;
15460 +   %end;
15462 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15463 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15464 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15465 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15466 +        %put &em_codebar;
15467 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15468 +        %put &errormsg;
15469 +        %put &em_codebar;
15470 +        %goto doendm;
15471 +   %end;
15473 +   /* Initialize property macro variables */
15474 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15475 +   %include temp;
15476 +   filename temp;
15478 +   %EM_SetProperties;
15480 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15481 +   %EM_GETNAME(key=EMTREE, type=DATA);
15482 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15483 +     /* if import eq Y and no importtable defined, throw an exception */
15484 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15485 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15486 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15487 +         %put &em_codebar;
15488 +         %put &errmsg;
15489 +         %put &em_codebar;
15490 +         %goto doendm;
15491 +      %end;
15492 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15493 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15494 +         %put &em_codebar;
15495 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15496 +         %put &errormsg;
15497 +         %put &em_codebar;
15498 +         %goto doendm;
15499 +      %end;
15500 +      %else %do;
15501 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15502 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15503 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15504 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15505 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15506 +         %let dsid = %sysfunc(close(&dsid));
15507 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15508 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15509 +            %put &em_codebar;
15510 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15511 +            %put &errormsg;
15512 +            %put &em_codebar;
15513 +            %goto doendm;
15514 +         %end;
15515 +      %end;
15516 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15517 +         proc delete data=&EM_USER_EMTREE;
15518 +         run;
15519 +      %end;
15520 +   %end;
15521 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15522 +      proc delete data=&EM_USER_EMTREE;
15523 +      run;
15524 +   %end;
15526 +   /* load tree macros */
15527 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15528 +   %include temp;
15529 +   filename temp;
15531 +   /* data sets */
15532 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15533 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15534 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15536 +   /* files */
15537 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15539 +   /* check actual num of target levels */
15540 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15541 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15542 +                              nLevel=_nTargetLevel );
15543 +      %if &_nTargetLevel  > 2 %then %do;
15544 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15545 +        %put &em_codebar;
15546 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15547 +        %put &errormsg;
15548 +        %put &em_codebar;
15549 +        %goto doendm;
15550 +      %end;
15551 +   %end;
15553 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15554 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15555 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15556 +        %let costflag=0;
15557 +        data _null_;
15558 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15559 +          if eof then call symput("costflag", _N_);
15560 +        run;
15561 +        %if &costflag gt 0 %then %do;
15562 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15563 +          %put &em_codebar;
15564 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15565 +          %put &errormsg;
15566 +          %put &em_codebar;
15567 +          %goto doendm;
15568 +       %end;
15569 +     %end;
15570 +   %end;
15572 +   /* determine if multiple targets will be processed */
15573 +   %let em_tree_multipleTargets=N;
15574 +   %let em_tree_numTarget = 1;
15575 +   %let em_tree_targetVars=;
15577 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15578 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15579 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15580 +         %let em_tree_multipleTargets=N;
15581 +      %end;
15582 +      %else %do;
15583 +         /* create macro array of targets  */
15584 +         data _null_;
15585 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15586 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15587 +           if eof then
15588 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15589 +        run;
15591 +        %if &em_tree_numTarget gt 1 %then %do;
15592 +           %let em_tree_multipleTargets=Y;
15593 +        %end;
15594 +      %end;
15595 +   %end;
15597 +   /* create view of only necessary variable for performance reasons */
15598 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15599 +   data &tempData / view=&tempData;
15600 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15601 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15602 +       %EM_TARGET
15603 +     %end;
15604 +     %else %do;
15605 +       %if &em_tree_numTarget ne 0 %then %do;
15606 +         %do i=1 %to &em_tree_numTarget;
15607 +            &&em_tree_targetVars&i
15608 +         %end;
15609 +       %end;
15610 +     %end;
15611 +     );
15612 +   run;
15614 +   /* run Tree procedure */
15615 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15617 +   /* Check return code and throw exception if error is detected */
15618 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15619 +   %if &syserr %then %do;
15620 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15621 +     %goto doendm;
15622 +   %end;
15624 +   /* add decision score code if multiple targets are processed */
15625 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15626 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15627 +   %end;
15629 +   /* create outfit dataset if multiple score statements have been executed */
15630 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15632 +   /* create English Rules */
15633 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15634 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15635 +       %em_tree_makeEnglishRules;
15637 +       /* English Rules */
15638 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15640 +     %end;
15641 +   filename x;
15643 +   %doendm:
15644 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15645 +%macro EM_SetProperties;
15647 +   /* train properties */
15648 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15649 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15650 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15651 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15652 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15653 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15654 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15655 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15656 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15657 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15658 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15659 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15660 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15661 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15662 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15663 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15664 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15665 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15666 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15667 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15668 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15669 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15670 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15671 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15672 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15673 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15674 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15675 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15676 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15677 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15678 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15679 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15680 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15681 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15682 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15683 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15684 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15685 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15686 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15687 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15688 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15690 +   /* properties for interactive sample */
15691 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15692 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15693 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15694 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15696 +   /* report properties */
15697 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15698 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15699 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15700 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15701 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15702 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15703 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15704 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15705 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15706 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15707 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15708 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15709 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15711 +   /* score properties */
15712 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15713 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15715 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Deleting EMWS1.TREE2_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15717 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15718 +  %global &nLevel;
15719 +  proc dmdb batch data=&indata
15720 +    classout=_tmp_dmdbout;
15721 +    class &target;
15722 +  run;
15723 +  data _tmp_dmdbout;
15724 +    set _tmp_dmdbout;
15725 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15726 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15727 +  run;
15728 +  data _null_;
15729 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15730 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15731 +    %let dsid = %sysfunc(close(&dsid));
15732 +     call symput("&nLevel", put(&_obs, Best12.));
15733 +  run;
15735 +  proc datasets lib=work nolist;
15736 +     delete _tmp_dmdbout;
15737 +  run;
15738 +  quit;
15739 +%Mend EM_CheckBinaryTargetLevel;
15742 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15744 +  /* determine the number of obs in training data */
15745 +  proc sql;
15746 +    reset noprint;
15747 +    select count(*) into :em_nobs from &indata;
15748 +  quit;
15750 +  /* determine the number of input variables */
15751 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15752 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15754 +  /* retrieve targetEvent from decmeta */
15755 +  %let targetEvent=;
15756 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15757 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15758 +      data _null_;
15759 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15760 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15761 +      run;
15762 +    %end;
15763 +  %end;
15765 +  /* create targetTable if multipleTar eq Y */
15766 +  data temptarget;
15767 +    set &EM_DATA_VARIABLESET;
15768 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15769 +  run;
15771 + /* data sets */
15772 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15773 + %EM_GETNAME(key=EMTREE,        type=DATA);
15774 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15775 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15776 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15777 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15778 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15779 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15780 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15781 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15783 + /* files */
15784 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15785 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15787 + /* turn on pmml if requested */
15788 + %let nnpmml=0;
15789 + %if %symexist(EM_PMML) %then %do;
15790 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15791 +       %let nnpmml=1;
15793 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15794 +%end;
15796 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15798 + %if &nnpmml or &numClassTarget %then %do;
15800 +       /* create dmdb needed for pmml generation */
15801 +       %let tree_maxlevel = 512;
15802 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15803 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15804 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15805 +         %end;
15806 +       %end;
15807 +       %if &tree_maxlevel gt 0 %then %do;
15808 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15809 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15810 +       %end;
15812 +       %let targetOrderString =;
15813 +       %let targetString = ;
15814 +       data _null_;
15815 +          length orderString nameString $10000;
15816 +          retain orderString nameString;
15817 +          set &em_data_variableset end=eof;
15818 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15819 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15820 +          %end;
15821 +          %else %do;
15822 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15823 +          %end;          select(order);
15824 +            when('')        order ='DESC';
15825 +            when('FMTASC')  order='ASCFMT';
15826 +            when('FMTDESC') order='DESFMT';
15827 +            otherwise;
15828 +          end;
15829 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15830 +          nameString = trim(nameString)!!' '!!trim(NAME);
15832 +          if eof then do;
15833 +             call symput('targetOrderString', trim(orderString));
15834 +             call symput('targetString', trim(nameString));
15835 +          end;
15836 +       run;
15838 +       %let arborkluge= "work._treeDMDB";
15840 +       proc dmdb batch data=&indata
15841 +       %if &nnpmml %then %do;
15842 +           PMML
15843 +       %end;
15844 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15847 +   %if &nnpmml %then %do;
15848 +        %if "%EM_ID" ne "" %then %do;
15849 +          id %EM_ID;
15850 +        %end;
15851 +        %if &EM_NUM_CLASS gt 0 %then %do;
15852 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15853 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15854 +               &targetOrderString;
15855 +        %end;
15856 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15857 +          var %EM_INTERVAL;
15858 +        %end;
15859 +        target &targetString %EM_INTERVAL_TARGET;
15860 +        %if "%EM_FREQ" ne "" %then %do;
15861 +          freq %EM_FREQ;
15862 +        %end;
15863 +  %end;
15864 +  %else %do;
15865 +      class  &targetOrderString;
15866 +      target &targetString %EM_INTERVAL_TARGET;
15867 +  %end;
15868 +       run;
15869 +       quit;
15871 +       proc datasets lib=work nolist;
15872 +          delete classout varout;
15873 +       run;
15874 +       quit;
15876 +    %end;
15877 + %end;
15879 + /* run Arbor procedure */
15880 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15881 +  proc arbor data=&INDATA
15883 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15884 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15885 +  %end;
15887 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15888 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15889 +  %end;
15891 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15892 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15893 +  %end;
15895 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15896 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15897 +  %end;
15899 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15900 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15901 +  %end;
15903 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15904 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15905 +  %end;
15906 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15907 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15908 +  %end;
15909 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15910 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15911 +  %end;
15913 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15914 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15915 +      alpha = &EM_PROPERTY_SIGLEVEL
15916 +    %end;
15917 +  %end;
15919 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15920 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15921 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15922 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15923 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15925 +        padjust =
15926 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15927 +          &chaid
15928 +        %end;
15929 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15930 +          DEPTH
15931 +        %end;
15932 +      %end;
15933 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15934 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15935 +         pvars = &num_inputs
15936 +      %end;
15937 +    %end;
15938 +  %end;
15939 +  %else %do;
15940 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15941 +         padjust = NONE
15942 +      %end;
15943 +  %end;
15945 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15946 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15947 +    Maxrules = &num_nrules
15948 +  %end;
15950 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15951 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15952 +    Maxsurrs = &num_nsurrs
15953 +  %end;
15955 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15956 +     Missing=&EM_PROPERTY_MISSINGVALUE
15957 +  %end;
15959 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15960 +     USEVARONCE
15961 +  %end;
15963 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15964 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15965 +  %end;
15968 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15969 +    event = "&targetEvent"
15970 +  %end;
15972 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15973 +     DECSEARCH
15974 +  %end;
15976 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15977 +     PRIORSSEARCH
15978 +  %end;
15980 +  %if &arbor_1 ne %then %do;
15981 +    &arbor_1
15982 +  %end;
15984 +  %if &em_arbor ne %then %do;
15985 +     &em_arbor
15986 +  %end;
15987 +  ;
15988 + %end;
15989 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15990 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15991 +       interact;
15992 + %end;
15993 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15994 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15995 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15996 +    %put &em_codebar;
15997 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15998 +    %put &errormsg;
15999 +    %put &em_codebar;
16000 +    %goto doendm;
16001 +   %end;
16002 +   %else %do;
16003 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
16004 +       interact;
16005 +   %end;
16006 + %end;
16008 + %else %do;
16009 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
16010 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16011 +    %put &em_codebar;
16012 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16013 +    %put &errormsg;
16014 +    %put &em_codebar;
16015 +    %goto doendm;
16016 +   %end;
16017 +   %else %do;
16018 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
16019 +        interact;
16020 +   %end;
16021 + %end;
16023 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16024 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16025 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16026 +    %end;
16028 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16029 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16030 +    %end;
16032 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16033 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16034 +    %end;
16036 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16037 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16038 +    %end;
16040 +    %if "%EM_FREQ" ne "" %then %do;
16041 +       freq %EM_FREQ;
16042 +    %end;
16044 +    %if "&multipleTar" eq "Y" %then %do;
16045 +       /* cycle through all target vars in variableset */
16046 +       %let tdsid = %sysfunc(open(temptarget));
16047 +       %if &tdsid %then %do;
16048 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16049 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16050 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16051 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16052 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16053 +             target &var / level = &lvl
16054 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16055 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16056 +             %end;
16057 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16058 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16059 +             %end;
16060 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16061 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16062 +             %end;
16063 +          %end;
16064 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16065 +       %end;
16066 +       useTarget variable = %EM_TARGET;
16067 +    %end;
16068 +    %else %do;
16069 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16070 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16071 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16072 +      %end;
16073 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16074 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16075 +      %end;
16076 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16077 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16078 +      %end;
16079 +    %end;
16081 +    %if "&multipleTar" eq "N" %then %do;
16082 +      &EM_DEC_STATEMENT;
16083 +    %end;
16085 +    Performance &EM_PROPERTY_PERFORMANCE
16086 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16087 +      nodesize=&EM_PROPERTY_NODESAMPLE
16088 +    %end;
16089 +    ;
16091 +    %if "&intFlag" eq "Y" %then %do;
16092 +       INTERACT Largest;
16093 +       Train maxnewdepth=0;
16094 +    %end;
16096 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16097 +         Assess
16098 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16099 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16100 +              %put &em_codebar;
16101 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16102 +              %put &errormsg;
16103 +              %put &em_codebar;
16104 +            %end;
16105 +            %else %do;
16106 +               Validata=&EM_IMPORT_VALIDATE
16107 +            %end;
16108 +         %end;
16109 +         %else %do;
16110 +           NoValidata
16111 +         %end;
16112 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16113 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16114 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16115 +               %if &dsid %then %do;
16116 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16117 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16118 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16119 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16120 +                   %else %do;
16121 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16122 +                      %else %let measure= MISC;
16123 +                   %end;
16124 +                 %end;
16125 +               %end;
16126 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16127 +            %end;
16128 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16129 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16130 +                 %let measure=ASE;
16131 +              %end;
16132 +              %else %do;
16133 +                 %let measure=MISC;
16134 +              %end;
16135 +            %end;
16136 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16137 +              %let measure=ASE;
16138 +            %end;
16139 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16140 +               %let measure = LIFT;
16141 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16142 +               %if &dsid %then %do;
16143 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16144 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16145 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16146 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16147 +                 %end;
16148 +               %end;
16149 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16150 +            %end;
16151 +            measure=&measure
16152 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16153 +               event = "&targetEvent"
16154 +            %end;
16155 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16156 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16157 +            %end;
16158 +         %end;
16159 +         %if "&multipleTar" eq "N" %then %do;
16160 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16161 +               CV
16162 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16163 +                 CVNITer = &EM_PROPERTY_CVNITER
16164 +               %end;
16165 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16166 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16167 +               %end;
16168 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16169 +                 CVSeed = &EM_PROPERTY_CVSEED
16170 +               %end;
16171 +            %end;
16172 +         %end;
16173 +       %end;
16174 +      ;
16176 +      %if "&intFlag" ne "Y" %then %do;
16177 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16178 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16179 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16180 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16182 +          SUBTREE &subtree
16183 +          %if "&subtree" eq "NLEAVES" %then %do;
16184 +            =&EM_PROPERTY_NSUBTREE
16185 +          %end;
16186 +          ;
16187 +        %end;
16189 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16190 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16191 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16192 +          %end;
16193 +       %end;
16194 +      %end;
16195 + %end;
16198 + MakeMacro nleaves = nleaves;
16199 + save
16200 + %if "&EM_USER_EMTREE" ne "" %then %do;
16201 +   MODEL=&EM_USER_EMTREE
16202 + %end;
16203 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16204 +   SEQUENCE=&EM_USER_OUTSEQ
16205 + %end;
16206 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16207 +   IMPORTANCE=&EM_USER_OUTIMPORT
16208 + %end;
16209 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16210 +   NODESTAT=&EM_USER_OUTNODES
16211 + %end;
16212 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16213 +   SUMMARY=&EM_USER_OUTSUMMARY
16214 + %end;
16215 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16216 +   STATSBYNODE=&EM_USER_OUTSTATS
16217 + %end;
16218 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16219 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16220 + %end;
16221 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16222 +   Pathlistnonmissing=&EM_USER_OUTPATH
16223 + %end;
16224 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16225 +   RULES = &EM_USER_OUTRULES
16226 + %end;
16227 + ;
16229 + %if "&intFlag" ne "Y" %then %do;
16231 +   %let lookupString = ;
16232 +   %if ^%symexist(EM_OPTION) %then
16233 +      %let EM_OPTION=;
16235 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16236 +      %let lookupString = LOOKUP=SELECT;
16237 +   %end;
16239 +   %let codetext=;
16240 +   %let norescodetxt=;
16242 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16243 +     %let codetext=&codetext DUMMY;
16244 +     %let norescodetxt=&norescodetxt DUMMY;
16245 +   %end;
16246 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16247 +     %let codetext=&codetext NOLEAFID;
16248 +     %let norescodetxt=&norescodetxt NOLEAFID;
16249 +   %end;
16250 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16251 +     %let norescodetxt=&norescodetxt NOPRED;
16252 +   %end;
16254 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16255 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16257 +   %if &nnpmml %then %do;
16258 +     code pmml;
16259 +   %end;
16261 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16262 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16263 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16264 +   %end;
16265 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16266 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16267 +   %end;
16268 + %end;
16270 + run;
16271 + quit;
16273 + /*%em_checkerror(); */
16274 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16275 +   /* Delete DMDB catalog */
16276 +   proc datasets lib=work nolist;
16277 +       delete _treeDMDB / mt=cat;
16278 +  run;
16279 +  %end;
16281 + %if &nnpmml %then %do;
16282 +    ods pmml close;
16283 + %end;
16285 +  %doendm:
16287 +%mend em_tree_runTreeProcedure;
16289 +%macro em_tree_createFitStats( multipleTar= );
16292 +  /* create targetTable is multipleTar eq Y */
16293 +  data temptarget;
16294 +    set &EM_DATA_VARIABLESET;
16295 +    where ROLE="TARGET";
16296 +  run;
16298 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16299 +   data &EM_USER_EMOUTFIT;
16300 +     length target $32;
16301 +     merge work.fit_train
16302 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16303 +       work.fit_valid
16304 +     %end;
16305 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16306 +       work.fit_test
16307 +     %end;
16308 +     ;
16309 +     %if "&multipleTar" eq "N" %then %do;
16310 +       target="%EM_TARGET";
16311 +     %end;
16312 +     %else %do;
16313 +       target = _TARGET_;
16314 +     %end;
16315 +     drop _NW_ _SUMW_
16316 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16317 +        _VSUMW_
16318 +     %end;
16319 +     ;
16320 +   run;
16322 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16323 +     proc datasets library=work nolist;
16324 +       delete fit_valid;
16325 +     run;
16326 +   %end;
16327 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16328 +     proc datasets library=work nolist;
16329 +       delete fit_test;
16330 +     run;
16331 +   %end;
16333 +%mend em_tree_createFitStats;
16336 +%macro em_tree_makeEnglishRules;
16338 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16339 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16341 +  /* verify that necessary tables exist and if not, skip processing */
16342 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16343 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16344 +    %goto doendm;
16345 +  %end;
16346 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16347 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16348 +    %goto doendm;
16349 +  %end;
16351 +  /* determine length of variable in outpath dataset */
16352 +  %let vlength= ;
16353 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16354 +  %if &dsid ne %then %do;
16355 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16356 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16357 +  %end;
16358 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16360 +  data tempoutpath;
16361 +    length varname $&vlength;
16362 +    retain varname;
16363 +    set &EM_USER_OUTPATH;
16365 +    if ^missing(variable) then varname=variable;
16366 +    else if ^missing(var_name) then varname=var_name;
16367 +    output;
16368 +  run;
16370 +  /* create an array of generated predicted variable names */
16371 +  %let tree_pred_vars = ;
16372 +  %let tree_pred_label = ;
16373 +  %let numpred= 0;
16374 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16376 +    data _null_;
16377 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16378 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16379 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16380 +     if eof then
16381 +       call symput('numpred', strip(put(_N_, BEST.)));
16382 +    run;
16383 +  %end;
16385 +  /* determine if NPRIORS exists in outnodes  */
16386 +  %local nprior_flag;
16387 +  data _null_;
16388 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16389 +    if eof then do;
16390 +      call symput('nprior_flag', strip(put(npriors, best.)));
16391 +    end;
16392 +  run;
16394 +  proc sort data=tempoutpath; by node; run;
16395 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16397 +  data tempoutpath;
16398 +    merge tempoutpath(in=_a) outnodes(keep= node
16399 +    %if "&nprior_flag" ne "." %then %do;
16400 +      NPRIORS
16401 +    %end;
16402 +    %else %do;
16403 +      N
16404 +    %end;
16405 +    %if &numpred gt 0 %then %do;
16406 +      %do i=1 %to &numpred;
16407 +        &&tree_pred_vars&i
16408 +      %end;
16409 +    %end;
16410 +    );
16411 +    by node;
16412 +    if _a;
16413 +  run;
16415 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16417 +  data _null_;
16418 +    file x;
16419 +    set tempoutpath;
16420 +    by node descending varname;
16421 +    retain origvar oldnode string;
16422 +    length origvar $32 oldnode 8 string $200;
16424 +    if _N_ = 1 then do;
16425 +      origvar = varname;
16426 +      oldnode = node;
16427 +    end;
16429 +    if first.node then do;
16430 +       put "&EM_CODEBAR";
16431 +       put " Node = " node;
16432 +       put "&EM_CODEBAR";
16433 +    end;
16435 +      if first.varname then do;
16436 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16437 +            if MISSING(CHARACTER_VALUE) then do;
16438 +             if NUMERIC_VALUE ne .  then do;
16439 +              if ^first.node then do;
16440 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16441 +              end;
16442 +              else do;
16443 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16444 +              end;
16445 +             end;
16446 +            end;
16447 +            else do;
16448 +              if ^first.node then do;
16449 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16450 +              end;
16451 +              else do;
16452 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16453 +              end;
16454 +             end;
16455 +         end;
16456 +         else if RELATION in ("=") then do;
16457 +            if ^first.node then do;
16458 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16459 +            end;
16460 +            else do;
16461 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16462 +            end;
16463 +         end;
16464 +         else if RELATION in ("ISMISSING") then do;
16465 +            if ^first.node then do;
16466 +              string = " AND "|| strip(varname) || " equals Missing";
16467 +            end;
16468 +            else do;
16469 +              string = "if "|| strip(varname) ||" equals Missing";
16470 +            end;
16471 +         end;
16472 +         else if RELATION in ("ISNOTMISSING") then do;
16473 +            if ^first.node then do;
16474 +              string = " AND "|| strip(varname) || " equals All Values";
16475 +            end;
16476 +            else do;
16477 +              string = "if "|| strip(varname) ||" equals All Values";
16478 +            end;
16479 +         end;
16480 +         if ^missing(varname) then origvar = varname;
16481 +         oldnode=node;
16483 +      end;
16484 +      else do;
16485 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16486 +          if MISSING(CHARACTER_VALUE) then do;
16487 +           if  NUMERIC_VALUE ne .  then do;
16488 +            if ^MISSING(string) then
16489 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16490 +            else
16491 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16492 +           end;
16493 +          end;
16494 +          else do;
16495 +            if ^MISSING(string) then
16496 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16497 +            else
16498 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16499 +          end;
16501 +         end;
16502 +         else if RELATION in ("=") then do;
16503 +           string = strip(string)||", "||strip(character_value);
16504 +         end;
16505 +         else if RELATION in ("ISMISSING") then do;
16507 +         end;
16508 +         if ^missing(varname) then origvar = varname;
16509 +         oldnode=node;
16510 +      end;
16511 +      if last.varname then do;
16512 +         if RELATION in ("ISMISSING") then do;
16513 +           if ^first.varname then do;
16514 +             string = strip(string) || " or MISSING";
16515 +           end;
16516 +         end;
16517 +         put string;
16518 +         if ^missing(varname) then origvar = varname;
16519 +         oldnode=node;
16520 +      end;
16522 +      if last.node then do;
16523 +         put "then ";
16524 +         put " Tree Node Identifier   = " node;
16526 +         %if "&nprior_flag" ne "." %then %do;
16527 +           put " Number of Observations = " NPRIORS;
16528 +         %end;
16529 +         %else %do;
16530 +           put " Number of Observations = " N;
16531 +         %end;
16533 +         %if &numpred gt 0 %then %do;
16534 +           %do i=1 %to &numpred;
16535 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16536 +           %end;
16537 +         %end;
16539 +         put " ";
16540 +         if ^missing(varname) then origvar = varname;
16541 +         oldnode=node;
16542 +      end;
16544 +  run;
16546 +  proc datasets lib=work nolist;
16547 +    delete tempoutpath outnodes;
16548 +  run;
16550 +  %doendm:
16551 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: Records processed = 2438   Memory used = 511K.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.07 seconds
 
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.13 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE2.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.06 seconds
 
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.10 seconds
 
NOTE: There were 2438 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.16 seconds
      cpu time            0.14 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_AUDIENCE_SCORE_P_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: Records processed = 2438   Memory used = 511K.
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.09 seconds
 
NOTE: There were 2438 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.EM_TREE2.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.17 seconds
      cpu time            0.12 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: 1488719 kilobytes of physical memory.
NOTE: Will use 2438 out of 2438 training cases.
NOTE: Using memory pool with 332268544 bytes.
NOTE: Will not search for split on variable NC17.
NOTE: Acceptable cases have the same value.
NOTE: Option MINCATSIZE=5 may apply.
NOTE: Passed training data 12 times.
NOTE: Training used 2349992 bytes of work memory.
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.37 seconds
      cpu time            0.28 seconds
 
NOTE: There were 2440 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: The subtree sequence contains 25 subtrees. The largest has 49 nodes and 25 leaves.
NOTE: Using subtree with 21 nodes and 11 leaves.
NOTE: Using subtree with 21 nodes and 11 leaves.
NOTE: Created macro variable NLEAVES equal to 11.
NOTE: The data set EMWS1.TREE2_OUTIMPORT has 38 observations and 6 variables.
NOTE: The data set EMWS1.TREE2_EMTREE has 1739 observations and 4 variables.
NOTE: The data set EMWS1.TREE2_OUTNODES has 21 observations and 24 variables.
NOTE: The data set EMWS1.TREE2_OUTPATH has 97 observations and 7 variables.
NOTE: The data set EMWS1.TREE2_OUTRULES has 354 observations and 6 variables.
NOTE: The data set EMWS1.TREE2_OUTSEQ has 25 observations and 20 variables.
NOTE: The data set EMWS1.TREE2_OUTSTATS has 147 observations and 5 variables.
NOTE: The data set EMWS1.TREE2_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS1.TREE2_OUTTOPOLOGY has 21 observations and 5 variables.
NOTE: External file C:\Users\jy\Desktop\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree2\TREEFLOW.sas opened.
NOTE: External file C:\Users\jy\Desktop\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree2\TREEPUBLISH.sas opened.
NOTE: Variable _WARN_ is uninitialized.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.11 seconds
 
NOTE: There were 2438 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: Variable _WARN_ is uninitialized.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.13 seconds
      cpu time            0.07 seconds
 
NOTE: There were 2440 observations read from the data set EMWS1.PART_VALIDATE.
 
 
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.92 seconds
      cpu time            0.62 seconds
 
NOTE: There were 2438 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.EM_TREE2.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.95 seconds
      cpu time            0.64 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS1.TREE2_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 97 observations read from the data set EMWS1.TREE2_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 97 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE2_AUDIENCE_SCORE_P_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 97 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 97 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set EMWS1.TREE2_OUTNODES.
NOTE: The data set WORK.OUTNODES has 21 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 97 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 21 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 97 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 97 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 97 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=C:\Users\jy\Desktop\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree2\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=17Nov2019:16:11:42,
      Create Time=17Nov2019:16:11:42
 
NOTE: 144 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 97 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref X has been deassigned.
16553
16554  *------------------------------------------------------------*;
16555  * End TRAIN: Tree2;
16556  *------------------------------------------------------------*;
 
16557  *------------------------------------------------------------*;
16558  * Close any missing semi colons;
16559  *------------------------------------------------------------*;
16560  ;
16561  ;
16562  ;
16563  ;
16564  quit;
16565  *------------------------------------------------------------*;
16566  * Close any unbalanced quotes;
16567  *------------------------------------------------------------*;
16568  /*; *"; *'; */
16569  ;
16570  run;
16571  quit;
16572  /* Reset EM Options */
16573  options formchar="|----|+|---+=|-/\<>*";
16574  options nocenter ls=256 ps=10000;
16575  goptions reset=all device=GIF NODISPLAY;
 
16576  proc sort data=WORK.EM_USER_REPORT;
16577  by ID VIEW;
16578  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                November 17, 2019
Time:                16:11:42
*------------------------------------------------------------*
16680  %let EMEXCEPTIONSTRING=;
16681  *------------------------------------------------------------*;
16682  * SCORE: Tree2;
16683  *------------------------------------------------------------*;
16684  %let EM_ACTION = SCORE;
16685  %let syscc = 0;
16686  %macro main;
16687
16688    %if %upcase(&EM_ACTION) = CREATE %then %do;
16689      filename temp catalog 'sashelp.emmodl.tree_create.source';
16690      %include temp;
16691      filename temp;
16692
16693      %em_tree_create;
16694    %end;
16695
16696     %else
16697     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16698
16699         filename temp catalog 'sashelp.emmodl.tree_train.source';
16700         %include temp;
16701         filename temp;
16702         %em_tree_train;
16703     %end;
16704
16705    %else
16706    %if %upcase(&EM_ACTION) = SCORE %then %do;
16707      filename temp catalog 'sashelp.emmodl.tree_score.source';
16708      %include temp;
16709      filename temp;
16710
16711      %em_tree_score;
16712
16713    %end;
16714
16715    %else
16716    %if %upcase(&EM_ACTION) = REPORT %then %do;
16717
16718         filename temp catalog 'sashelp.emmodl.tree_report.source';
16719         %include temp;
16720         filename temp;
16721
16722         %em_tree_report;
16723     %end;
16724
16725    %else
16726    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16727
16728         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16729         %include temp;
16730         filename temp;
16731         %EM_TREE_OPENTREEVIEWER;
16732
16733     %end;
16734
16735    %else
16736    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16737
16738         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16739         %include temp;
16740         filename temp;
16741         %EM_TREE_CLOSETREEVIEWER;
16742
16743     %end;
16744
16745
16746     %doendm:
16747  %mend main;
16748
16749  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16751 +%macro em_tree_score;
16753 +   /* determine if multiple targets will be processed */
16754 +   %let em_tree_multipleTargets=N;
16755 +   %let em_tree_numTarget=1;
16756 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16757 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16758 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16759 +         %let em_tree_multipleTargets=N;
16760 +      %end;
16761 +      %else %do;
16762 +         /* create macro array of targets  */
16763 +         data _null_;
16764 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16765 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16766 +           if eof then
16767 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16768 +        run;
16770 +        %if &em_tree_numTarget gt 1 %then %do;
16771 +           %let em_tree_multipleTargets=Y;
16772 +        %end;
16773 +      %end;
16774 +   %end;
16776 +   /* build flow and publish scoring code */
16777 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16778 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16780 +   filename treeflow "&EM_USER_TREEFLOW";
16781 +   filename treepub "&EM_USER_TREEPUBLISH";
16783 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16784 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16786 +   %em_copyfile(infref=treeflow, outfref=flowref);
16787 +   %em_copyfile(infref=treepub, outfref=pubref);
16789 +   filename treeflow;
16790 +   filename treepub;
16792 +   /* if priors are used, add code to generate unadjusted residuals in export */
16793 +   %let useAdjPriors = N;
16794 +   data _null_;
16795 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16796 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16797 +   run;
16798 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16799 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16800 +      %include temp;
16801 +      filename temp;
16803 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16804 +      filename adjref "&EM_USER_adjResidualCode";
16805 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16807 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16809 +      filename adjref;
16810 +   %end;
16812 +   /* LEAF */
16813 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16814 +      data _null_;
16815 +        file flowref mod;
16816 +        put 'drop _LEAF_;';
16817 +      run;
16819 +      data _null_;
16820 +        file pubref mod;
16821 +        put 'drop _LEAF_;';
16822 +      run;
16824 +   %end;
16826 +   filename flowref;
16827 +   filename pubref;
16829 +   /* em_metachange code */
16830 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16831 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16832 +   %end;
16834 +   /* variable selection based on importance stat    */
16835 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16836 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16837 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16838 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16839 +     %let obs = %sysfunc(fetch(&dsid));
16840 +     %do %while(&obs=0);
16841 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16842 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16843 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16844 +       %let obs = %sysfunc(fetch(&dsid));
16845 +     %end;
16846 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16847 +   %end;
16849 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16850 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16851 +    %let tree_pred_vars = ;
16852 +    %let tree_pred_lvl =;
16853 +    %let numpred= 0;
16855 +    data _null_;
16856 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16857 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16858 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16859 +     if eof then
16860 +       call symput('numpred', strip(put(_N_, BEST.)));
16861 +    run;
16862 +   %end;
16864 +   %if &numpred ne 0 %then %do;
16865 +    %do i=1 %to &numpred;
16866 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16867 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16868 +    %end;
16869 +   %end;
16871 +   /* determine if multiple targets will be processed */
16872 +   %let em_tree_multipleTargets=N;
16873 +   %let em_tree_numTarget=1;
16874 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16875 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16876 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16877 +         %let em_tree_multipleTargets=N;
16878 +      %end;
16879 +      %else %do;
16880 +        data _null_;
16881 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16882 +          if eof then
16883 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16884 +        run;
16886 +        %if &em_tree_numTarget gt 1 %then %do;
16887 +           %let em_tree_multipleTargets=Y;
16888 +        %end;
16889 +     %end;
16890 +   %end;
16892 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16893 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16895 +      /* variable importance */
16896 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16897 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16899 +         %let validexist=0;
16900 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16901 +           %let validexist=1;
16902 +         %end;
16904 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16905 +         /* and the columns may not be generated                                                                                 */
16906 +         %let em_tree_cvexists=;
16907 +         %let em_tree_surrexists=.;
16908 +         data _null_;
16909 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16910 +            if eof then do ;
16911 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16912 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16913 +            end;
16914 +         run;
16916 +         data &EM_USER_OUTIMPORT;
16917 +            set &EM_USER_OUTIMPORT;
16919 +            /* format columns based on Precison value specified */
16920 +            format importance 15.&EM_PROPERTY_PRECISION
16921 +                 %if &validexist %then %do;
16922 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16923 +                 %end;
16924 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16925 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16926 +                 %end;
16927 +            ;
16928 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16929 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16930 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16931 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16932 +                 %if "&em_tree_surrexists" ne "" %then %do;
16933 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16934 +                 %end;
16935 +                 %if &validexist %then %do;
16936 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16937 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16938 +                 %end;
16939 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16940 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16941 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16942 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16943 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16944 +                 %end;
16945 +            ;
16946 +         run;
16948 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16949 +      %end;
16950 +   %end;
16952 +   %doendm:
16953 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\jy\Desktop\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=17Nov2019:16:11:42,
      Create Time=17Nov2019:16:11:42
 
NOTE: 234 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 75.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\jy\Desktop\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=17Nov2019:16:11:42,
      Create Time=17Nov2019:16:11:42
 
NOTE: 208 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 67.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_AUDIENCE_SCORE_P_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\jy\Desktop\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=10528,
      Last Modified=17Nov2019:16:11:42,
      Create Time=17Nov2019:16:11:42
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\jy\Desktop\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=9470,
      Last Modified=17Nov2019:16:11:42,
      Create Time=17Nov2019:16:11:42
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 15 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 16 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 16 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 17 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 18 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 18 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 19 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 19 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 20 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 21 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 22 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 22 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 23 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 24 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 24 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 25 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 26 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 27 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 28 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 29 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 29 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 30 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE2_AUDIENCE_SCORE_P_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 31 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 31 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 32 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 38 observations read from the data set EMWS1.TREE2_OUTIMPORT.
NOTE: The data set EMWS1.TREE2_OUTIMPORT has 38 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
16954
16955  *------------------------------------------------------------*;
16956  * End SCORE: Tree2;
16957  *------------------------------------------------------------*;
 
16958  proc sort data=WORK.EM_METACHANGE;
16959  by key uname;
16960  run;
 
NOTE: There were 32 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 32 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
16961  filename x "C:\Users\jy\Desktop\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree2\CDELTA_TRAIN.sas";
16962  data _null_;
16963  file x;
16964  put 'if upcase(NAME) = "G" then do;';
16965  put 'ROLE = "REJECTED";';
16966  put 'end;';
16967  put 'else ';
16968  put 'if upcase(NAME) = "GENRE_ACTION" then do;';
16969  put 'ROLE = "REJECTED";';
16970  put 'end;';
16971  put 'else ';
16972  put 'if upcase(NAME) = "GENRE_ADVENTURE" then do;';
16973  put 'ROLE = "REJECTED";';
16974  put 'end;';
16975  put 'else ';
16976  put 'if upcase(NAME) = "GENRE_ANIMATIONMANGA" then do;';
16977  put 'ROLE = "REJECTED";';
16978  put 'end;';
16979  put 'else ';
16980  put 'if upcase(NAME) = "GENRE_ARTHOUSEINTER" then do;';
16981  put 'ROLE = "REJECTED";';
16982  put 'end;';
16983  put 'else ';
16984  put 'if upcase(NAME) = "GENRE_CLASSICSCULT" then do;';
16985  put 'ROLE = "REJECTED";';
16986  put 'end;';
16987  put 'else ';
16988  put 'if upcase(NAME) = "GENRE_COMEDY" then do;';
16989  put 'ROLE = "REJECTED";';
16990  put 'end;';
16991  put 'else ';
16992  put 'if upcase(NAME) = "GENRE_FAMILYKIDS" then do;';
16993  put 'ROLE = "REJECTED";';
16994  put 'end;';
16995  put 'else ';
16996  put 'if upcase(NAME) = "GENRE_FANTASY" then do;';
16997  put 'ROLE = "REJECTED";';
16998  put 'end;';
16999  put 'else ';
17000  put 'if upcase(NAME) = "GENRE_FITNESSSPORTS" then do;';
17001  put 'ROLE = "REJECTED";';
17002  put 'end;';
17003  put 'else ';
17004  put 'if upcase(NAME) = "GENRE_MUSICALPERFARTS" then do;';
17005  put 'ROLE = "REJECTED";';
17006  put 'end;';
17007  put 'else ';
17008  put 'if upcase(NAME) = "GENRE_ROMANCE" then do;';
17009  put 'ROLE = "REJECTED";';
17010  put 'end;';
17011  put 'else ';
17012  put 'if upcase(NAME) = "GENRE_SCI_FI" then do;';
17013  put 'ROLE = "REJECTED";';
17014  put 'end;';
17015  put 'else ';
17016  put 'if upcase(NAME) = "GENRE_SPECIAL_INTEREST" then do;';
17017  put 'ROLE = "REJECTED";';
17018  put 'end;';
17019  put 'else ';
17020  put 'if upcase(NAME) = "GENRE_THRILLMYSSUSP" then do;';
17021  put 'ROLE = "REJECTED";';
17022  put 'end;';
17023  put 'else ';
17024  put 'if upcase(NAME) = "GENRE_WESTERN" then do;';
17025  put 'ROLE = "REJECTED";';
17026  put 'end;';
17027  put 'else ';
17028  put 'if upcase(NAME) = "IMP_DOMESTIC_GROSS" then do;';
17029  put 'ROLE = "REJECTED";';
17030  put 'end;';
17031  put 'else ';
17032  put 'if upcase(NAME) = "IMP_DOMESTIC_OPENING" then do;';
17033  put 'ROLE = "REJECTED";';
17034  put 'end;';
17035  put 'else ';
17036  put 'if upcase(NAME) = "IMP_FOREIGN_GROSS" then do;';
17037  put 'ROLE = "REJECTED";';
17038  put 'end;';
17039  put 'else ';
17040  put 'if upcase(NAME) = "IMP_MARKETS_MISSING" then do;';
17041  put 'ROLE = "REJECTED";';
17042  put 'end;';
17043  put 'else ';
17044  put 'if upcase(NAME) = "IMP_SS_MEAN" then do;';
17045  put 'ROLE = "REJECTED";';
17046  put 'end;';
17047  put 'else ';
17048  put 'if upcase(NAME) = "IMP_SS_MEDIAN" then do;';
17049  put 'ROLE = "REJECTED";';
17050  put 'end;';
17051  put 'else ';
17052  put 'if upcase(NAME) = "IMP_SS_P75" then do;';
17053  put 'ROLE = "REJECTED";';
17054  put 'end;';
17055  put 'else ';
17056  put 'if upcase(NAME) = "IMP_TOTAL_GROSS" then do;';
17057  put 'ROLE = "REJECTED";';
17058  put 'end;';
17059  put 'else ';
17060  put 'if upcase(NAME) = "NC17" then do;';
17061  put 'ROLE = "REJECTED";';
17062  put 'end;';
17063  put 'else ';
17064  put 'if upcase(NAME) = "PG" then do;';
17065  put 'ROLE = "REJECTED";';
17066  put 'end;';
17067  put 'else ';
17068  put 'if upcase(NAME) = "PG_13" then do;';
17069  put 'ROLE = "REJECTED";';
17070  put 'end;';
17071  put 'else ';
17072  put 'if upcase(NAME) = "Q_AUDIENCE_SCORE_POSITIVEFALSE" then do;';
17073  put 'ROLE = "ASSESS";';
17074  put 'end;';
17075  put 'else ';
17076  put 'if upcase(NAME) = "Q_AUDIENCE_SCORE_POSITIVETRUE" then do;';
17077  put 'ROLE = "ASSESS";';
17078  put 'end;';
17079  put 'else ';
17080  put 'if upcase(NAME) = "R" then do;';
17081  put 'ROLE = "REJECTED";';
17082  put 'end;';
17083  put 'else ';
17084  put 'if upcase(NAME) = "TOMATOMETER_COUNT" then do;';
17085  put 'ROLE = "REJECTED";';
17086  put 'end;';
17087  put 'else ';
17088  put 'if upcase(NAME) = "_NODE_" then do;';
17089  put 'ROLE = "SEGMENT";';
17090  put 'LEVEL = "NOMINAL";';
17091  put 'end;';
17092  run;
 
NOTE: The file X is:
      Filename=C:\Users\jy\Desktop\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree2\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=17Nov2019:16:11:43,
      Create Time=16Nov2019:16:02:30
 
NOTE: 128 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 59.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17093  filename x;
NOTE: Fileref X has been deassigned.
 
17094  filename emflow "C:\Users\jy\Desktop\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas";
17095  *------------------------------------------------------------*;
17096  * Tree2: Scoring DATA data;
17097  *------------------------------------------------------------*;
17098  data EMWS1.Tree2_TRAIN
17099  / view=EMWS1.Tree2_TRAIN
17100  ;
17101  set EMWS1.Impt_TRAIN
17102  ;
17103  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\jy\Desktop\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas.
17104 +****************************************************************;
17105 +******             DECISION TREE SCORING CODE             ******;
17106 +****************************************************************;
17107 +
17108 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17109 +LENGTH F_audience_score_positive  $    5;
17110 +LENGTH I_audience_score_positive  $    5;
17111 +LENGTH U_audience_score_positive  $    5;
17112 +LENGTH _WARN_  $    4;
17113 +
17114 +******              LABELS FOR NEW VARIABLES              ******;
17115 +label _NODE_ = 'Node' ;
17116 +label _LEAF_ = 'Leaf' ;
17117 +label P_audience_score_positiveTrue =
17118 +'Predicted: audience_score_positive=True' ;
17119 +label P_audience_score_positiveFalse =
17120 +'Predicted: audience_score_positive=False' ;
17121 +label Q_audience_score_positiveTrue =
17122 +'Unadjusted P: audience_score_positive=True' ;
17123 +label Q_audience_score_positiveFalse =
17124 +'Unadjusted P: audience_score_positive=False' ;
17125 +label V_audience_score_positiveTrue =
17126 +'Validated: audience_score_positive=True' ;
17127 +label V_audience_score_positiveFalse =
17128 +'Validated: audience_score_positive=False' ;
17129 +label R_audience_score_positiveTrue =
17130 +'Residual: audience_score_positive=True' ;
17131 +label R_audience_score_positiveFalse =
17132 +'Residual: audience_score_positive=False' ;
17133 +label F_audience_score_positive = 'From: audience_score_positive' ;
17134 +label I_audience_score_positive = 'Into: audience_score_positive' ;
17135 +label U_audience_score_positive =
17136 +'Unnormalized Into: audience_score_positive' ;
17137 +label _WARN_ = 'Warnings' ;
17138 +
17139 +
17140 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17141 +LENGTH _ARBFMT_5 $      5; DROP _ARBFMT_5;
17142 +_ARBFMT_5 = ' '; /* Initialize to avoid warning. */
17143 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17144 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17145 +
17146 +
17147 +_ARBFMT_5 = PUT( audience_score_positive , $5.);
17148 + %DMNORMCP( _ARBFMT_5, F_audience_score_positive );
17149 +
17150 +******             ASSIGN OBSERVATION TO NODE             ******;
17151 +IF  NOT MISSING(IMP_ss_p25 ) AND
17152 +                 0.875 <= IMP_ss_p25  THEN DO;
17153 +  IF  NOT MISSING(IMP_user_rating_count ) AND
17154 +    IMP_user_rating_count  <                  548 THEN DO;
17155 +    _ARBFMT_12 = PUT( genre_HistDocument , BEST12.);
17156 +     %DMNORMIP( _ARBFMT_12);
17157 +    IF _ARBFMT_12 IN ('1' ) THEN DO;
17158 +      _NODE_  =                   11;
17159 +      _LEAF_  =                   10;
17160 +      P_audience_score_positiveTrue  =      0.6860465116279;
17161 +      P_audience_score_positiveFalse  =     0.31395348837209;
17162 +      Q_audience_score_positiveTrue  =      0.6860465116279;
17163 +      Q_audience_score_positiveFalse  =     0.31395348837209;
17164 +      V_audience_score_positiveTrue  =     0.67816091954022;
17165 +      V_audience_score_positiveFalse  =     0.32183908045977;
17166 +      I_audience_score_positive  = 'TRUE' ;
17167 +      U_audience_score_positive  = 'True' ;
17168 +      END;
17169 +    ELSE DO;
17170 +      _ARBFMT_12 = PUT( genre_Horror , BEST12.);
17171 +       %DMNORMIP( _ARBFMT_12);
17172 +      IF _ARBFMT_12 IN ('1' ) THEN DO;
17173 +        _NODE_  =                   18;
17174 +        _LEAF_  =                    8;
17175 +        P_audience_score_positiveTrue  =     0.23809523809523;
17176 +        P_audience_score_positiveFalse  =     0.76190476190476;
17177 +        Q_audience_score_positiveTrue  =     0.23809523809523;
17178 +        Q_audience_score_positiveFalse  =     0.76190476190476;
17179 +        V_audience_score_positiveTrue  =     0.17241379310344;
17180 +        V_audience_score_positiveFalse  =     0.82758620689655;
17181 +        I_audience_score_positive  = 'FALSE' ;
17182 +        U_audience_score_positive  = 'False' ;
17183 +        END;
17184 +      ELSE DO;
17185 +        _NODE_  =                   19;
17186 +        _LEAF_  =                    9;
17187 +        P_audience_score_positiveTrue  =     0.52727272727272;
17188 +        P_audience_score_positiveFalse  =     0.47272727272727;
17189 +        Q_audience_score_positiveTrue  =     0.52727272727272;
17190 +        Q_audience_score_positiveFalse  =     0.47272727272727;
17191 +        V_audience_score_positiveTrue  =     0.52059925093632;
17192 +        V_audience_score_positiveFalse  =     0.47940074906367;
17193 +        I_audience_score_positive  = 'TRUE' ;
17194 +        U_audience_score_positive  = 'True' ;
17195 +        END;
17196 +      END;
17197 +    END;
17198 +  ELSE DO;
17199 +    _NODE_  =                    7;
17200 +    _LEAF_  =                   11;
17201 +    P_audience_score_positiveTrue  =     0.80507131537242;
17202 +    P_audience_score_positiveFalse  =     0.19492868462757;
17203 +    Q_audience_score_positiveTrue  =     0.80507131537242;
17204 +    Q_audience_score_positiveFalse  =     0.19492868462757;
17205 +    V_audience_score_positiveTrue  =     0.80442176870748;
17206 +    V_audience_score_positiveFalse  =     0.19557823129251;
17207 +    I_audience_score_positive  = 'TRUE' ;
17208 +    U_audience_score_positive  = 'True' ;
17209 +    END;
17210 +  END;
17211 +ELSE DO;
17212 +  _ARBFMT_12 = PUT( genre_HistDocument , BEST12.);
17213 +   %DMNORMIP( _ARBFMT_12);
17214 +  IF _ARBFMT_12 IN ('1' ) THEN DO;
17215 +    _NODE_  =                    4;
17216 +    _LEAF_  =                    1;
17217 +    P_audience_score_positiveTrue  =     0.63157894736842;
17218 +    P_audience_score_positiveFalse  =     0.36842105263157;
17219 +    Q_audience_score_positiveTrue  =     0.63157894736842;
17220 +    Q_audience_score_positiveFalse  =     0.36842105263157;
17221 +    V_audience_score_positiveTrue  =     0.71428571428571;
17222 +    V_audience_score_positiveFalse  =     0.28571428571428;
17223 +    I_audience_score_positive  = 'TRUE' ;
17224 +    U_audience_score_positive  = 'True' ;
17225 +    END;
17226 +  ELSE DO;
17227 +    IF  NOT MISSING(IMP_runtime ) AND
17228 +               103.9140625 <= IMP_runtime  THEN DO;
17229 +      IF  NOT MISSING(IMP_ss_std ) AND
17230 +        IMP_ss_std  <     0.46179765923036 THEN DO;
17231 +        _ARBFMT_12 = PUT( NR , BEST12.);
17232 +         %DMNORMIP( _ARBFMT_12);
17233 +        IF _ARBFMT_12 IN ('1' ) THEN DO;
17234 +          _NODE_  =                   28;
17235 +          _LEAF_  =                    3;
17236 +          P_audience_score_positiveTrue  =     0.25925925925925;
17237 +          P_audience_score_positiveFalse  =     0.74074074074074;
17238 +          Q_audience_score_positiveTrue  =     0.25925925925925;
17239 +          Q_audience_score_positiveFalse  =     0.74074074074074;
17240 +          V_audience_score_positiveTrue  =     0.36842105263157;
17241 +          V_audience_score_positiveFalse  =     0.63157894736842;
17242 +          I_audience_score_positive  = 'FALSE' ;
17243 +          U_audience_score_positive  = 'False' ;
17244 +          END;
17245 +        ELSE DO;
17246 +          _NODE_  =                   29;
17247 +          _LEAF_  =                    4;
17248 +          P_audience_score_positiveTrue  =                 0.75;
17249 +          P_audience_score_positiveFalse  =                 0.25;
17250 +          Q_audience_score_positiveTrue  =                 0.75;
17251 +          Q_audience_score_positiveFalse  =                 0.25;
17252 +          V_audience_score_positiveTrue  =     0.60227272727272;
17253 +          V_audience_score_positiveFalse  =     0.39772727272727;
17254 +          I_audience_score_positive  = 'TRUE' ;
17255 +          U_audience_score_positive  = 'True' ;
17256 +          END;
17257 +        END;
17258 +      ELSE DO;
17259 +        _ARBFMT_12 = PUT( genre_DramaTele , BEST12.);
17260 +         %DMNORMIP( _ARBFMT_12);
17261 +        IF _ARBFMT_12 IN ('0' ) THEN DO;
17262 +          IF  NOT MISSING(IMP_ss_count ) AND
17263 +                             286 <= IMP_ss_count  THEN DO;
17264 +            _NODE_  =                   45;
17265 +            _LEAF_  =                    7;
17266 +            P_audience_score_positiveTrue  =                 0.75;
17267 +            P_audience_score_positiveFalse  =                 0.25;
17268 +            Q_audience_score_positiveTrue  =                 0.75;
17269 +            Q_audience_score_positiveFalse  =                 0.25;
17270 +            V_audience_score_positiveTrue  =     0.71428571428571;
17271 +            V_audience_score_positiveFalse  =     0.28571428571428;
17272 +            I_audience_score_positive  = 'TRUE' ;
17273 +            U_audience_score_positive  = 'True' ;
17274 +            END;
17275 +          ELSE DO;
17276 +            _NODE_  =                   44;
17277 +            _LEAF_  =                    6;
17278 +            P_audience_score_positiveTrue  =      0.1551724137931;
17279 +            P_audience_score_positiveFalse  =     0.84482758620689;
17280 +            Q_audience_score_positiveTrue  =      0.1551724137931;
17281 +            Q_audience_score_positiveFalse  =     0.84482758620689;
17282 +            V_audience_score_positiveTrue  =     0.30172413793103;
17283 +            V_audience_score_positiveFalse  =     0.69827586206896;
17284 +            I_audience_score_positive  = 'FALSE' ;
17285 +            U_audience_score_positive  = 'False' ;
17286 +            END;
17287 +          END;
17288 +        ELSE DO;
17289 +          _NODE_  =                   30;
17290 +          _LEAF_  =                    5;
17291 +          P_audience_score_positiveTrue  =     0.39487179487179;
17292 +          P_audience_score_positiveFalse  =      0.6051282051282;
17293 +          Q_audience_score_positiveTrue  =     0.39487179487179;
17294 +          Q_audience_score_positiveFalse  =      0.6051282051282;
17295 +          V_audience_score_positiveTrue  =     0.32710280373831;
17296 +          V_audience_score_positiveFalse  =     0.67289719626168;
17297 +          I_audience_score_positive  = 'FALSE' ;
17298 +          U_audience_score_positive  = 'False' ;
17299 +          END;
17300 +        END;
17301 +      END;
17302 +    ELSE DO;
17303 +      _NODE_  =                    8;
17304 +      _LEAF_  =                    2;
17305 +      P_audience_score_positiveTrue  =     0.18181818181818;
17306 +      P_audience_score_positiveFalse  =     0.81818181818181;
17307 +      Q_audience_score_positiveTrue  =     0.18181818181818;
17308 +      Q_audience_score_positiveFalse  =     0.81818181818181;
17309 +      V_audience_score_positiveTrue  =     0.20443349753694;
17310 +      V_audience_score_positiveFalse  =     0.79556650246305;
17311 +      I_audience_score_positive  = 'FALSE' ;
17312 +      U_audience_score_positive  = 'False' ;
17313 +      END;
17314 +    END;
17315 +  END;
17316 +
17317 +*****  RESIDUALS R_ *************;
17318 +IF  F_audience_score_positive  NE 'TRUE'
17319 +AND F_audience_score_positive  NE 'FALSE'  THEN DO;
17320 +        R_audience_score_positiveTrue  = .;
17321 +        R_audience_score_positiveFalse  = .;
17322 + END;
17323 + ELSE DO;
17324 +       R_audience_score_positiveTrue  =  -P_audience_score_positiveTrue ;
17325 +       R_audience_score_positiveFalse  =  -P_audience_score_positiveFalse ;
17326 +       SELECT( F_audience_score_positive  );
17327 +          WHEN( 'TRUE'  ) R_audience_score_positiveTrue  =
17328 +        R_audience_score_positiveTrue  +1;
17329 +          WHEN( 'FALSE'  ) R_audience_score_positiveFalse  =
17330 +        R_audience_score_positiveFalse  +1;
17331 +       END;
17332 + END;
17333 +
17334 +****************************************************************;
17335 +******          END OF DECISION TREE SCORING CODE         ******;
17336 +****************************************************************;
17337 +
17338 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17339  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.06 seconds
 
 
17340  quit;
17341  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17342  filename emflow "C:\Users\jy\Desktop\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas";
17343  *------------------------------------------------------------*;
17344  * Tree2: Scoring VALIDATE data;
17345  *------------------------------------------------------------*;
17346  data EMWS1.Tree2_VALIDATE
17347  / view=EMWS1.Tree2_VALIDATE
17348  ;
17349  set EMWS1.Impt_VALIDATE
17350  ;
17351  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\jy\Desktop\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas.
17352 +****************************************************************;
17353 +******             DECISION TREE SCORING CODE             ******;
17354 +****************************************************************;
17355 +
17356 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17357 +LENGTH F_audience_score_positive  $    5;
17358 +LENGTH I_audience_score_positive  $    5;
17359 +LENGTH U_audience_score_positive  $    5;
17360 +LENGTH _WARN_  $    4;
17361 +
17362 +******              LABELS FOR NEW VARIABLES              ******;
17363 +label _NODE_ = 'Node' ;
17364 +label _LEAF_ = 'Leaf' ;
17365 +label P_audience_score_positiveTrue =
17366 +'Predicted: audience_score_positive=True' ;
17367 +label P_audience_score_positiveFalse =
17368 +'Predicted: audience_score_positive=False' ;
17369 +label Q_audience_score_positiveTrue =
17370 +'Unadjusted P: audience_score_positive=True' ;
17371 +label Q_audience_score_positiveFalse =
17372 +'Unadjusted P: audience_score_positive=False' ;
17373 +label V_audience_score_positiveTrue =
17374 +'Validated: audience_score_positive=True' ;
17375 +label V_audience_score_positiveFalse =
17376 +'Validated: audience_score_positive=False' ;
17377 +label R_audience_score_positiveTrue =
17378 +'Residual: audience_score_positive=True' ;
17379 +label R_audience_score_positiveFalse =
17380 +'Residual: audience_score_positive=False' ;
17381 +label F_audience_score_positive = 'From: audience_score_positive' ;
17382 +label I_audience_score_positive = 'Into: audience_score_positive' ;
17383 +label U_audience_score_positive =
17384 +'Unnormalized Into: audience_score_positive' ;
17385 +label _WARN_ = 'Warnings' ;
17386 +
17387 +
17388 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17389 +LENGTH _ARBFMT_5 $      5; DROP _ARBFMT_5;
17390 +_ARBFMT_5 = ' '; /* Initialize to avoid warning. */
17391 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17392 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17393 +
17394 +
17395 +_ARBFMT_5 = PUT( audience_score_positive , $5.);
17396 + %DMNORMCP( _ARBFMT_5, F_audience_score_positive );
17397 +
17398 +******             ASSIGN OBSERVATION TO NODE             ******;
17399 +IF  NOT MISSING(IMP_ss_p25 ) AND
17400 +                 0.875 <= IMP_ss_p25  THEN DO;
17401 +  IF  NOT MISSING(IMP_user_rating_count ) AND
17402 +    IMP_user_rating_count  <                  548 THEN DO;
17403 +    _ARBFMT_12 = PUT( genre_HistDocument , BEST12.);
17404 +     %DMNORMIP( _ARBFMT_12);
17405 +    IF _ARBFMT_12 IN ('1' ) THEN DO;
17406 +      _NODE_  =                   11;
17407 +      _LEAF_  =                   10;
17408 +      P_audience_score_positiveTrue  =      0.6860465116279;
17409 +      P_audience_score_positiveFalse  =     0.31395348837209;
17410 +      Q_audience_score_positiveTrue  =      0.6860465116279;
17411 +      Q_audience_score_positiveFalse  =     0.31395348837209;
17412 +      V_audience_score_positiveTrue  =     0.67816091954022;
17413 +      V_audience_score_positiveFalse  =     0.32183908045977;
17414 +      I_audience_score_positive  = 'TRUE' ;
17415 +      U_audience_score_positive  = 'True' ;
17416 +      END;
17417 +    ELSE DO;
17418 +      _ARBFMT_12 = PUT( genre_Horror , BEST12.);
17419 +       %DMNORMIP( _ARBFMT_12);
17420 +      IF _ARBFMT_12 IN ('1' ) THEN DO;
17421 +        _NODE_  =                   18;
17422 +        _LEAF_  =                    8;
17423 +        P_audience_score_positiveTrue  =     0.23809523809523;
17424 +        P_audience_score_positiveFalse  =     0.76190476190476;
17425 +        Q_audience_score_positiveTrue  =     0.23809523809523;
17426 +        Q_audience_score_positiveFalse  =     0.76190476190476;
17427 +        V_audience_score_positiveTrue  =     0.17241379310344;
17428 +        V_audience_score_positiveFalse  =     0.82758620689655;
17429 +        I_audience_score_positive  = 'FALSE' ;
17430 +        U_audience_score_positive  = 'False' ;
17431 +        END;
17432 +      ELSE DO;
17433 +        _NODE_  =                   19;
17434 +        _LEAF_  =                    9;
17435 +        P_audience_score_positiveTrue  =     0.52727272727272;
17436 +        P_audience_score_positiveFalse  =     0.47272727272727;
17437 +        Q_audience_score_positiveTrue  =     0.52727272727272;
17438 +        Q_audience_score_positiveFalse  =     0.47272727272727;
17439 +        V_audience_score_positiveTrue  =     0.52059925093632;
17440 +        V_audience_score_positiveFalse  =     0.47940074906367;
17441 +        I_audience_score_positive  = 'TRUE' ;
17442 +        U_audience_score_positive  = 'True' ;
17443 +        END;
17444 +      END;
17445 +    END;
17446 +  ELSE DO;
17447 +    _NODE_  =                    7;
17448 +    _LEAF_  =                   11;
17449 +    P_audience_score_positiveTrue  =     0.80507131537242;
17450 +    P_audience_score_positiveFalse  =     0.19492868462757;
17451 +    Q_audience_score_positiveTrue  =     0.80507131537242;
17452 +    Q_audience_score_positiveFalse  =     0.19492868462757;
17453 +    V_audience_score_positiveTrue  =     0.80442176870748;
17454 +    V_audience_score_positiveFalse  =     0.19557823129251;
17455 +    I_audience_score_positive  = 'TRUE' ;
17456 +    U_audience_score_positive  = 'True' ;
17457 +    END;
17458 +  END;
17459 +ELSE DO;
17460 +  _ARBFMT_12 = PUT( genre_HistDocument , BEST12.);
17461 +   %DMNORMIP( _ARBFMT_12);
17462 +  IF _ARBFMT_12 IN ('1' ) THEN DO;
17463 +    _NODE_  =                    4;
17464 +    _LEAF_  =                    1;
17465 +    P_audience_score_positiveTrue  =     0.63157894736842;
17466 +    P_audience_score_positiveFalse  =     0.36842105263157;
17467 +    Q_audience_score_positiveTrue  =     0.63157894736842;
17468 +    Q_audience_score_positiveFalse  =     0.36842105263157;
17469 +    V_audience_score_positiveTrue  =     0.71428571428571;
17470 +    V_audience_score_positiveFalse  =     0.28571428571428;
17471 +    I_audience_score_positive  = 'TRUE' ;
17472 +    U_audience_score_positive  = 'True' ;
17473 +    END;
17474 +  ELSE DO;
17475 +    IF  NOT MISSING(IMP_runtime ) AND
17476 +               103.9140625 <= IMP_runtime  THEN DO;
17477 +      IF  NOT MISSING(IMP_ss_std ) AND
17478 +        IMP_ss_std  <     0.46179765923036 THEN DO;
17479 +        _ARBFMT_12 = PUT( NR , BEST12.);
17480 +         %DMNORMIP( _ARBFMT_12);
17481 +        IF _ARBFMT_12 IN ('1' ) THEN DO;
17482 +          _NODE_  =                   28;
17483 +          _LEAF_  =                    3;
17484 +          P_audience_score_positiveTrue  =     0.25925925925925;
17485 +          P_audience_score_positiveFalse  =     0.74074074074074;
17486 +          Q_audience_score_positiveTrue  =     0.25925925925925;
17487 +          Q_audience_score_positiveFalse  =     0.74074074074074;
17488 +          V_audience_score_positiveTrue  =     0.36842105263157;
17489 +          V_audience_score_positiveFalse  =     0.63157894736842;
17490 +          I_audience_score_positive  = 'FALSE' ;
17491 +          U_audience_score_positive  = 'False' ;
17492 +          END;
17493 +        ELSE DO;
17494 +          _NODE_  =                   29;
17495 +          _LEAF_  =                    4;
17496 +          P_audience_score_positiveTrue  =                 0.75;
17497 +          P_audience_score_positiveFalse  =                 0.25;
17498 +          Q_audience_score_positiveTrue  =                 0.75;
17499 +          Q_audience_score_positiveFalse  =                 0.25;
17500 +          V_audience_score_positiveTrue  =     0.60227272727272;
17501 +          V_audience_score_positiveFalse  =     0.39772727272727;
17502 +          I_audience_score_positive  = 'TRUE' ;
17503 +          U_audience_score_positive  = 'True' ;
17504 +          END;
17505 +        END;
17506 +      ELSE DO;
17507 +        _ARBFMT_12 = PUT( genre_DramaTele , BEST12.);
17508 +         %DMNORMIP( _ARBFMT_12);
17509 +        IF _ARBFMT_12 IN ('0' ) THEN DO;
17510 +          IF  NOT MISSING(IMP_ss_count ) AND
17511 +                             286 <= IMP_ss_count  THEN DO;
17512 +            _NODE_  =                   45;
17513 +            _LEAF_  =                    7;
17514 +            P_audience_score_positiveTrue  =                 0.75;
17515 +            P_audience_score_positiveFalse  =                 0.25;
17516 +            Q_audience_score_positiveTrue  =                 0.75;
17517 +            Q_audience_score_positiveFalse  =                 0.25;
17518 +            V_audience_score_positiveTrue  =     0.71428571428571;
17519 +            V_audience_score_positiveFalse  =     0.28571428571428;
17520 +            I_audience_score_positive  = 'TRUE' ;
17521 +            U_audience_score_positive  = 'True' ;
17522 +            END;
17523 +          ELSE DO;
17524 +            _NODE_  =                   44;
17525 +            _LEAF_  =                    6;
17526 +            P_audience_score_positiveTrue  =      0.1551724137931;
17527 +            P_audience_score_positiveFalse  =     0.84482758620689;
17528 +            Q_audience_score_positiveTrue  =      0.1551724137931;
17529 +            Q_audience_score_positiveFalse  =     0.84482758620689;
17530 +            V_audience_score_positiveTrue  =     0.30172413793103;
17531 +            V_audience_score_positiveFalse  =     0.69827586206896;
17532 +            I_audience_score_positive  = 'FALSE' ;
17533 +            U_audience_score_positive  = 'False' ;
17534 +            END;
17535 +          END;
17536 +        ELSE DO;
17537 +          _NODE_  =                   30;
17538 +          _LEAF_  =                    5;
17539 +          P_audience_score_positiveTrue  =     0.39487179487179;
17540 +          P_audience_score_positiveFalse  =      0.6051282051282;
17541 +          Q_audience_score_positiveTrue  =     0.39487179487179;
17542 +          Q_audience_score_positiveFalse  =      0.6051282051282;
17543 +          V_audience_score_positiveTrue  =     0.32710280373831;
17544 +          V_audience_score_positiveFalse  =     0.67289719626168;
17545 +          I_audience_score_positive  = 'FALSE' ;
17546 +          U_audience_score_positive  = 'False' ;
17547 +          END;
17548 +        END;
17549 +      END;
17550 +    ELSE DO;
17551 +      _NODE_  =                    8;
17552 +      _LEAF_  =                    2;
17553 +      P_audience_score_positiveTrue  =     0.18181818181818;
17554 +      P_audience_score_positiveFalse  =     0.81818181818181;
17555 +      Q_audience_score_positiveTrue  =     0.18181818181818;
17556 +      Q_audience_score_positiveFalse  =     0.81818181818181;
17557 +      V_audience_score_positiveTrue  =     0.20443349753694;
17558 +      V_audience_score_positiveFalse  =     0.79556650246305;
17559 +      I_audience_score_positive  = 'FALSE' ;
17560 +      U_audience_score_positive  = 'False' ;
17561 +      END;
17562 +    END;
17563 +  END;
17564 +
17565 +*****  RESIDUALS R_ *************;
17566 +IF  F_audience_score_positive  NE 'TRUE'
17567 +AND F_audience_score_positive  NE 'FALSE'  THEN DO;
17568 +        R_audience_score_positiveTrue  = .;
17569 +        R_audience_score_positiveFalse  = .;
17570 + END;
17571 + ELSE DO;
17572 +       R_audience_score_positiveTrue  =  -P_audience_score_positiveTrue ;
17573 +       R_audience_score_positiveFalse  =  -P_audience_score_positiveFalse ;
17574 +       SELECT( F_audience_score_positive  );
17575 +          WHEN( 'TRUE'  ) R_audience_score_positiveTrue  =
17576 +        R_audience_score_positiveTrue  +1;
17577 +          WHEN( 'FALSE'  ) R_audience_score_positiveFalse  =
17578 +        R_audience_score_positiveFalse  +1;
17579 +       END;
17580 + END;
17581 +
17582 +****************************************************************;
17583 +******          END OF DECISION TREE SCORING CODE         ******;
17584 +****************************************************************;
17585 +
17586 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17587  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
17588  quit;
17589  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS1.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.06 seconds
 
17591  proc sort data=WORK.EM_USER_REPORT;
17592  by ID VIEW;
17593  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
17594  *------------------------------------------------------------*;
17595  * Tree2: Computing metadata for TRAIN data;
17596  *------------------------------------------------------------*;
 
NOTE: View EMWS1.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.06 seconds
 
18072  data WORK.MODELTEMP_INFO;
18073  set EMWS1.Tree2_EMINFO;
18074  where DATA='Tree2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
18075  run;
 
NOTE: There were 0 observations read from the data set EMWS1.TREE2_EMINFO.
      WHERE (DATA='Tree2') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18076  data EMWS1.Tree2_EMINFO;
18077  length TARGET KEY $32 DATA $43;
18078  input TARGET KEY DATA $;
18079  cards;
 
NOTE: The data set EMWS1.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18083  run;
18084  data EMWS1.Tree2_EMINFO;
18085  set EMWS1.Tree2_EMINFO WORK.MODELTEMP_INFO;
18086  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE2_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18087  proc sort data = EMWS1.Tree2_EMINFO NOTHREADS;
18088  by TARGET KEY;
18089  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE2_EMINFO.
NOTE: The data set EMWS1.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS1.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
NOTE: View EMWS1.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                November 17, 2019
Time:                16:11:44
*------------------------------------------------------------*
18113  data EMWS1.Tree2_EMOUTFIT;
18114  set EMWS1.Tree2_EMOUTFIT;
18115  length TargetLabel $200;
18116  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18117  run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.TREE2_EMOUTFIT.
NOTE: The data set EMWS1.TREE2_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18118  proc sort data=EMWS1.Tree2_EMREPORTFIT nothreads;
18119  by TARGET;
18120  run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE2_EMREPORTFIT.
NOTE: The data set EMWS1.TREE2_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18121  %let _EMwarndup = 0;
18122  %let _EMtargetdup =;
18123  %let _EMASEtargetdup =;
18124  data _null_;
18125  set EMWS1.Tree2_EMOUTFIT;
18126  if .<_ASE_<0.000001 then do;
18127  call symput('_EMwarndup', '1');
18128  call symput('_EMtargetdup', target);
18129  call symput('_EMASEtargetdup', put(_ASE_, best.));
18130  end;
18131  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18132  %let EMEXCEPTIONSTRING=;
18133  *------------------------------------------------------------*;
18134  * REPORT: Tree2;
18135  *------------------------------------------------------------*;
18136  %let EM_ACTION = REPORT;
18137  %let syscc = 0;
18138  %macro main;
18139
18140    %if %upcase(&EM_ACTION) = CREATE %then %do;
18141      filename temp catalog 'sashelp.emmodl.tree_create.source';
18142      %include temp;
18143      filename temp;
18144
18145      %em_tree_create;
18146    %end;
18147
18148     %else
18149     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18150
18151         filename temp catalog 'sashelp.emmodl.tree_train.source';
18152         %include temp;
18153         filename temp;
18154         %em_tree_train;
18155     %end;
18156
18157    %else
18158    %if %upcase(&EM_ACTION) = SCORE %then %do;
18159      filename temp catalog 'sashelp.emmodl.tree_score.source';
18160      %include temp;
18161      filename temp;
18162
18163      %em_tree_score;
18164
18165    %end;
18166
18167    %else
18168    %if %upcase(&EM_ACTION) = REPORT %then %do;
18169
18170         filename temp catalog 'sashelp.emmodl.tree_report.source';
18171         %include temp;
18172         filename temp;
18173
18174         %em_tree_report;
18175     %end;
18176
18177    %else
18178    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18179
18180         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18181         %include temp;
18182         filename temp;
18183         %EM_TREE_OPENTREEVIEWER;
18184
18185     %end;
18186
18187    %else
18188    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18189
18190         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18191         %include temp;
18192         filename temp;
18193         %EM_TREE_CLOSETREEVIEWER;
18194
18195     %end;
18196
18197
18198     %doendm:
18199  %mend main;
18200
18201  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18203 +%macro em_tree_makePlotDs( multipleTar= );
18205 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18206 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18207 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18208 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18210 +  /* determine if validation statistics will be displayed */
18211 +  %let validflag=N;
18212 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18213 +    /* determine if validation data exists */
18214 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18215 +      %let validflag=Y;
18216 +    %end;
18217 +  %end;
18219 +   /* retrieve name of decmeta even in presence of multiple targets */
18220 +   %let decmeta = ;
18221 +   %if &EM_DEC_DECMETA eq %then %do;
18222 +     data _Target;
18223 +       set &em_data_variableset;
18224 +       where ROLE='TARGET' and USE in('D', 'Y');
18225 +       keep NAME;
18226 +     run;
18227 +     proc sort data=_Target;
18228 +       by NAME;
18229 +     run;
18230 +     proc sort data=EM_TARGETDECINFO;
18231 +       by TARGET;
18232 +     run;
18233 +     data _Target;
18234 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18235 +       by NAME;
18236 +       if _a then do;
18237 +         call symput('decmeta', trim(DECMETA));
18238 +       end;
18239 +     run;
18240 +     proc delete data=_Target;run;
18241 +   %end;
18242 +   %else %let decmeta = &EM_DEC_DECMETA;
18245 +  /* retrieve targetEvent from decmeta */
18246 +  %let targetEvent=;
18247 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18248 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18249 +      data _null_;
18250 +       set &DECMETA(where=(_TYPE_="TARGET"));
18251 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18252 +      run;
18253 +    %end;
18254 +  %end;
18256 +  /* retrieve predicted var for targetEvent from decmeta */
18257 +  %let predTarget=;
18258 +  %let predLvl=;
18259 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18260 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18261 +      data _null_;
18262 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18263 +       call symput('predTarget', strip(VARIABLE));
18264 +       call symput('predLvl', strip(LEVEL));
18265 +      run;
18266 +    %end;
18267 +  %end;
18268 +  %else %do;
18269 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18270 +      data _null_;
18271 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18272 +       call symput('predTarget', strip(VARIABLE));
18273 +      run;
18274 +    %end;
18275 +  %end;
18277 +  /* create BelowText value */
18278 +  data belowtext;
18279 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18280 +    keep node belowtext;
18281 +  run;
18283 +  /* relace belowtext with variable label if it exists */
18284 +  data belowtext2;
18285 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18286 +    keep node belowtextlbl;
18287 +  run;
18289 +  proc sort data=belowtext; by node; run;
18290 +  proc sort data=belowtext2; by node; run;
18292 +  data belowtext;
18293 +    merge belowtext belowtext2(in=_a);
18294 +    by node;
18295 +    if _a then belowtext=belowtextlbl;
18296 +    keep node belowtext;
18297 +  run;
18299 +  /* create AboveText value */
18300 +  data abovetext;
18301 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18302 +  run;
18303 +  proc sort data=abovetext; by node numeric_value; run;
18305 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18306 +  data abovetext;
18307 +    set abovetext(rename=(node=parent));
18308 +    by parent numeric_value;
18309 +    retain abovetext tempstring flag branch origval origchar ;
18310 +    length abovetext $256;
18311 +    length tempstring origchar $64;
18313 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18314 +      if first.parent then do;
18315 +        if missing(character_value) then do;
18316 +          numeric_value = round(numeric_value, &sp_precision);
18317 +          abovetext = "< "||strip(NUMERIC_VALUE);
18318 +          branch = 1;
18319 +          origval = numeric_value;
18320 +          output;
18321 +        end;
18322 +        else do;
18323 +          abovetext = "< "||strip(CHARACTER_VALUE);
18324 +          branch = 1;
18325 +          origchar = character_value;
18326 +          output;
18327 +        end;
18329 +        if first.parent AND last.parent then do;
18330 +          if missing(character_value) then do;
18331 +            numeric_value = round(numeric_value, &sp_precision);
18332 +            branch = branch + 1;
18333 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18334 +            output;
18335 +          end;
18336 +          else do;
18337 +            branch = branch + 1;
18338 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18339 +            output;
18340 +          end;
18341 +        end;
18342 +      end;
18343 +      else if last.parent then do;
18344 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18345 +          if missing(character_value) then do;
18346 +            numeric_value = round(numeric_value, &sp_precision);
18347 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18348 +          end;
18349 +          else do;
18350 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18351 +          end;
18352 +          branch = branch + 1;
18353 +          output;
18355 +          if missing(character_value) then do;
18356 +            numeric_value = round(numeric_value, &sp_precision);
18357 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18358 +          end;
18359 +          else do;
18360 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18361 +          end;
18362 +          branch = branch + 1;
18363 +          output;
18364 +        end;
18365 +        else do;
18366 +          if missing(character_value) then do;
18367 +            numeric_value = round(numeric_value, &sp_precision);
18368 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18369 +          end;
18370 +          else do;
18371 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18372 +          end;
18373 +          branch = branch + 1;
18374 +          output;
18375 +        end;
18376 +      end;
18377 +      else do;
18378 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18379 +          if missing(character_value) then do;
18380 +            numeric_value = round(numeric_value,&sp_precision);
18381 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18382 +            origval = numeric_value;
18383 +          end;
18384 +          else do;
18385 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18386 +            origchar = character_value;
18387 +          end;
18388 +          branch = branch + 1;
18389 +          output;
18391 +        end;
18392 +        else do;
18393 +          if missing(character_value) then do;
18394 +            numeric_value = round(numeric_value, &sp_precision);
18395 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18396 +            origval = numeric_value;
18397 +          end;
18398 +          else do;
18399 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18400 +            origval = character_value;
18401 +          end;
18402 +          branch = branch + 1;
18403 +          output;
18404 +        end;
18405 +      end;
18406 +    end;
18407 +    else do;
18408 +       if first.numeric_value then do;
18409 +         flag = 0;
18410 +         abovetext = strip(CHARACTER_VALUE);
18411 +         branch = numeric_value;
18412 +         if first.numeric_value AND last.numeric_value then do;
18413 +           output;
18414 +         end;
18415 +       end;
18416 +       else if last.numeric_value then do;
18417 +         if flag=0 then do;
18418 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18419 +           length = length(strip(tempstring));
18420 +           if length < 32 then do;
18421 +             abovetext = strip(tempstring);
18422 +           end;
18423 +           else do;
18424 +             abovetext = strip(abovetext)||", ...";
18425 +             flag = 1;
18426 +           end;
18427 +         end;
18428 +         branch = numeric_value;
18429 +         output;
18430 +       end;
18431 +       else do;
18432 +         if flag=0 then do;
18433 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18434 +           length = length(strip(tempstring));
18435 +           if length < 32 then do;
18436 +             abovetext = strip(tempstring);
18437 +           end;
18438 +           else do;
18439 +             abovetext = strip(abovetext)||", ...";
18440 +             flag=1;
18441 +           end;
18442 +         end;
18443 +         branch = numeric_value;
18444 +       end;
18445 +    end;
18446 +    keep parent branch abovetext;
18447 +  run;
18449 +  /* MIssing value to abovetext */
18450 +  data tempmissing;
18451 +    set &EM_USER_OUTRULES;
18452 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18453 +    rename node=parent numeric_value=branch character_value=misschar;
18454 +  run;
18457 +  proc sort data=abovetext; by parent branch; run;
18458 +  proc sort data=tempmissing; by parent branch; run;
18459 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18461 +  data tempoutnodes;
18462 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18463 +    by parent branch;
18464 +    length traintotal validtotal 8;
18465 +    retain traintotal validtotal;
18467 +    if _a then do;
18468 +      if ^MISSING(abovetext) then do;
18469 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18470 +      end;
18471 +      else do;
18472 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18473 +      end;
18474 +    end;
18475 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18477 +    if node=1 then do;
18478 +      traintotal = N;
18479 +      validtotal=VN;
18480 +    end;
18482 +    drop role rank stat misschar belowtext;
18483 +  run;
18484 +  proc sort data=tempoutnodes; by node; run;
18485 +  proc sort data=belowtext; by node; run;
18487 +  data tempoutnodes;
18488 +    merge tempoutnodes belowtext;
18489 +    by node;
18491 +  run;
18493 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18494 +  %let adjusted = N;
18495 +  %let npriors = 0;
18496 +  data _null_ ;
18497 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18498 +    if eof then do ;
18499 +      call symput("npriors" , strip(put(_N_,best.))) ;
18500 +    end;
18501 +  run;
18502 +  %if &npriors gt 0 %then %let adjusted=Y;
18505 +  /* create a table with targetUsed and targetLevel columns for each node */
18506 +  data temptarmeta;
18507 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18508 +    %if &multipleTar eq N %then %do;
18509 +      AND USE in ('D', 'Y')
18510 +    %end;
18511 +    ));
18512 +    length TARGET $32;
18513 +    Target=name;
18514 +    keep target level;
18515 +  run;
18517 +  %if &multipleTar eq Y %then %do;
18518 +    data temptargetused;
18519 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18520 +      keep node target;
18521 +    run;
18522 +    proc sort data=temptargetused; by target; run;
18523 +    proc sort data=temptarmeta; by target; run;
18524 +    data temptargetused;
18525 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18526 +      by target;
18527 +      if _a and _b;
18528 +    run;
18529 +  %end;
18530 +  %else %do;
18531 +    data temptargetused;
18532 +      set &EM_USER_OUTSTATS;
18533 +      length target $32 tarlevel $10;
18534 +      target="%EM_TARGET";
18535 +      tarlevel="%EM_TARGET_LEVEL";
18536 +      keep node target tarlevel;
18537 +    run;
18538 +    proc sort data=temptargetused nodupkey; by node; run;
18539 +  %end;
18541 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
18542 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18543 +  proc sort data=temptargetused; by node; run;
18546 +  /* create tables for all interval targets as well as all class targets */
18547 +  data tempinterval tempclass;
18548 +    merge tempoutstats temptargetused( rename=(target=targetused));
18549 +    by node;
18550 +    %if "&multipleTar" eq "Y" %then %do;
18551 +      if ((missing(Target)) OR (target=targetused ));
18552 +    %end;
18554 +    if tarlevel="INTERVAL" then output tempinterval;
18555 +    else output tempclass;
18556 +  run;
18558 +  /* iniitalize intTarget and classTarget flags */
18559 +  %let em_intNobs =0;
18560 +  %let em_classNobs = 0;
18561 +  %let em_intTarget= N;
18562 +  %let em_classTarget= N;
18564 +  proc sql;
18565 +    reset noprint;
18566 +    select count(*) into :em_intNobs from tempinterval;
18567 +  quit;
18568 +  proc sql;
18569 +    reset noprint;
18570 +    select count(*) into :em_classNobs from tempclass;
18571 +  quit;
18573 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18574 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18576 +  /* retrieve all information for interval targets */
18577 +  %if &em_intTarget eq Y %then %do;
18579 +    /* determine if leaf variable exists */
18580 +    %let dsid=%sysfunc(open(tempinterval,i));
18581 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18582 +    %let rc=%sysfunc(close(&dsid));
18584 +    proc transpose data=tempinterval
18585 +      %if &leafexists %then %do;
18586 +        (drop=leaf)
18587 +      %end;
18588 +      %if &validexist %then %do;
18589 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18590 +      %end;
18591 +      %else %do;
18592 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18593 +      %end;
18594 +      by node;
18595 +      id statname;
18596 +    run;
18597 +    data tempinterval;
18598 +      set tempinterval;
18599 +      if missing(N) then delete;
18600 +    run;
18601 +  %end;
18603 +  /* retrieve all information for class targets */
18604 +  %if &em_classTarget eq Y %then %do;
18605 +    proc sort data=tempclass; by node category; run;
18606 +    %if &validflag eq N %then %do;
18607 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18608 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18609 +    %end;
18610 +    %else %do;
18611 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18612 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18613 +    %end;
18614 +      set tempclass;
18616 +      %if &validflag eq N %then %do;
18617 +        %if "&adjusted" eq "N" %then %do;
18618 +          if statname="N" then output tempn;
18619 +        %end;
18620 +        %else %do;
18621 +          if statname="NPRIORS" then output tempn;
18622 +        %end;
18623 +        else if statname="PREDICTION" then output temppredict;
18624 +        else if statname="PROBABILITY" then output tempprob;
18625 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18626 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18627 +      %end;
18628 +      %else %do;
18629 +        %if "&adjusted" eq "N" %then %do;
18630 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18631 +        %end;
18632 +        %else %do;
18633 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18634 +        %end;
18635 +        else if statname="PREDICTION" then output temppredict;
18636 +        else if statname="PROBABILITY" then output tempprob;
18637 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18638 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18639 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18640 +      %end;
18641 +    run;
18644 +    /* determine if profit/loss exists in tempprofit */
18645 +    %let em_profitflag=0;
18646 +    %let em_lossflag=0;
18647 +    proc sql;
18648 +      reset noprint;
18649 +      select count(*) into :em_profitflag from tempprofit;
18650 +    quit;
18651 +    proc sql;
18652 +      reset noprint;
18653 +      select count(*) into :em_lossflag from temploss;
18654 +    quit;
18656 +    %if &validFlag eq Y %then %do;
18657 +      proc transpose data=tempn
18658 +        %if "&adjusted" eq "N" %then %do;
18659 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18660 +        %end;
18661 +        %else %do;
18662 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18663 +        %end;
18664 +        by node;
18665 +        id statname;
18666 +      run;
18667 +      %if &em_profitflag ne 0 %then %do;
18668 +        proc transpose data=tempprofit out=tempprofit;
18669 +          by node category;
18670 +          id statname ;
18671 +        run;
18672 +      %end;
18673 +      %if &em_lossflag ne 0 %then %do;
18674 +        proc transpose data=temploss out=temploss;
18675 +          by node category;
18676 +          id statname ;
18677 +        run;
18678 +      %end;
18679 +      data tempprob;
18680 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18681 +        by node
18682 +        %if &multipleTar eq Y %then %do;
18683 +          target
18684 +        %end;
18685 +        category;
18686 +      run;
18687 +    %end;
18689 +    /* store percentcorrect value */
18690 +    data temppredict;
18691 +      merge tempprob temppredict(in=_a);
18692 +      by node category;
18693 +      if _a then do;
18694 +        percentCorrect = statvalue;
18695 +        %if &validFlag eq Y %then %do;
18696 +          vpercentCorrect= vstatvalue;
18697 +        %end;
18698 +      end;
18699 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18700 +      %if &validFlag eq Y %then %do;
18701 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18702 +      %end;
18703 +      ;
18704 +      if missing(percentCorrect) then delete;
18705 +      drop target;
18706 +    run;
18708 +    /* build profittext */
18709 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18710 +      data tempprofittext(keep= node profittext profitloss);
18711 +        length profittext $800 profitloss 8.;
18712 +        retain profittext profitloss;
18714 +        merge tempprob
18715 +        %if &em_profitflag ne 0 %then %do;
18716 +          tempprofit
18717 +        %end;
18718 +        %else %if &em_lossflag ne 0 %then %do;
18719 +          temploss
18720 +        %end;
18721 +        ;
18722 +        by node category;
18724 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18725 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
18726 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
18727 +          %let profittype = ALL;
18728 +        %end;
18730 +        /* create the profitloss variable for nodecolor if selected */
18731 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
18733 +        %if "&profittype" eq "ALL" %then %do;
18734 +          if strip(CATEGORY)="&targetEvent" then do;
18735 +            profitloss=statvalue;
18736 +          end;
18737 +          if first.node then do;
18738 +            %if &validFlag eq N %then %do;
18739 +             %if &em_profitflag ne 0 %then %do;
18740 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18741 +             %end;
18742 +             %if &em_lossflag ne 0 %then %do;
18743 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18744 +             %end;
18745 +            %end;
18746 +            %else %do;
18747 +             %if &em_profitflag ne 0 %then %do;
18748 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18748!+;
18749 +             %end;
18750 +             %if &em_lossflag ne 0 %then %do;
18751 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18752 +             %end;
18753 +            %end;
18754 +          end;
18755 +          else if last.node then do;
18756 +            %if &validFlag eq N %then %do;
18757 +             %if &em_profitflag ne 0 %then %do;
18758 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18759 +             %end;
18760 +             %if &em_lossflag ne 0 %then %do;
18761 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18762 +             %end;
18763 +             /*if CATEGORY="&targetEvent" then do;
18764 +               profitloss=statvalue;
18765 +             end;*/
18766 +            %end;
18767 +            %else %do;
18768 +             %if &em_profitflag ne 0 %then %do;
18769 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18769!+14.&EM_PROPERTY_SPLITPRECISION);
18770 +                if CATEGORY="&targetEvent" then do;
18771 +                 profitloss=ALTERNATIVE_PROFIT;
18772 +                end;
18773 +             %end;
18774 +             %if &em_lossflag ne 0 %then %do;
18775 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18775!+14.&EM_PROPERTY_SPLITPRECISION);
18776 +                if CATEGORY="&targetEvent" then do;
18777 +                  profitloss=ALTERNATIVE_LOSS;
18778 +                end;
18779 +             %end;
18780 +            %end;
18781 +            output;
18782 +          end;
18783 +          else do;
18784 +            %if &validFlag eq N %then %do;
18785 +             %if &em_profitflag ne 0 %then %do;
18786 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18787 +             %end;
18788 +             %if &em_lossflag ne 0 %then %do;
18789 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18790 +             %end;
18791 +            %end;
18792 +            %else %do;
18793 +             %if &em_profitflag ne 0 %then %do;
18794 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18794!+14.&EM_PROPERTY_SPLITPRECISION);
18795 +             %end;
18796 +             %if &em_lossflag ne 0 %then %do;
18797 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18797!+14.&EM_PROPERTY_SPLITPRECISION);
18798 +             %end;
18799 +            %end;
18800 +          end;
18801 +        %end;
18802 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18803 +          if strip(CATEGORY) = "&targetevent" then do;
18804 +            %if &validFlag eq N %then %do;
18805 +             %if &em_profitflag ne 0 %then %do;
18806 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18807 +             %end;
18808 +             %if &em_lossflag ne 0 %then %do;
18809 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18810 +             %end;
18811 +             profitloss=statvalue;
18812 +            %end;
18813 +            %else %do;
18814 +             %if &em_profitflag ne 0 %then %do;
18815 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18815!+;
18816 +                profitloss=ALTERNATIVE_PROFIT;
18817 +             %end;
18818 +             %if &em_lossflag ne 0 %then %do;
18819 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18820 +                profitloss=ALTERNATIVE_LOSS;
18821 +             %end;
18822 +            %end;
18823 +            output;
18824 +          end;
18825 +        %end;
18826 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
18827 +          if strip(CATEGORY) = "&targetevent" then do;
18828 +            %if &validFlag eq N %then %do;
18829 +             profitloss=statvalue;
18830 +            %end;
18831 +            %else %do;
18832 +             %if &em_profitflag ne 0 %then %do;
18833 +                profitloss=ALTERNATIVE_PROFIT;
18834 +             %end;
18835 +             %if &em_lossflag ne 0 %then %do;
18836 +                profitloss=ALTERNATIVE_LOSS;
18837 +             %end;
18838 +            %end;
18839 +            output;
18840 +          end;
18841 +        %end;
18842 +      run;
18843 +    %end;
18845 +    data tempprob(keep= node probtext);
18846 +      length probtext $800;
18847 +      retain probtext;
18848 +      set tempprob ;
18849 +      by node;
18851 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18852 +      %let probtype = &EM_PROPERTY_TARGET;
18853 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
18854 +        %let probtype = ALL;
18855 +      %end;
18857 +      %if "&probtype" eq "ALL" %then %do;
18858 +        if first.node then do;
18859 +          %if &validFlag eq N %then %do;
18860 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18861 +          %end;
18862 +          %else %do;
18863 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18864 +          %end;
18865 +        end;
18866 +        else if last.node then do;
18867 +          %if &validFlag eq N %then %do;
18868 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18869 +          %end;
18870 +          %else %do;
18871 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18872 +          %end;
18873 +          output;
18874 +        end;
18875 +        else do;
18876 +          %if &validFlag eq N %then %do;
18877 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18878 +          %end;
18879 +          %else %do;
18880 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18881 +          %end;
18882 +        end;
18883 +      %end;
18884 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18885 +        if strip(CATEGORY) = "&targetevent" then do;
18886 +          %if &validFlag eq N %then %do;
18887 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18888 +          %end;
18889 +          %else %do;
18890 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18891 +          %end;
18892 +          output;
18893 +        end;
18894 +      %end;
18895 +      %else %if "&probtype" eq "NONE" %then %do;
18896 +        if last.node then do;
18897 +          output;
18898 +        end;
18899 +      %end;
18900 +    run;
18901 +  %end;
18903 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
18905 +  %let oldexists=0;
18906 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
18907 +     data old_tree_plot;
18908 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
18909 +        rename nodecolor=oldnodecolor;
18910 +     run;
18912 +     proc sort data=old_tree_plot;
18913 +        by node;
18914 +     run;
18916 +     %let oldexists=1;
18917 +  %end;
18919 +  data &EM_USER_TREE_PLOT;
18920 +    length textall $800;
18921 +    merge tempoutnodes temptargetused
18923 +    %if &em_intTarget eq Y %then %do;
18924 +      tempinterval
18925 +    %end;
18927 +    %if &em_classTarget eq Y %then %do;
18929 +      %if &validFlag eq N %then %do;
18930 +        tempn(rename=(statvalue=N))
18931 +      %end;
18932 +      %else %do;
18933 +        tempn
18934 +      %end;
18936 +      temppredict tempprob
18938 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18939 +        tempprofittext
18940 +      %end;
18941 +    %end;
18942 +    ;
18943 +    by node;
18945 +    /* build nodetext based on user selection */
18946 +    textall="";
18948 +    %if &em_intTarget eq Y %then %do;
18949 +    if tarlevel="INTERVAL" then do;
18950 +      /* Nodeid */
18951 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18952 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18953 +      %end;
18955 +      /* Target identifier if multiple targets are used */
18956 +      %if "&multipleTar" eq "Y" %then %do;
18957 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18958 +      %end;
18960 +      %if &validFlag eq Y %then %do;
18961 +         /* Column labels displayed in validflag eq Y only */
18962 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18963 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18963!+noquote ))";
18964 +         %end;
18966 +         /* Average values */
18967 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18968 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18969 +         %end;
18971 +         /* RASE */
18972 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18973 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
18974 +         %end;
18976 +         /* Count */
18977 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18978 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
18979 +         %end;
18980 +      %end;
18981 +      %else %do;
18982 +         /* Average values */
18983 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18984 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18985 +         %end;
18987 +         /* RASE */
18988 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18989 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
18990 +         %end;
18992 +         /* Count */
18993 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18994 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
18995 +         %end;
18996 +      %end;
18998 +      /* nodecolor */
18999 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19000 +        nodecolor=PREDICTION;
19001 +      %end;
19002 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19003 +        nodecolor=RASE;
19004 +      %end;
19005 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19006 +        nodecolor=1;
19007 +      %end;
19009 +    end;
19010 +    %end;
19011 +    %if &em_classTarget eq Y %then %do;
19012 +    if tarlevel^="INTERVAL" then  do;
19014 +      /* Nodeid */
19015 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19016 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19017 +      %end;
19018 +      /* Target identifier if multiple targets are used */
19019 +      %if "&multipleTar" eq "Y" %then %do;
19020 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19021 +      %end;
19023 +      /* Predicted values */
19024 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19025 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19026 +      %end;
19028 +      /* Column labels displayed in validflag eq Y only */
19029 +      %if "&ValidFlag" eq "Y" %then %do;
19030 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19031 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19031!+noquote ))";
19032 +        %end;
19033 +      %end;
19035 +      /* Target Values */
19036 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19037 +        textall=strip(textall)||"0A"x||strip(probtext);
19038 +      %end;
19040 +      /* include profit or loss for all target levels */
19041 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19042 +        textall=strip(textall)||"0A"x||strip(profittext);
19043 +      %end;
19045 +      %if &validFlag eq N %then %do;
19046 +        /* Percent Correct */
19047 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19048 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19049 +        %end;
19051 +         /* Count */
19052 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19053 +          %if "&adjusted" eq "N" %then %do;
19054 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19055 +          %end;
19056 +          %else %do;
19057 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19058 +          %end;
19059 +         %end;
19060 +      %end;
19061 +      %else %do;
19062 +        /* Percent Correct */
19063 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19064 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19065 +        %end;
19067 +         /* Count */
19068 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19069 +          %if "&adjusted" eq "N" %then %do;
19070 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19071 +          %end;
19072 +          %else %do;
19073 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19074 +          %end;
19075 +         %end;
19076 +      %end;
19078 +      /* nodecolor */
19079 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19080 +       %if &multipleTar ne Y %then %do;
19081 +        nodecolor=&predTarget;
19082 +       %end;
19083 +       %else %do;
19084 +         nodecolor=percentcorrect;
19085 +       %end;
19086 +      %end;
19087 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19088 +        nodecolor=percentcorrect;
19089 +      %end;
19090 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19091 +        nodecolor=1;
19092 +      %end;
19093 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19094 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19095 +          nodecolor=percentcorrect;
19096 +        %end;
19097 +        %else %do;
19098 +          nodecolor=profitloss;
19099 +        %end;
19100 +      %end;
19102 +    end;
19103 +    %end;
19104 +    %if &em_intTarget eq Y %then %do;
19105 +     drop  PREDICTION  TARGET TARLEVEL
19106 +     %if &ValidFlag eq Y %then %do;
19107 +         VPREDICTION
19108 +     %end;
19109 +     ;
19110 +    %end;
19111 +    %if &em_classTarget eq Y %then %do;
19112 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19113 +     %if &ValidFlag eq Y %then %do;
19114 +         VSTATVALUE
19115 +     %end;
19116 +     ;
19117 +    %end;
19119 +  run;
19121 +  /* add leaf index information to plotds - based on primary target only*/
19122 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19123 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19124 +      set &EM_USER_OUTSTATS;
19125 +      if ((statname="PROBABILITY"
19126 +      %if &validexist %then %do;
19127 +       or statname="VALID: PROBABILITY"
19128 +      %end;
19129 +      ) AND (CATEGORY="&TARGETEVENT")
19130 +      %if "&multipleTar" eq "Y" %then %do;
19131 +        AND (Target="%EM_TARGET")
19132 +      %end;
19133 +      );
19134 +    run;
19136 +    %if &validexist %then %do;
19137 +      proc sort data=tempprob; by node; run;
19138 +      %let vpredTarget = V%substr(&predTarget, 2);
19139 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19140 +         by node;
19141 +         id statname;
19142 +      run;
19143 +    %end;
19144 +  %end;
19145 +  %else %do;
19146 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19147 +      set &EM_USER_OUTSTATS;
19148 +      if ((statname="PREDICTION"
19149 +      %if &validexist %then %do;
19150 +       or statname="VALID: PREDICTION"
19151 +      %end;
19152 +      )
19153 +      %if "&multipleTar" eq "Y" %then %do;
19154 +        AND (Target="%EM_TARGET")
19155 +      %end;
19156 +      );
19157 +    run;
19158 +    %if &validexist %then %do;
19159 +      proc sort data=tempprob; by node; run;
19160 +      %let vpredTarget = V%substr(&predTarget, 2);
19161 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19162 +         by node;
19163 +         id statname;
19164 +      run;
19165 +    %end;
19166 +  %end;
19168 +  proc sort data=tempprob; by node; run;
19169 +  data tempoutnodes;
19170 +    merge tempoutnodes tempprob;
19171 +    by node;
19172 +  run;
19174 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19175 +  data tempnodes;
19176 +    retain traintotal validtotal;
19177 +    set tempnodes(where=(leaf ne . ));
19178 +    tprob=round(&predTarget, .01);
19179 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19180 +      percevent_train=round(tprob*100, .01);
19181 +    %end;
19182 +    %else %do;
19183 +      percevent_train=tprob;
19184 +    %end;
19186 +    perc_train=round((n/traintotal)*100, 0.01);
19187 +    /* leafwidth already has a *10 multiplier */
19188 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19190 +    %if &validexist %then %do;
19191 +      %let vpredTarget = V%substr(&predTarget,2);
19192 +      vprob=round(&vpredTarget, .01);
19193 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19194 +        percevent_valid=round(vprob*100, .01);
19195 +      %end;
19196 +      %else %do;
19197 +        percevent_valid=vprob;
19198 +      %end;
19199 +      perc_valid=round((vn/validtotal)*100, .01);
19200 +    %end;
19202 +    index=_N_;
19203 +    keep node index tprob perc_train percevent_train
19204 +    %if &validexist %then %do;
19205 +        vprob percevent_valid perc_valid
19206 +    %end;
19207 +    ;
19208 +  run;
19209 +  proc sort data=tempnodes; by node; run;
19210 +  data &EM_USER_TREE_PLOT;
19211 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19212 +    by node;
19213 +    if missing(node) then delete;
19214 +    %if &oldexists %then %do;
19215 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19216 +      drop oldnodecolor;
19217 +    %end;
19218 +    abovetext = compbl(abovetext);
19220 +    /* add variable labels */
19221 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19222 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19223 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19224 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19225 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19226 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19228 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19229 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19230 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19231 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19232 +          %end;
19233 +          %else %do;
19234 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19235 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19236 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19237 +          %end;
19238 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19240 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19241 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19242 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19243 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19244 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19245 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19246 +          %end;
19247 +          %else %do;
19248 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19249 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19250 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19251 +          %end;
19252 +    ;
19253 +  run;
19255 +  /* delete temporary tables */
19256 +  proc datasets lib=work nolist;
19257 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19258 +  run;
19260 +%mend em_tree_makePlotDs;
19264 +%macro em_tree_report;
19266 +   /* report properties */
19267 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19268 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19269 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19270 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19271 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19272 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19273 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19274 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19275 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19276 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19277 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19278 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19279 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19281 +   %let validexist=0;
19282 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19283 +     %let validexist=1;
19284 +   %end;
19286 +   /* determine if multiple targets will be processed */
19287 +   %let em_tree_multipleTargets=N;
19288 +   %let em_tree_numTarget=1;
19289 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19290 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19291 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19292 +         %let em_tree_multipleTargets=N;
19293 +      %end;
19294 +      %else %do;
19295 +        data _null_;
19296 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19297 +          if eof then
19298 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19299 +        run;
19301 +        %if &em_tree_numTarget gt 1 %then %do;
19302 +           %let em_tree_multipleTargets=Y;
19303 +        %end;
19304 +     %end;
19305 +   %end;
19307 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19309 +   /* variable importance */
19310 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19311 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19313 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19314 +     /* and the columns may not be generated                                                                                 */
19315 +     %let em_tree_cvexists=;
19316 +     %let em_tree_surrexists=.;
19317 +     data _null_;
19318 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19319 +       if eof then do ;
19320 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19321 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19322 +       end;
19323 +     run;
19325 +     data &EM_USER_OUTIMPORT;
19326 +         set &EM_USER_OUTIMPORT;
19327 +         /* format columns based on Precison value specified */
19328 +         format importance 15.&EM_PROPERTY_PRECISION
19329 +              %if &validexist %then %do;
19330 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19331 +              %end;
19332 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19333 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19334 +              %end;
19335 +         ;
19336 +     run;
19338 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19339 +     proc print data=&EM_USER_OUTIMPORT
19340 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19341 +          (where=((nrules>0) OR (nsurrogates>0)))
19342 +        %end;
19343 +        %else %do;
19344 +           (where=(nrules>0))
19345 +        %end;
19346 +        label noobs
19347 +        ;
19348 +     run;
19349 +     title10;
19351 +   %end;
19353 +   /* Sequence */
19354 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19355 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19356 +   data _null_ ;
19357 +      set &EM_USER_outseq (obs=2) end=eof ;
19358 +      if eof then do ;
19359 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19360 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19361 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19362 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19363 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19364 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19365 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19366 +      end;
19367 +    run;
19369 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19370 +      data &EM_USER_OUTSEQ;
19371 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19372 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19373 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19374 +           _XMISC_=_VMISC_
19375 +        %end;
19376 +        %if "&em_tree_aprof" ne "."  %then %do;
19377 +           _XAPROF_=_VAPROF_
19378 +           _XPROF_ = _VPROF_
19379 +        %end;
19380 +        %if "&em_tree_aloss" ne "."  %then %do;
19381 +           _XALOSS_=_VALOSS_
19382 +        %end;
19383 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19384 +           _XPASE_ = _VPASE_
19385 +           _XPMISC_ = _VPMISC_
19386 +        %end;
19388 +        ));
19389 +     %end;
19390 +     %else %do;
19391 +        set &EM_USER_OUTSEQ;
19392 +     %end;
19394 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19395 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19396 +            _MISC_   15.&EM_PROPERTY_PRECISION
19397 +         %end;
19398 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19399 +            _PASE_  15.&EM_PROPERTY_PRECISION
19400 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19401 +         %end;
19402 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19403 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19404 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19405 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19406 +            %end;
19407 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19408 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19409 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19410 +            %end;
19411 +         %end;
19412 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19413 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19414 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19415 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19416 +            %end;
19417 +         %end;
19418 +         %if "&em_tree_seq" ne "." %then %do;
19419 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19420 +         %end;
19421 +         %if "&em_tree_vseq" ne "." %then %do;
19422 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19423 +         %end;
19424 +         %if "&em_tree_aprof" ne "." %then %do;
19425 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19426 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19427 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19428 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19429 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19430 +           %end;
19431 +         %end;
19432 +         %else %if "&em_tree_aloss" ne "." %then %do;
19433 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19434 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19435 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19436 +           %end;
19437 +         %end;
19438 +      ;
19439 +    run;
19440 +   %end;
19442 +   /* Observation Based Importance */
19443 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19445 +      /* need to check for 0 obs */
19446 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19447 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19448 +      %let rc=%sysfunc(close(&dsid));
19450 +      %if &onobs %then %do;
19451 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19452 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19454 +         data &EM_USER_OUTOBSIMP;
19455 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19456 +           if _a;
19457 +           by _INPUT1_;
19458 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19459 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19460 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19461 +                   %end;
19462 +                   ;
19463 +         run;
19464 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19465 +      %end;
19466 +   %end;
19468 +  %end;
19470 +  /* create dataset to support tree diagram and icicle plot */
19471 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19472 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19474 +  /* display tree diagram */
19475 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19476 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19478 +  /* display icicle diagram */
19479 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19480 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19482 +  /* Leaf Statistics Plot */
19483 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19485 +  /* print leaf information to output window */
19486 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19488 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19489 +       by descending N;
19490 +     run;
19492 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19493 +     %local vn;
19494 +     data _null_;
19495 +       set t (obs=2) end=eof;
19496 +       if eof then do;
19497 +         call symput("vn", strip(put(vn, best.)));
19498 +       end;
19499 +     run;
19501 +     data t;
19502 +       set t;
19503 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19504 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19505 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19506 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19507 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19508 +       %end;
19509 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19510 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19511 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19512 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19513 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19514 +          %end;
19515 +       %end;
19516 +       ;
19517 +     run;
19519 +     /* determine if rase is found in t */
19520 +    %let dsid=%sysfunc(open(t,i));
19521 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19522 +    %let rc=%sysfunc(close(&dsid));
19524 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19525 +     proc print data=t noobs label;
19526 +       where tprob ne .;
19527 +       var node depth N tprob
19528 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19529 +         %if "&vn" ne "." %then %do;
19530 +           VN
19531 +         %end;
19532 +         vprob
19533 +       %end;
19534 +       %if &raseexists %then %do;
19535 +            RASE
19536 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19537 +              VRASE
19538 +            %end;
19539 +       %end;
19540 +       ;
19541 +     run;
19542 +     title10;
19543 +  %end;
19545 +  /* create plots that are done during training of node */
19546 +  /* display iterative plot, including reference line */
19547 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19548 +   /* %if &nleaves eq  %then %do; */
19549 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19550 +      data _null_;
19551 +        set &EM_USER_OUTTOPOLOGY end=eof;
19552 +        if eof then do;
19553 +          call symput('nleaves', LEAF);
19554 +        end;
19555 +      run;
19556 +   /* %end; */
19558 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19559 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19560 +  %end;
19562 +  /* display leaf statistics */
19563 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19565 +  /* stats by node if multiple targets = Y */
19566 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19567 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19568 +    data &EM_USER_OUTSTATS;
19569 +      set &EM_USER_OUTSTATS;
19571 +     * if STATNAME="TARGET" then delete;
19572 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19573 +      drop leaf;
19574 +    run;
19575 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19577 +  %end;
19578 +  %else %do;
19579 +    /* add outstats and outdescribe to spk but not results */
19580 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19581 +  %end;
19583 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 38 observations read from the data set EMWS1.TREE2_OUTIMPORT.
NOTE: The data set EMWS1.TREE2_OUTIMPORT has 38 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set EMWS1.TREE2_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 25 observations read from the data set EMWS1.TREE2_OUTSEQ.
NOTE: The data set EMWS1.TREE2_OUTSEQ has 25 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_AUDIENCE_SCORE_P_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_AUDIENCE_SCORE_P_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='TRUE');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set EMWS1.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 10 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set EMWS1.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 5 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 10 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 5 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 5 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 10 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS1.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 15 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 15 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 15 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 20 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 354 observations read from the data set EMWS1.TREE2_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 10 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 20 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 10 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set EMWS1.TREE2_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 10 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 10 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 10 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE2_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 147 observations read from the data set EMWS1.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 147 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 147 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 126 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 21 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 147 observations read from the data set EMWS1.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 147 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 147 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 21 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 147 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 147 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 147 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 147 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 42 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 21 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 42 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 42 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 21 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.TEMPPROB.
NOTE: There were 42 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 42 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 42 observations read from the data set WORK.TEMPPROB.
NOTE: There were 21 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 21 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 21 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 21 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 21 observations read from the data set WORK.TEMPN.
NOTE: There were 21 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 21 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS1.TREE2_TREE_PLOT has 21 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 147 observations read from the data set EMWS1.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 42 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 42 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 21 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 21 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 21 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 21 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 11 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 11 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 21 observations read from the data set EMWS1.TREE2_TREE_PLOT.
NOTE: There were 11 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS1.TREE2_TREE_PLOT has 21 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 21 observations read from the data set EMWS1.TREE2_TREE_PLOT.
NOTE: The data set WORK.T has 21 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 21 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      297:141
NOTE: There were 21 observations read from the data set EMWS1.TREE2_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
19584
19585  *------------------------------------------------------------*;
19586  * End REPORT: Tree2;
19587  *------------------------------------------------------------*;
 
19588  /* Reset EM Options */
19589  options formchar="|----|+|---+=|-/\<>*";
19590  options nocenter ls=256 ps=10000;
19591  goptions reset=all device=GIF NODISPLAY;
 
19592  proc sort data=WORK.EM_USER_REPORT;
19593  by ID VIEW;
19594  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
19595  proc sort data=EMWS1.Impt_CMeta_TRAIN out=WORK.SUBSETINMETA;
19596  by NAME;
19597  run;
 
NOTE: There were 46 observations read from the data set EMWS1.IMPT_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 46 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
19598  proc sort data=EMWS1.Tree2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19599  by NAME;
19600  run;
 
NOTE: There were 46 observations read from the data set EMWS1.TREE2_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 46 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
19601  data WORK.ASSESS_META;
19602  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19603  by NAME;
19604  run;
 
NOTE: There were 46 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 46 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 46 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
19605  data EM_temp_assessMeta;
19606  set EMWS1.Tree2_CMeta_TRAIN;
19607  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19608  run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
19609  data EM_temp_assessdata;
19610  set EMWS1.Tree2_TRAIN(keep=
19611  F_audience_score_positive
19612  I_audience_score_positive
19613  P_audience_score_positiveFalse
19614  P_audience_score_positiveTrue
19615  Q_audience_score_positiveFalse
19616  Q_audience_score_positiveTrue
19617  R_audience_score_positiveFalse
19618  R_audience_score_positiveTrue
19619  U_audience_score_positive
19620  V_audience_score_positiveFalse
19621  V_audience_score_positiveTrue
19622  _WARN_
19623  audience_score_positive
19624  );
19625  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.10 seconds
 
NOTE: There were 2438 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.TREE2_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2438 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.17 seconds
      cpu time            0.10 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
23906   data EM_temp_assessMeta;
23907   set EMWS1.Tree2_CMeta_TRAIN;
23908   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
23909   run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23910   data EM_temp_assessdata;
23911   set EMWS1.Tree2_VALIDATE(keep=
23912   F_audience_score_positive
23913   I_audience_score_positive
23914   P_audience_score_positiveFalse
23915   P_audience_score_positiveTrue
23916   Q_audience_score_positiveFalse
23917   Q_audience_score_positiveTrue
23918   R_audience_score_positiveFalse
23919   R_audience_score_positiveTrue
23920   U_audience_score_positive
23921   V_audience_score_positiveFalse
23922   V_audience_score_positiveTrue
23923   _WARN_
23924   audience_score_positive
23925   );
23926   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 2440 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: View EMWS1.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.13 seconds
      cpu time            0.09 seconds
 
NOTE: There were 2440 observations read from the data set EMWS1.IMPT_VALIDATE.
NOTE: There were 2440 observations read from the data set EMWS1.TREE2_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2440 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.11 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28216   %let _cn = %sysfunc(getoption(CENTER));
28217   options nocenter;
28218   proc print data=EMWS1.Tree2_EMREPORTFIT noobs label;
28219   var STAT LABEL TRAIN
28220   VALIDATE
28221   ;
28222   by TARGET TARGETLABEL;
28223   title9 ' ';
28224   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28225   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE2_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
28226   title10;
28227   options &_cn;
 
28228   proc sort data=EMWS1.Tree2_EMCLASSIFICATION nothreads;
28229   by DATAROLE TARGET TARGETLABEL;
28230   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE2_EMCLASSIFICATION.
NOTE: The data set EMWS1.TREE2_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28231   %let _cn = %sysfunc(getoption(CENTER));
28232   options nocenter;
28233   proc print data=EMWS1.Tree2_EMCLASSIFICATION noobs label;
28234   var from into pct_row pct_col count percent
28235   ;
28236   by DATAROLE TARGET TARGETLABEL;
28237   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28238   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28239   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28240   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28241   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28242   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28243   where _TYPE_='PREDICTION';
28244   title9 ' ';
28245   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28246   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE2_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28247   title9;
28248   title10;
28249   options &_cn;
 
28250   %let _cn = %sysfunc(getoption(CENTER));
28251   options nocenter;
28252   data EMWS1.Tree2_EMEVENTREPORT;
28253   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
28253 !  8;
28254   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
28254 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
28254 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28254 ! FALSEEVENT
28255   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
28255 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
28255 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28256      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28257   FALSEEVENT=0;
28258   FALSENEVENT=0;
28259   TRUEEVENT=0;
28260   TRUENEVENT=0;
28261   set EMWS1.Tree2_EMEVENTREPORT;
28262   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE2_EMEVENTREPORT.
NOTE: The data set EMWS1.TREE2_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
28263   proc print data=EMWS1.Tree2_EMEVENTREPORT noobs label;
28264   title9 ' ';
28265   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28266   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28267   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE2_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28268   title10;
28269   options &_cn;
 
28270   proc datasets library=EMWS1 nolist;
28271   modify Tree2_EMRANK;
28272   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28273   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28274   run;
 
NOTE: MODIFY was successful for EMWS1.TREE2_EMRANK.DATA.
28275   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
28276   %let _cn = %sysfunc(getoption(CENTER));
28277   options nocenter;
28278   proc print data=EMWS1.Tree2_EMRANK label noobs;
28279   var
28280   decile gain lift liftc resp respc N _meanP_;
28281   by
28282   notsorted DATAROLE
28283   notsorted TARGET
28284   notsorted TARGETLABEL
28285   ;
28286   title9 ' ';
28287   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28288   run;
 
NOTE: There were 40 observations read from the data set EMWS1.TREE2_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28289   title10;
28290   options &_cn;
 
28291   proc datasets library=EMWS1 nolist;
28292   modify Tree2_EMSCOREDIST;
28293   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28294   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28295   run;
 
NOTE: MODIFY was successful for EMWS1.TREE2_EMSCOREDIST.DATA.
28296   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
