*;
* IMPUTE VARIABLE: ss_p75;
*;
format IMP_ss_p75 BEST12.0;
label IMP_ss_p75 = 'Imputed ss_p75';
IMP_ss_p75 = ss_p75;
if missing(IMP_ss_p75) then do;
****************************************************************;
****** DECISION TREE SCORING CODE ******;
****************************************************************;
****** LENGTHS OF NEW CHARACTER VARIABLES ******;
LENGTH _WARN_ $ 4;
****** LABELS FOR NEW VARIABLES ******;
label P_ss_p75 = 'Predicted: ss_p75';
label _WARN_ = 'Warnings';
****** ASSIGN OBSERVATION TO NODE ******;
IF NOT MISSING(ss_mean ) AND
ss_mean < 0.25934065934065 THEN DO;
DROP _BRANCH_;
_BRANCH_ = -1;
IF NOT MISSING(ss_mean ) AND
ss_mean < 0.24662162162162 THEN DO;
_BRANCH_ = 1;
END;
ELSE IF NOT MISSING(ss_mean ) AND
0.24662162162162 <= ss_mean THEN DO;
_BRANCH_ = 2;
END;
IF _BRANCH_ LT 0 AND NOT MISSING(ss_std ) THEN DO;
IF ss_std < 0.4497403061833 THEN DO;
_BRANCH_ = 1;
END;
ELSE IF 0.4497403061833 <= ss_std THEN DO;
_BRANCH_ = 2;
END;
ELSE _BRANCH_ = 2;
END;
IF _BRANCH_ LT 0 THEN _BRANCH_ = 1;
IF _BRANCH_ EQ 2 THEN DO;
P_ss_p75 = 0.27083333333333;
END;
ELSE DO;
P_ss_p75 = 0;
END;
END;
ELSE DO;
IF NOT MISSING(ss_mean ) AND
ss_mean < 0.2875939849624 THEN DO;
_BRANCH_ = -1;
IF NOT MISSING(ss_count ) AND
ss_count < 19.5 THEN DO;
_BRANCH_ = 1;
END;
ELSE IF NOT MISSING(ss_count ) AND
19.5 <= ss_count THEN DO;
_BRANCH_ = 2;
END;
IF _BRANCH_ LT 0 AND NOT MISSING(tomatometer_count ) THEN DO;
IF tomatometer_count < 19.5 THEN DO;
_BRANCH_ = 1;
END;
ELSE IF 19.5 <= tomatometer_count THEN DO;
_BRANCH_ = 2;
END;
ELSE _BRANCH_ = 2;
END;
IF _BRANCH_ LT 0 AND NOT MISSING(ss_std ) THEN DO;
IF 0.45748383253813 <= ss_std THEN DO;
_BRANCH_ = 1;
END;
ELSE IF ss_std < 0.45748383253813 THEN DO;
_BRANCH_ = 2;
END;
ELSE _BRANCH_ = 1;
END;
IF _BRANCH_ LT 0 THEN _BRANCH_ = 1;
IF _BRANCH_ EQ 2 THEN DO;
P_ss_p75 = 1;
END;
ELSE DO;
P_ss_p75 = 0.52631578947368;
END;
END;
ELSE DO;
IF NOT MISSING(ss_mean ) AND
ss_mean < 0.3357314148681 THEN DO;
_BRANCH_ = -1;
IF NOT MISSING(ss_std ) AND
ss_std < 0.50819888974716 THEN DO;
_BRANCH_ = 1;
END;
ELSE IF NOT MISSING(ss_std ) AND
0.50819888974716 <= ss_std THEN DO;
_BRANCH_ = 2;
END;
IF _BRANCH_ LT 0 AND NOT MISSING(ss_count ) THEN DO;
IF 7.5 <= ss_count THEN DO;
_BRANCH_ = 1;
END;
ELSE IF ss_count < 7.5 THEN DO;
_BRANCH_ = 2;
END;
ELSE _BRANCH_ = 1;
END;
IF _BRANCH_ LT 0 AND NOT MISSING(tomatometer_count ) THEN DO;
IF 7.5 <= tomatometer_count THEN DO;
_BRANCH_ = 1;
END;
ELSE IF tomatometer_count < 7.5 THEN DO;
_BRANCH_ = 2;
END;
ELSE _BRANCH_ = 1;
END;
IF _BRANCH_ LT 0 THEN _BRANCH_ = 1;
IF _BRANCH_ EQ 2 THEN DO;
P_ss_p75 = 0.75;
END;
ELSE DO;
_BRANCH_ = -1;
IF NOT MISSING(ss_mean ) AND
ss_mean < 0.30079365079365 THEN DO;
_BRANCH_ = 1;
END;
ELSE IF NOT MISSING(ss_mean ) AND
0.30079365079365 <= ss_mean THEN DO;
_BRANCH_ = 2;
END;
IF _BRANCH_ LT 0 AND NOT MISSING(ss_std ) THEN DO;
IF ss_std < 0.46111965266716 THEN DO;
_BRANCH_ = 1;
END;
ELSE IF 0.46111965266716 <= ss_std THEN DO;
_BRANCH_ = 2;
END;
ELSE _BRANCH_ = 2;
END;
IF _BRANCH_ LT 0 AND NOT MISSING(ss_count ) THEN DO;
IF 140.5 <= ss_count THEN DO;
_BRANCH_ = 1;
END;
ELSE IF ss_count < 140.5 THEN DO;
_BRANCH_ = 2;
END;
ELSE _BRANCH_ = 1;
END;
IF _BRANCH_ LT 0 THEN _BRANCH_ = 2;
IF _BRANCH_ EQ 1 THEN DO;
_BRANCH_ = -1;
IF NOT MISSING(ss_count ) AND
ss_count < 13.5 THEN DO;
_BRANCH_ = 1;
END;
ELSE IF NOT MISSING(ss_count ) AND
13.5 <= ss_count THEN DO;
_BRANCH_ = 2;
END;
IF _BRANCH_ LT 0 AND NOT MISSING(ss_std ) THEN DO;
IF 0.47660411876063 <= ss_std THEN DO;
_BRANCH_ = 1;
END;
ELSE IF ss_std < 0.47660411876063 THEN DO;
_BRANCH_ = 2;
END;
ELSE _BRANCH_ = 1;
END;
IF _BRANCH_ LT 0 AND NOT MISSING(tomatometer_count ) THEN DO;
IF tomatometer_count < 13.5 THEN DO;
_BRANCH_ = 1;
END;
ELSE IF 13.5 <= tomatometer_count THEN DO;
_BRANCH_ = 2;
END;
ELSE _BRANCH_ = 2;
END;
IF _BRANCH_ LT 0 THEN _BRANCH_ = 2;
IF _BRANCH_ EQ 1 THEN DO;
P_ss_p75 = 0.75;
END;
ELSE DO;
P_ss_p75 = 1;
END;
END;
ELSE DO;
P_ss_p75 = 1;
END;
END;
END;
ELSE DO;
P_ss_p75 = 1;
END;
END;
END;
****************************************************************;
****** END OF DECISION TREE SCORING CODE ******;
****************************************************************;
*;
* ASSIGN VALUE TO: ss_p75;
*;
IMP_ss_p75 = P_SS_P75;
END;
