*------------------------------------------------------------*
User:                jy
Date:                December 12, 2019
Time:                15:34:03
Site:                12600285
Platform:            X64_8PRO
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                December 12, 2019
Time:                15:33:48
*------------------------------------------------------------*
14716  proc freq data=EMWS1.Tree_VariableSet noprint;
14717  table ROLE*LEVEL/out=WORK.TreeMETA;
14718  run;
 
NOTE: There were 46 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 8 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.08 seconds
      cpu time            0.01 seconds
 
 
14719  proc print data=WORK.TreeMETA label noobs;
14720  var ROLE LEVEL COUNT;
14721  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14722  title9 ' ';
14723  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14724  run;
 
NOTE: There were 8 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14725  title10;
 
14726  %let EMNORLEN = %DMNORLEN;
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN EMWS1 Impt_TRAIN
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN EMWS1 Impt_TRAIN
14773  data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
14774  length ORDER $20;
14775  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
14776     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14777  set EMWS1.TREE_AUDIENCE_SCORE_P_DM( where=(_TYPE_="TARGET"));
14778  NumLevels=2;
14779  select(upcase(ORDER));
14780  when('DESC') ORDER = 'Descending';
14781  when('ASC') ORDER = 'Ascending';
14782  when('FMTDESC') ORDER = 'Formatted Descending';
14783  when('FMTASC') ORDER = 'Formatted Ascending';
14784  otherwise ORDER = 'Descending';
14785  end;
14786  output;
14787  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_AUDIENCE_SCORE_P_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
14788  title9 ' ';
14789  proc print data=WORK.Tree_EVENT noobs label;
14790  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
14791  title9 ' ';
14792  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
14793  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14794  title10;
 
"No decisions defined for target "audience_score_positive"."
14795  proc print data = EMWS1.Tree_audience_score_p_DM noobs label;
14796  var _type_ variable label;
14797  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14798  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14799  title9 ' ';
14800  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14801  run;
 
NOTE: There were 7 observations read from the data set EMWS1.TREE_AUDIENCE_SCORE_P_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14802  title10;
 
14803  %let EMEXCEPTIONSTRING=;
15329  *------------------------------------------------------------*;
15330  * Tree: Generation of macros and macro variables;
15331  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15332  *------------------------------------------------------------*;
 
15333  %let EMEXCEPTIONSTRING=;
15334  *------------------------------------------------------------*;
15335  * TRAIN: Tree;
15336  *------------------------------------------------------------*;
15337  %let EM_ACTION = TRAIN;
15338  %let syscc = 0;
15339  %macro main;
15340
15341    %if %upcase(&EM_ACTION) = CREATE %then %do;
15342      filename temp catalog 'sashelp.emmodl.tree_create.source';
15343      %include temp;
15344      filename temp;
15345
15346      %em_tree_create;
15347    %end;
15348
15349     %else
15350     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15351
15352         filename temp catalog 'sashelp.emmodl.tree_train.source';
15353         %include temp;
15354         filename temp;
15355         %em_tree_train;
15356     %end;
15357
15358    %else
15359    %if %upcase(&EM_ACTION) = SCORE %then %do;
15360      filename temp catalog 'sashelp.emmodl.tree_score.source';
15361      %include temp;
15362      filename temp;
15363
15364      %em_tree_score;
15365
15366    %end;
15367
15368    %else
15369    %if %upcase(&EM_ACTION) = REPORT %then %do;
15370
15371         filename temp catalog 'sashelp.emmodl.tree_report.source';
15372         %include temp;
15373         filename temp;
15374
15375         %em_tree_report;
15376     %end;
15377
15378    %else
15379    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15380
15381         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15382         %include temp;
15383         filename temp;
15384         %EM_TREE_OPENTREEVIEWER;
15385
15386     %end;
15387
15388    %else
15389    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15390
15391         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15392         %include temp;
15393         filename temp;
15394         %EM_TREE_CLOSETREEVIEWER;
15395
15396     %end;
15397
15398
15399     %doendm:
15400  %mend main;
15401
15402  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15404 +%macro em_tree_train;
15406 +   %if &EM_IMPORT_DATA eq %then %do;
15407 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15408 +       %put &em_codebar;
15409 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15410 +       %put &errormsg;
15411 +       %put &em_codebar;
15412 +       %goto doendm;
15413 +   %end;
15414 +   %else
15415 +       %let EMEXCEPTIONSTRING =;
15417 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15418 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15419 +        %put &em_codebar;
15420 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15421 +        %put &errormsg;
15422 +        %put &em_codebar;
15423 +        %goto doendm;
15424 +   %end;
15426 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15427 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15428 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15429 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15430 +        %put &em_codebar;
15431 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15432 +        %put &errormsg;
15433 +        %put &em_codebar;
15434 +        %goto doendm;
15435 +   %end;
15437 +   /* Initialize property macro variables */
15438 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15439 +   %include temp;
15440 +   filename temp;
15442 +   %EM_SetProperties;
15444 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15445 +   %EM_GETNAME(key=EMTREE, type=DATA);
15446 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15447 +     /* if import eq Y and no importtable defined, throw an exception */
15448 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15449 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15450 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15451 +         %put &em_codebar;
15452 +         %put &errmsg;
15453 +         %put &em_codebar;
15454 +         %goto doendm;
15455 +      %end;
15456 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15457 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15458 +         %put &em_codebar;
15459 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15460 +         %put &errormsg;
15461 +         %put &em_codebar;
15462 +         %goto doendm;
15463 +      %end;
15464 +      %else %do;
15465 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15466 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15467 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15468 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15469 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15470 +         %let dsid = %sysfunc(close(&dsid));
15471 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15472 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15473 +            %put &em_codebar;
15474 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15475 +            %put &errormsg;
15476 +            %put &em_codebar;
15477 +            %goto doendm;
15478 +         %end;
15479 +      %end;
15480 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15481 +         proc delete data=&EM_USER_EMTREE;
15482 +         run;
15483 +      %end;
15484 +   %end;
15485 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15486 +      proc delete data=&EM_USER_EMTREE;
15487 +      run;
15488 +   %end;
15490 +   /* load tree macros */
15491 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15492 +   %include temp;
15493 +   filename temp;
15495 +   /* data sets */
15496 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15497 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15498 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15500 +   /* files */
15501 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15503 +   /* check actual num of target levels */
15504 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15505 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15506 +                              nLevel=_nTargetLevel );
15507 +      %if &_nTargetLevel  > 2 %then %do;
15508 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15509 +        %put &em_codebar;
15510 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15511 +        %put &errormsg;
15512 +        %put &em_codebar;
15513 +        %goto doendm;
15514 +      %end;
15515 +   %end;
15517 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15518 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15519 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15520 +        %let costflag=0;
15521 +        data _null_;
15522 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15523 +          if eof then call symput("costflag", _N_);
15524 +        run;
15525 +        %if &costflag gt 0 %then %do;
15526 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15527 +          %put &em_codebar;
15528 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15529 +          %put &errormsg;
15530 +          %put &em_codebar;
15531 +          %goto doendm;
15532 +       %end;
15533 +     %end;
15534 +   %end;
15536 +   /* determine if multiple targets will be processed */
15537 +   %let em_tree_multipleTargets=N;
15538 +   %let em_tree_numTarget = 1;
15539 +   %let em_tree_targetVars=;
15541 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15542 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15543 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15544 +         %let em_tree_multipleTargets=N;
15545 +      %end;
15546 +      %else %do;
15547 +         /* create macro array of targets  */
15548 +         data _null_;
15549 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15550 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15551 +           if eof then
15552 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15553 +        run;
15555 +        %if &em_tree_numTarget gt 1 %then %do;
15556 +           %let em_tree_multipleTargets=Y;
15557 +        %end;
15558 +      %end;
15559 +   %end;
15561 +   /* create view of only necessary variable for performance reasons */
15562 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15563 +   data &tempData / view=&tempData;
15564 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15565 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15566 +       %EM_TARGET
15567 +     %end;
15568 +     %else %do;
15569 +       %if &em_tree_numTarget ne 0 %then %do;
15570 +         %do i=1 %to &em_tree_numTarget;
15571 +            &&em_tree_targetVars&i
15572 +         %end;
15573 +       %end;
15574 +     %end;
15575 +     );
15576 +   run;
15578 +   /* run Tree procedure */
15579 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15581 +   /* Check return code and throw exception if error is detected */
15582 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15583 +   %if &syserr %then %do;
15584 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15585 +     %goto doendm;
15586 +   %end;
15588 +   /* add decision score code if multiple targets are processed */
15589 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15590 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15591 +   %end;
15593 +   /* create outfit dataset if multiple score statements have been executed */
15594 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15596 +   /* create English Rules */
15597 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15598 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15599 +       %em_tree_makeEnglishRules;
15601 +       /* English Rules */
15602 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15604 +     %end;
15605 +   filename x;
15607 +   %doendm:
15608 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15609 +%macro EM_SetProperties;
15611 +   /* train properties */
15612 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15613 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15614 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15615 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15616 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15617 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15618 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15619 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15620 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15621 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15622 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15623 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15624 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15625 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15626 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15627 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15628 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15629 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15630 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15631 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15632 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15633 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15634 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15635 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15636 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15637 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15638 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15639 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15640 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15641 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15642 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15643 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15644 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15645 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15646 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15647 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15648 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15649 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15650 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15651 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15652 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15654 +   /* properties for interactive sample */
15655 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15656 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15657 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15658 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15660 +   /* report properties */
15661 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15662 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15663 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15664 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15665 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15666 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15667 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15668 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15669 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15670 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15671 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15672 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15673 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15675 +   /* score properties */
15676 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15677 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15679 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15681 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15682 +  %global &nLevel;
15683 +  proc dmdb batch data=&indata
15684 +    classout=_tmp_dmdbout;
15685 +    class &target;
15686 +  run;
15687 +  data _tmp_dmdbout;
15688 +    set _tmp_dmdbout;
15689 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15690 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15691 +  run;
15692 +  data _null_;
15693 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15694 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15695 +    %let dsid = %sysfunc(close(&dsid));
15696 +     call symput("&nLevel", put(&_obs, Best12.));
15697 +  run;
15699 +  proc datasets lib=work nolist;
15700 +     delete _tmp_dmdbout;
15701 +  run;
15702 +  quit;
15703 +%Mend EM_CheckBinaryTargetLevel;
15706 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15708 +  /* determine the number of obs in training data */
15709 +  proc sql;
15710 +    reset noprint;
15711 +    select count(*) into :em_nobs from &indata;
15712 +  quit;
15714 +  /* determine the number of input variables */
15715 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15716 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15718 +  /* retrieve targetEvent from decmeta */
15719 +  %let targetEvent=;
15720 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15721 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15722 +      data _null_;
15723 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15724 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15725 +      run;
15726 +    %end;
15727 +  %end;
15729 +  /* create targetTable if multipleTar eq Y */
15730 +  data temptarget;
15731 +    set &EM_DATA_VARIABLESET;
15732 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15733 +  run;
15735 + /* data sets */
15736 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15737 + %EM_GETNAME(key=EMTREE,        type=DATA);
15738 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15739 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15740 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15741 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15742 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15743 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15744 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15745 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15747 + /* files */
15748 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15749 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15751 + /* turn on pmml if requested */
15752 + %let nnpmml=0;
15753 + %if %symexist(EM_PMML) %then %do;
15754 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15755 +       %let nnpmml=1;
15757 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15758 +%end;
15760 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15762 + %if &nnpmml or &numClassTarget %then %do;
15764 +       /* create dmdb needed for pmml generation */
15765 +       %let tree_maxlevel = 512;
15766 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15767 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15768 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15769 +         %end;
15770 +       %end;
15771 +       %if &tree_maxlevel gt 0 %then %do;
15772 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15773 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15774 +       %end;
15776 +       %let targetOrderString =;
15777 +       %let targetString = ;
15778 +       data _null_;
15779 +          length orderString nameString $10000;
15780 +          retain orderString nameString;
15781 +          set &em_data_variableset end=eof;
15782 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15783 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15784 +          %end;
15785 +          %else %do;
15786 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15787 +          %end;          select(order);
15788 +            when('')        order ='DESC';
15789 +            when('FMTASC')  order='ASCFMT';
15790 +            when('FMTDESC') order='DESFMT';
15791 +            otherwise;
15792 +          end;
15793 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15794 +          nameString = trim(nameString)!!' '!!trim(NAME);
15796 +          if eof then do;
15797 +             call symput('targetOrderString', trim(orderString));
15798 +             call symput('targetString', trim(nameString));
15799 +          end;
15800 +       run;
15802 +       %let arborkluge= "work._treeDMDB";
15804 +       proc dmdb batch data=&indata
15805 +       %if &nnpmml %then %do;
15806 +           PMML
15807 +       %end;
15808 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15811 +   %if &nnpmml %then %do;
15812 +        %if "%EM_ID" ne "" %then %do;
15813 +          id %EM_ID;
15814 +        %end;
15815 +        %if &EM_NUM_CLASS gt 0 %then %do;
15816 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15817 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15818 +               &targetOrderString;
15819 +        %end;
15820 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15821 +          var %EM_INTERVAL;
15822 +        %end;
15823 +        target &targetString %EM_INTERVAL_TARGET;
15824 +        %if "%EM_FREQ" ne "" %then %do;
15825 +          freq %EM_FREQ;
15826 +        %end;
15827 +  %end;
15828 +  %else %do;
15829 +      class  &targetOrderString;
15830 +      target &targetString %EM_INTERVAL_TARGET;
15831 +  %end;
15832 +       run;
15833 +       quit;
15835 +       proc datasets lib=work nolist;
15836 +          delete classout varout;
15837 +       run;
15838 +       quit;
15840 +    %end;
15841 + %end;
15843 + /* run Arbor procedure */
15844 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15845 +  proc arbor data=&INDATA
15847 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15848 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15849 +  %end;
15851 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15852 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15853 +  %end;
15855 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15856 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15857 +  %end;
15859 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15860 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15861 +  %end;
15863 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15864 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15865 +  %end;
15867 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15868 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15869 +  %end;
15870 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15871 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15872 +  %end;
15873 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15874 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15875 +  %end;
15877 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15878 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15879 +      alpha = &EM_PROPERTY_SIGLEVEL
15880 +    %end;
15881 +  %end;
15883 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15884 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15885 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15886 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15887 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15889 +        padjust =
15890 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15891 +          &chaid
15892 +        %end;
15893 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15894 +          DEPTH
15895 +        %end;
15896 +      %end;
15897 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15898 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15899 +         pvars = &num_inputs
15900 +      %end;
15901 +    %end;
15902 +  %end;
15903 +  %else %do;
15904 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15905 +         padjust = NONE
15906 +      %end;
15907 +  %end;
15909 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15910 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15911 +    Maxrules = &num_nrules
15912 +  %end;
15914 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15915 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15916 +    Maxsurrs = &num_nsurrs
15917 +  %end;
15919 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15920 +     Missing=&EM_PROPERTY_MISSINGVALUE
15921 +  %end;
15923 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15924 +     USEVARONCE
15925 +  %end;
15927 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15928 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15929 +  %end;
15932 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15933 +    event = "&targetEvent"
15934 +  %end;
15936 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15937 +     DECSEARCH
15938 +  %end;
15940 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15941 +     PRIORSSEARCH
15942 +  %end;
15944 +  %if &arbor_1 ne %then %do;
15945 +    &arbor_1
15946 +  %end;
15948 +  %if &em_arbor ne %then %do;
15949 +     &em_arbor
15950 +  %end;
15951 +  ;
15952 + %end;
15953 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15954 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15955 +       interact;
15956 + %end;
15957 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15958 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15959 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15960 +    %put &em_codebar;
15961 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15962 +    %put &errormsg;
15963 +    %put &em_codebar;
15964 +    %goto doendm;
15965 +   %end;
15966 +   %else %do;
15967 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15968 +       interact;
15969 +   %end;
15970 + %end;
15972 + %else %do;
15973 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15974 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15975 +    %put &em_codebar;
15976 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15977 +    %put &errormsg;
15978 +    %put &em_codebar;
15979 +    %goto doendm;
15980 +   %end;
15981 +   %else %do;
15982 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15983 +        interact;
15984 +   %end;
15985 + %end;
15987 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15988 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
15989 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15990 +    %end;
15992 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
15993 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
15994 +    %end;
15996 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
15997 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
15998 +    %end;
16000 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16001 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16002 +    %end;
16004 +    %if "%EM_FREQ" ne "" %then %do;
16005 +       freq %EM_FREQ;
16006 +    %end;
16008 +    %if "&multipleTar" eq "Y" %then %do;
16009 +       /* cycle through all target vars in variableset */
16010 +       %let tdsid = %sysfunc(open(temptarget));
16011 +       %if &tdsid %then %do;
16012 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16013 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16014 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16015 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16016 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16017 +             target &var / level = &lvl
16018 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16019 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16020 +             %end;
16021 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16022 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16023 +             %end;
16024 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16025 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16026 +             %end;
16027 +          %end;
16028 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16029 +       %end;
16030 +       useTarget variable = %EM_TARGET;
16031 +    %end;
16032 +    %else %do;
16033 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16034 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16035 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16036 +      %end;
16037 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16038 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16039 +      %end;
16040 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16041 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16042 +      %end;
16043 +    %end;
16045 +    %if "&multipleTar" eq "N" %then %do;
16046 +      &EM_DEC_STATEMENT;
16047 +    %end;
16049 +    Performance &EM_PROPERTY_PERFORMANCE
16050 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16051 +      nodesize=&EM_PROPERTY_NODESAMPLE
16052 +    %end;
16053 +    ;
16055 +    %if "&intFlag" eq "Y" %then %do;
16056 +       INTERACT Largest;
16057 +       Train maxnewdepth=0;
16058 +    %end;
16060 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16061 +         Assess
16062 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16063 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16064 +              %put &em_codebar;
16065 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16066 +              %put &errormsg;
16067 +              %put &em_codebar;
16068 +            %end;
16069 +            %else %do;
16070 +               Validata=&EM_IMPORT_VALIDATE
16071 +            %end;
16072 +         %end;
16073 +         %else %do;
16074 +           NoValidata
16075 +         %end;
16076 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16077 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16078 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16079 +               %if &dsid %then %do;
16080 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16081 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16082 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16083 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16084 +                   %else %do;
16085 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16086 +                      %else %let measure= MISC;
16087 +                   %end;
16088 +                 %end;
16089 +               %end;
16090 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16091 +            %end;
16092 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16093 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16094 +                 %let measure=ASE;
16095 +              %end;
16096 +              %else %do;
16097 +                 %let measure=MISC;
16098 +              %end;
16099 +            %end;
16100 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16101 +              %let measure=ASE;
16102 +            %end;
16103 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16104 +               %let measure = LIFT;
16105 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16106 +               %if &dsid %then %do;
16107 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16108 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16109 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16110 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16111 +                 %end;
16112 +               %end;
16113 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16114 +            %end;
16115 +            measure=&measure
16116 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16117 +               event = "&targetEvent"
16118 +            %end;
16119 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16120 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16121 +            %end;
16122 +         %end;
16123 +         %if "&multipleTar" eq "N" %then %do;
16124 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16125 +               CV
16126 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16127 +                 CVNITer = &EM_PROPERTY_CVNITER
16128 +               %end;
16129 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16130 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16131 +               %end;
16132 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16133 +                 CVSeed = &EM_PROPERTY_CVSEED
16134 +               %end;
16135 +            %end;
16136 +         %end;
16137 +       %end;
16138 +      ;
16140 +      %if "&intFlag" ne "Y" %then %do;
16141 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16142 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16143 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16144 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16146 +          SUBTREE &subtree
16147 +          %if "&subtree" eq "NLEAVES" %then %do;
16148 +            =&EM_PROPERTY_NSUBTREE
16149 +          %end;
16150 +          ;
16151 +        %end;
16153 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16154 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16155 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16156 +          %end;
16157 +       %end;
16158 +      %end;
16159 + %end;
16162 + MakeMacro nleaves = nleaves;
16163 + save
16164 + %if "&EM_USER_EMTREE" ne "" %then %do;
16165 +   MODEL=&EM_USER_EMTREE
16166 + %end;
16167 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16168 +   SEQUENCE=&EM_USER_OUTSEQ
16169 + %end;
16170 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16171 +   IMPORTANCE=&EM_USER_OUTIMPORT
16172 + %end;
16173 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16174 +   NODESTAT=&EM_USER_OUTNODES
16175 + %end;
16176 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16177 +   SUMMARY=&EM_USER_OUTSUMMARY
16178 + %end;
16179 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16180 +   STATSBYNODE=&EM_USER_OUTSTATS
16181 + %end;
16182 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16183 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16184 + %end;
16185 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16186 +   Pathlistnonmissing=&EM_USER_OUTPATH
16187 + %end;
16188 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16189 +   RULES = &EM_USER_OUTRULES
16190 + %end;
16191 + ;
16193 + %if "&intFlag" ne "Y" %then %do;
16195 +   %let lookupString = ;
16196 +   %if ^%symexist(EM_OPTION) %then
16197 +      %let EM_OPTION=;
16199 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16200 +      %let lookupString = LOOKUP=SELECT;
16201 +   %end;
16203 +   %let codetext=;
16204 +   %let norescodetxt=;
16206 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16207 +     %let codetext=&codetext DUMMY;
16208 +     %let norescodetxt=&norescodetxt DUMMY;
16209 +   %end;
16210 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16211 +     %let codetext=&codetext NOLEAFID;
16212 +     %let norescodetxt=&norescodetxt NOLEAFID;
16213 +   %end;
16214 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16215 +     %let norescodetxt=&norescodetxt NOPRED;
16216 +   %end;
16218 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16219 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16221 +   %if &nnpmml %then %do;
16222 +     code pmml;
16223 +   %end;
16225 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16226 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16227 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16228 +   %end;
16229 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16230 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16231 +   %end;
16232 + %end;
16234 + run;
16235 + quit;
16237 + /*%em_checkerror(); */
16238 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16239 +   /* Delete DMDB catalog */
16240 +   proc datasets lib=work nolist;
16241 +       delete _treeDMDB / mt=cat;
16242 +  run;
16243 +  %end;
16245 + %if &nnpmml %then %do;
16246 +    ods pmml close;
16247 + %end;
16249 +  %doendm:
16251 +%mend em_tree_runTreeProcedure;
16253 +%macro em_tree_createFitStats( multipleTar= );
16256 +  /* create targetTable is multipleTar eq Y */
16257 +  data temptarget;
16258 +    set &EM_DATA_VARIABLESET;
16259 +    where ROLE="TARGET";
16260 +  run;
16262 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16263 +   data &EM_USER_EMOUTFIT;
16264 +     length target $32;
16265 +     merge work.fit_train
16266 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16267 +       work.fit_valid
16268 +     %end;
16269 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16270 +       work.fit_test
16271 +     %end;
16272 +     ;
16273 +     %if "&multipleTar" eq "N" %then %do;
16274 +       target="%EM_TARGET";
16275 +     %end;
16276 +     %else %do;
16277 +       target = _TARGET_;
16278 +     %end;
16279 +     drop _NW_ _SUMW_
16280 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16281 +        _VSUMW_
16282 +     %end;
16283 +     ;
16284 +   run;
16286 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16287 +     proc datasets library=work nolist;
16288 +       delete fit_valid;
16289 +     run;
16290 +   %end;
16291 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16292 +     proc datasets library=work nolist;
16293 +       delete fit_test;
16294 +     run;
16295 +   %end;
16297 +%mend em_tree_createFitStats;
16300 +%macro em_tree_makeEnglishRules;
16302 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16303 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16305 +  /* verify that necessary tables exist and if not, skip processing */
16306 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16307 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16308 +    %goto doendm;
16309 +  %end;
16310 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16311 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16312 +    %goto doendm;
16313 +  %end;
16315 +  /* determine length of variable in outpath dataset */
16316 +  %let vlength= ;
16317 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16318 +  %if &dsid ne %then %do;
16319 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16320 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16321 +  %end;
16322 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16324 +  data tempoutpath;
16325 +    length varname $&vlength;
16326 +    retain varname;
16327 +    set &EM_USER_OUTPATH;
16329 +    if ^missing(variable) then varname=variable;
16330 +    else if ^missing(var_name) then varname=var_name;
16331 +    output;
16332 +  run;
16334 +  /* create an array of generated predicted variable names */
16335 +  %let tree_pred_vars = ;
16336 +  %let tree_pred_label = ;
16337 +  %let numpred= 0;
16338 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16340 +    data _null_;
16341 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16342 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16343 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16344 +     if eof then
16345 +       call symput('numpred', strip(put(_N_, BEST.)));
16346 +    run;
16347 +  %end;
16349 +  /* determine if NPRIORS exists in outnodes  */
16350 +  %local nprior_flag;
16351 +  data _null_;
16352 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16353 +    if eof then do;
16354 +      call symput('nprior_flag', strip(put(npriors, best.)));
16355 +    end;
16356 +  run;
16358 +  proc sort data=tempoutpath; by node; run;
16359 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16361 +  data tempoutpath;
16362 +    merge tempoutpath(in=_a) outnodes(keep= node
16363 +    %if "&nprior_flag" ne "." %then %do;
16364 +      NPRIORS
16365 +    %end;
16366 +    %else %do;
16367 +      N
16368 +    %end;
16369 +    %if &numpred gt 0 %then %do;
16370 +      %do i=1 %to &numpred;
16371 +        &&tree_pred_vars&i
16372 +      %end;
16373 +    %end;
16374 +    );
16375 +    by node;
16376 +    if _a;
16377 +  run;
16379 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16381 +  data _null_;
16382 +    file x;
16383 +    set tempoutpath;
16384 +    by node descending varname;
16385 +    retain origvar oldnode string;
16386 +    length origvar $32 oldnode 8 string $200;
16388 +    if _N_ = 1 then do;
16389 +      origvar = varname;
16390 +      oldnode = node;
16391 +    end;
16393 +    if first.node then do;
16394 +       put "&EM_CODEBAR";
16395 +       put " Node = " node;
16396 +       put "&EM_CODEBAR";
16397 +    end;
16399 +      if first.varname then do;
16400 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16401 +            if MISSING(CHARACTER_VALUE) then do;
16402 +             if NUMERIC_VALUE ne .  then do;
16403 +              if ^first.node then do;
16404 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16405 +              end;
16406 +              else do;
16407 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16408 +              end;
16409 +             end;
16410 +            end;
16411 +            else do;
16412 +              if ^first.node then do;
16413 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16414 +              end;
16415 +              else do;
16416 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16417 +              end;
16418 +             end;
16419 +         end;
16420 +         else if RELATION in ("=") then do;
16421 +            if ^first.node then do;
16422 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16423 +            end;
16424 +            else do;
16425 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16426 +            end;
16427 +         end;
16428 +         else if RELATION in ("ISMISSING") then do;
16429 +            if ^first.node then do;
16430 +              string = " AND "|| strip(varname) || " equals Missing";
16431 +            end;
16432 +            else do;
16433 +              string = "if "|| strip(varname) ||" equals Missing";
16434 +            end;
16435 +         end;
16436 +         else if RELATION in ("ISNOTMISSING") then do;
16437 +            if ^first.node then do;
16438 +              string = " AND "|| strip(varname) || " equals All Values";
16439 +            end;
16440 +            else do;
16441 +              string = "if "|| strip(varname) ||" equals All Values";
16442 +            end;
16443 +         end;
16444 +         if ^missing(varname) then origvar = varname;
16445 +         oldnode=node;
16447 +      end;
16448 +      else do;
16449 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16450 +          if MISSING(CHARACTER_VALUE) then do;
16451 +           if  NUMERIC_VALUE ne .  then do;
16452 +            if ^MISSING(string) then
16453 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16454 +            else
16455 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16456 +           end;
16457 +          end;
16458 +          else do;
16459 +            if ^MISSING(string) then
16460 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16461 +            else
16462 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16463 +          end;
16465 +         end;
16466 +         else if RELATION in ("=") then do;
16467 +           string = strip(string)||", "||strip(character_value);
16468 +         end;
16469 +         else if RELATION in ("ISMISSING") then do;
16471 +         end;
16472 +         if ^missing(varname) then origvar = varname;
16473 +         oldnode=node;
16474 +      end;
16475 +      if last.varname then do;
16476 +         if RELATION in ("ISMISSING") then do;
16477 +           if ^first.varname then do;
16478 +             string = strip(string) || " or MISSING";
16479 +           end;
16480 +         end;
16481 +         put string;
16482 +         if ^missing(varname) then origvar = varname;
16483 +         oldnode=node;
16484 +      end;
16486 +      if last.node then do;
16487 +         put "then ";
16488 +         put " Tree Node Identifier   = " node;
16490 +         %if "&nprior_flag" ne "." %then %do;
16491 +           put " Number of Observations = " NPRIORS;
16492 +         %end;
16493 +         %else %do;
16494 +           put " Number of Observations = " N;
16495 +         %end;
16497 +         %if &numpred gt 0 %then %do;
16498 +           %do i=1 %to &numpred;
16499 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16500 +           %end;
16501 +         %end;
16503 +         put " ";
16504 +         if ^missing(varname) then origvar = varname;
16505 +         oldnode=node;
16506 +      end;
16508 +  run;
16510 +  proc datasets lib=work nolist;
16511 +    delete tempoutpath outnodes;
16512 +  run;
16514 +  %doendm:
16515 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: Records processed = 2438   Memory used = 511K.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.16 seconds
      cpu time            0.06 seconds
 
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.19 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.09 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.12 seconds
 
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.19 seconds
      cpu time            0.15 seconds
 
NOTE: There were 2438 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.21 seconds
      cpu time            0.18 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_AUDIENCE_SCORE_P_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: Records processed = 2438   Memory used = 511K.
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.22 seconds
      cpu time            0.14 seconds
 
NOTE: There were 2438 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.25 seconds
      cpu time            0.17 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: 1488514 kilobytes of physical memory.
NOTE: Will use 2438 out of 2438 training cases.
NOTE: Using memory pool with 282483712 bytes.
NOTE: Will not search for split on variable NC17.
NOTE: Acceptable cases have the same value.
NOTE: Option MINCATSIZE=5 may apply.
NOTE: Passed training data 12 times.
NOTE: Training used 1994840 bytes of work memory.
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.52 seconds
      cpu time            0.34 seconds
 
NOTE: There were 2440 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: The subtree sequence contains 24 subtrees. The largest has 47 nodes and 24 leaves.
NOTE: Using subtree with 21 nodes and 11 leaves.
NOTE: Using subtree with 21 nodes and 11 leaves.
NOTE: Created macro variable NLEAVES equal to 11.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 32 observations and 6 variables.
NOTE: The data set EMWS1.TREE_EMTREE has 1616 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTNODES has 21 observations and 24 variables.
NOTE: The data set EMWS1.TREE_OUTPATH has 89 observations and 7 variables.
NOTE: The data set EMWS1.TREE_OUTRULES has 394 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTSEQ has 24 observations and 20 variables.
NOTE: The data set EMWS1.TREE_OUTSTATS has 147 observations and 5 variables.
NOTE: The data set EMWS1.TREE_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTTOPOLOGY has 21 observations and 5 variables.
NOTE: External file C:\Users\jy\Desktop\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree\TREEFLOW.sas opened.
NOTE: External file C:\Users\jy\Desktop\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree\TREEPUBLISH.sas opened.
NOTE: Variable _WARN_ is uninitialized.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.22 seconds
      cpu time            0.15 seconds
 
NOTE: There were 2438 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: Variable _WARN_ is uninitialized.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.18 seconds
      cpu time            0.07 seconds
 
NOTE: There were 2440 observations read from the data set EMWS1.PART_VALIDATE.
 
 
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           1.31 seconds
      cpu time            0.78 seconds
 
NOTE: There were 2438 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           1.35 seconds
      cpu time            0.81 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 89 observations read from the data set EMWS1.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 89 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_AUDIENCE_SCORE_P_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 89 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 89 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 21 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 89 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 21 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 89 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 89 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 89 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=C:\Users\jy\Desktop\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=12Dec2019:15:33:53,
      Create Time=12Dec2019:15:33:53
 
NOTE: 140 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: There were 89 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref X has been deassigned.
16517
16518  *------------------------------------------------------------*;
16519  * End TRAIN: Tree;
16520  *------------------------------------------------------------*;
 
16521  *------------------------------------------------------------*;
16522  * Close any missing semi colons;
16523  *------------------------------------------------------------*;
16524  ;
16525  ;
16526  ;
16527  ;
16528  quit;
16529  *------------------------------------------------------------*;
16530  * Close any unbalanced quotes;
16531  *------------------------------------------------------------*;
16532  /*; *"; *'; */
16533  ;
16534  run;
16535  quit;
16536  /* Reset EM Options */
16537  options formchar="|----|+|---+=|-/\<>*";
16538  options nocenter ls=256 ps=10000;
16539  goptions reset=all device=GIF NODISPLAY;
 
16540  proc sort data=WORK.EM_USER_REPORT;
16541  by ID VIEW;
16542  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                December 12, 2019
Time:                15:33:54
*------------------------------------------------------------*
16644  %let EMEXCEPTIONSTRING=;
16645  *------------------------------------------------------------*;
16646  * SCORE: Tree;
16647  *------------------------------------------------------------*;
16648  %let EM_ACTION = SCORE;
16649  %let syscc = 0;
16650  %macro main;
16651
16652    %if %upcase(&EM_ACTION) = CREATE %then %do;
16653      filename temp catalog 'sashelp.emmodl.tree_create.source';
16654      %include temp;
16655      filename temp;
16656
16657      %em_tree_create;
16658    %end;
16659
16660     %else
16661     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16662
16663         filename temp catalog 'sashelp.emmodl.tree_train.source';
16664         %include temp;
16665         filename temp;
16666         %em_tree_train;
16667     %end;
16668
16669    %else
16670    %if %upcase(&EM_ACTION) = SCORE %then %do;
16671      filename temp catalog 'sashelp.emmodl.tree_score.source';
16672      %include temp;
16673      filename temp;
16674
16675      %em_tree_score;
16676
16677    %end;
16678
16679    %else
16680    %if %upcase(&EM_ACTION) = REPORT %then %do;
16681
16682         filename temp catalog 'sashelp.emmodl.tree_report.source';
16683         %include temp;
16684         filename temp;
16685
16686         %em_tree_report;
16687     %end;
16688
16689    %else
16690    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16691
16692         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16693         %include temp;
16694         filename temp;
16695         %EM_TREE_OPENTREEVIEWER;
16696
16697     %end;
16698
16699    %else
16700    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16701
16702         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16703         %include temp;
16704         filename temp;
16705         %EM_TREE_CLOSETREEVIEWER;
16706
16707     %end;
16708
16709
16710     %doendm:
16711  %mend main;
16712
16713  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16715 +%macro em_tree_score;
16717 +   /* determine if multiple targets will be processed */
16718 +   %let em_tree_multipleTargets=N;
16719 +   %let em_tree_numTarget=1;
16720 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16721 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16722 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16723 +         %let em_tree_multipleTargets=N;
16724 +      %end;
16725 +      %else %do;
16726 +         /* create macro array of targets  */
16727 +         data _null_;
16728 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16729 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16730 +           if eof then
16731 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16732 +        run;
16734 +        %if &em_tree_numTarget gt 1 %then %do;
16735 +           %let em_tree_multipleTargets=Y;
16736 +        %end;
16737 +      %end;
16738 +   %end;
16740 +   /* build flow and publish scoring code */
16741 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16742 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16744 +   filename treeflow "&EM_USER_TREEFLOW";
16745 +   filename treepub "&EM_USER_TREEPUBLISH";
16747 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16748 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16750 +   %em_copyfile(infref=treeflow, outfref=flowref);
16751 +   %em_copyfile(infref=treepub, outfref=pubref);
16753 +   filename treeflow;
16754 +   filename treepub;
16756 +   /* if priors are used, add code to generate unadjusted residuals in export */
16757 +   %let useAdjPriors = N;
16758 +   data _null_;
16759 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16760 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16761 +   run;
16762 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16763 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16764 +      %include temp;
16765 +      filename temp;
16767 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16768 +      filename adjref "&EM_USER_adjResidualCode";
16769 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16771 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16773 +      filename adjref;
16774 +   %end;
16776 +   /* LEAF */
16777 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16778 +      data _null_;
16779 +        file flowref mod;
16780 +        put 'drop _LEAF_;';
16781 +      run;
16783 +      data _null_;
16784 +        file pubref mod;
16785 +        put 'drop _LEAF_;';
16786 +      run;
16788 +   %end;
16790 +   filename flowref;
16791 +   filename pubref;
16793 +   /* em_metachange code */
16794 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16795 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16796 +   %end;
16798 +   /* variable selection based on importance stat    */
16799 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16800 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16801 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16802 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16803 +     %let obs = %sysfunc(fetch(&dsid));
16804 +     %do %while(&obs=0);
16805 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16806 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16807 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16808 +       %let obs = %sysfunc(fetch(&dsid));
16809 +     %end;
16810 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16811 +   %end;
16813 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16814 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16815 +    %let tree_pred_vars = ;
16816 +    %let tree_pred_lvl =;
16817 +    %let numpred= 0;
16819 +    data _null_;
16820 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16821 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16822 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16823 +     if eof then
16824 +       call symput('numpred', strip(put(_N_, BEST.)));
16825 +    run;
16826 +   %end;
16828 +   %if &numpred ne 0 %then %do;
16829 +    %do i=1 %to &numpred;
16830 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16831 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16832 +    %end;
16833 +   %end;
16835 +   /* determine if multiple targets will be processed */
16836 +   %let em_tree_multipleTargets=N;
16837 +   %let em_tree_numTarget=1;
16838 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16839 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16840 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16841 +         %let em_tree_multipleTargets=N;
16842 +      %end;
16843 +      %else %do;
16844 +        data _null_;
16845 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16846 +          if eof then
16847 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16848 +        run;
16850 +        %if &em_tree_numTarget gt 1 %then %do;
16851 +           %let em_tree_multipleTargets=Y;
16852 +        %end;
16853 +     %end;
16854 +   %end;
16856 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16857 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16859 +      /* variable importance */
16860 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16861 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16863 +         %let validexist=0;
16864 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16865 +           %let validexist=1;
16866 +         %end;
16868 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16869 +         /* and the columns may not be generated                                                                                 */
16870 +         %let em_tree_cvexists=;
16871 +         %let em_tree_surrexists=.;
16872 +         data _null_;
16873 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16874 +            if eof then do ;
16875 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16876 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16877 +            end;
16878 +         run;
16880 +         data &EM_USER_OUTIMPORT;
16881 +            set &EM_USER_OUTIMPORT;
16883 +            /* format columns based on Precison value specified */
16884 +            format importance 15.&EM_PROPERTY_PRECISION
16885 +                 %if &validexist %then %do;
16886 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16887 +                 %end;
16888 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16889 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16890 +                 %end;
16891 +            ;
16892 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16893 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16894 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16895 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16896 +                 %if "&em_tree_surrexists" ne "" %then %do;
16897 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16898 +                 %end;
16899 +                 %if &validexist %then %do;
16900 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16901 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16902 +                 %end;
16903 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16904 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16905 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16906 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16907 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16908 +                 %end;
16909 +            ;
16910 +         run;
16912 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16913 +      %end;
16914 +   %end;
16916 +   %doendm:
16917 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\jy\Desktop\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=12Dec2019:15:33:53,
      Create Time=12Dec2019:15:33:53
 
NOTE: 232 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 75.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\jy\Desktop\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=12Dec2019:15:33:53,
      Create Time=12Dec2019:15:33:53
 
NOTE: 206 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 67.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_AUDIENCE_SCORE_P_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\jy\Desktop\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=10469,
      Last Modified=12Dec2019:15:33:53,
      Create Time=12Dec2019:15:33:53
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\jy\Desktop\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=9411,
      Last Modified=12Dec2019:15:33:53,
      Create Time=12Dec2019:15:33:53
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 15 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 16 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 16 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 17 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 18 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 18 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 19 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 19 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 20 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 21 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 22 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 22 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 23 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 24 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 24 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 25 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_AUDIENCE_SCORE_P_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 26 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 27 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 32 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 32 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
16918
16919  *------------------------------------------------------------*;
16920  * End SCORE: Tree;
16921  *------------------------------------------------------------*;
 
16922  proc sort data=WORK.EM_METACHANGE;
16923  by key uname;
16924  run;
 
NOTE: There were 27 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 27 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
16925  filename x "C:\Users\jy\Desktop\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas";
16926  data _null_;
16927  file x;
16928  put 'if upcase(NAME) = "G" then do;';
16929  put 'ROLE = "REJECTED";';
16930  put 'end;';
16931  put 'else ';
16932  put 'if upcase(NAME) = "GENRE_ACTION" then do;';
16933  put 'ROLE = "REJECTED";';
16934  put 'end;';
16935  put 'else ';
16936  put 'if upcase(NAME) = "GENRE_ADVENTURE" then do;';
16937  put 'ROLE = "REJECTED";';
16938  put 'end;';
16939  put 'else ';
16940  put 'if upcase(NAME) = "GENRE_ANIMATIONMANGA" then do;';
16941  put 'ROLE = "REJECTED";';
16942  put 'end;';
16943  put 'else ';
16944  put 'if upcase(NAME) = "GENRE_ARTHOUSEINTER" then do;';
16945  put 'ROLE = "REJECTED";';
16946  put 'end;';
16947  put 'else ';
16948  put 'if upcase(NAME) = "GENRE_CLASSICSCULT" then do;';
16949  put 'ROLE = "REJECTED";';
16950  put 'end;';
16951  put 'else ';
16952  put 'if upcase(NAME) = "GENRE_COMEDY" then do;';
16953  put 'ROLE = "REJECTED";';
16954  put 'end;';
16955  put 'else ';
16956  put 'if upcase(NAME) = "GENRE_FAMILYKIDS" then do;';
16957  put 'ROLE = "REJECTED";';
16958  put 'end;';
16959  put 'else ';
16960  put 'if upcase(NAME) = "GENRE_FANTASY" then do;';
16961  put 'ROLE = "REJECTED";';
16962  put 'end;';
16963  put 'else ';
16964  put 'if upcase(NAME) = "GENRE_FITNESSSPORTS" then do;';
16965  put 'ROLE = "REJECTED";';
16966  put 'end;';
16967  put 'else ';
16968  put 'if upcase(NAME) = "GENRE_HORROR" then do;';
16969  put 'ROLE = "REJECTED";';
16970  put 'end;';
16971  put 'else ';
16972  put 'if upcase(NAME) = "GENRE_MUSICALPERFARTS" then do;';
16973  put 'ROLE = "REJECTED";';
16974  put 'end;';
16975  put 'else ';
16976  put 'if upcase(NAME) = "GENRE_ROMANCE" then do;';
16977  put 'ROLE = "REJECTED";';
16978  put 'end;';
16979  put 'else ';
16980  put 'if upcase(NAME) = "GENRE_SCI_FI" then do;';
16981  put 'ROLE = "REJECTED";';
16982  put 'end;';
16983  put 'else ';
16984  put 'if upcase(NAME) = "GENRE_SPECIAL_INTEREST" then do;';
16985  put 'ROLE = "REJECTED";';
16986  put 'end;';
16987  put 'else ';
16988  put 'if upcase(NAME) = "GENRE_WESTERN" then do;';
16989  put 'ROLE = "REJECTED";';
16990  put 'end;';
16991  put 'else ';
16992  put 'if upcase(NAME) = "IMP_FOREIGN_GROSS" then do;';
16993  put 'ROLE = "REJECTED";';
16994  put 'end;';
16995  put 'else ';
16996  put 'if upcase(NAME) = "IMP_MARKETS_MISSING" then do;';
16997  put 'ROLE = "REJECTED";';
16998  put 'end;';
16999  put 'else ';
17000  put 'if upcase(NAME) = "IMP_USER_RATING_COUNT" then do;';
17001  put 'ROLE = "REJECTED";';
17002  put 'end;';
17003  put 'else ';
17004  put 'if upcase(NAME) = "NC17" then do;';
17005  put 'ROLE = "REJECTED";';
17006  put 'end;';
17007  put 'else ';
17008  put 'if upcase(NAME) = "NR" then do;';
17009  put 'ROLE = "REJECTED";';
17010  put 'end;';
17011  put 'else ';
17012  put 'if upcase(NAME) = "PG" then do;';
17013  put 'ROLE = "REJECTED";';
17014  put 'end;';
17015  put 'else ';
17016  put 'if upcase(NAME) = "PG_13" then do;';
17017  put 'ROLE = "REJECTED";';
17018  put 'end;';
17019  put 'else ';
17020  put 'if upcase(NAME) = "Q_AUDIENCE_SCORE_POSITIVEFALSE" then do;';
17021  put 'ROLE = "ASSESS";';
17022  put 'end;';
17023  put 'else ';
17024  put 'if upcase(NAME) = "Q_AUDIENCE_SCORE_POSITIVETRUE" then do;';
17025  put 'ROLE = "ASSESS";';
17026  put 'end;';
17027  put 'else ';
17028  put 'if upcase(NAME) = "R" then do;';
17029  put 'ROLE = "REJECTED";';
17030  put 'end;';
17031  put 'else ';
17032  put 'if upcase(NAME) = "_NODE_" then do;';
17033  put 'ROLE = "SEGMENT";';
17034  put 'LEVEL = "NOMINAL";';
17035  put 'end;';
17036  run;
 
NOTE: The file X is:
      Filename=C:\Users\jy\Desktop\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=12Dec2019:15:33:54,
      Create Time=12Dec2019:15:31:20
 
NOTE: 108 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 59.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17037  filename x;
NOTE: Fileref X has been deassigned.
 
17038  filename emflow "C:\Users\jy\Desktop\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
17039  *------------------------------------------------------------*;
17040  * Tree: Scoring DATA data;
17041  *------------------------------------------------------------*;
17042  data EMWS1.Tree_TRAIN
17043  / view=EMWS1.Tree_TRAIN
17044  ;
17045  set EMWS1.Impt_TRAIN
17046  ;
17047  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\jy\Desktop\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
17048 +****************************************************************;
17049 +******             DECISION TREE SCORING CODE             ******;
17050 +****************************************************************;
17051 +
17052 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17053 +LENGTH F_audience_score_positive  $    5;
17054 +LENGTH I_audience_score_positive  $    5;
17055 +LENGTH U_audience_score_positive  $    5;
17056 +LENGTH _WARN_  $    4;
17057 +
17058 +******              LABELS FOR NEW VARIABLES              ******;
17059 +label _NODE_ = 'Node' ;
17060 +label _LEAF_ = 'Leaf' ;
17061 +label P_audience_score_positiveTrue =
17062 +'Predicted: audience_score_positive=True' ;
17063 +label P_audience_score_positiveFalse =
17064 +'Predicted: audience_score_positive=False' ;
17065 +label Q_audience_score_positiveTrue =
17066 +'Unadjusted P: audience_score_positive=True' ;
17067 +label Q_audience_score_positiveFalse =
17068 +'Unadjusted P: audience_score_positive=False' ;
17069 +label V_audience_score_positiveTrue =
17070 +'Validated: audience_score_positive=True' ;
17071 +label V_audience_score_positiveFalse =
17072 +'Validated: audience_score_positive=False' ;
17073 +label R_audience_score_positiveTrue =
17074 +'Residual: audience_score_positive=True' ;
17075 +label R_audience_score_positiveFalse =
17076 +'Residual: audience_score_positive=False' ;
17077 +label F_audience_score_positive = 'From: audience_score_positive' ;
17078 +label I_audience_score_positive = 'Into: audience_score_positive' ;
17079 +label U_audience_score_positive =
17080 +'Unnormalized Into: audience_score_positive' ;
17081 +label _WARN_ = 'Warnings' ;
17082 +
17083 +
17084 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17085 +LENGTH _ARBFMT_5 $      5; DROP _ARBFMT_5;
17086 +_ARBFMT_5 = ' '; /* Initialize to avoid warning. */
17087 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17088 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17089 +
17090 +
17091 +_ARBFMT_5 = PUT( audience_score_positive , $5.);
17092 + %DMNORMCP( _ARBFMT_5, F_audience_score_positive );
17093 +
17094 +******             ASSIGN OBSERVATION TO NODE             ******;
17095 +_ARBFMT_12 = PUT( genre_HistDocument , BEST12.);
17096 + %DMNORMIP( _ARBFMT_12);
17097 +IF _ARBFMT_12 IN ('1' ) THEN DO;
17098 +  IF  NOT MISSING(tomatometer_count ) AND
17099 +                    27.5 <= tomatometer_count  THEN DO;
17100 +    _NODE_  =                    7;
17101 +    _LEAF_  =                   11;
17102 +    P_audience_score_positiveTrue  =     0.86184210526315;
17103 +    P_audience_score_positiveFalse  =     0.13815789473684;
17104 +    Q_audience_score_positiveTrue  =     0.86184210526315;
17105 +    Q_audience_score_positiveFalse  =     0.13815789473684;
17106 +    V_audience_score_positiveTrue  =     0.88079470198675;
17107 +    V_audience_score_positiveFalse  =     0.11920529801324;
17108 +    I_audience_score_positive  = 'TRUE' ;
17109 +    U_audience_score_positive  = 'True' ;
17110 +    END;
17111 +  ELSE DO;
17112 +    IF  NOT MISSING(IMP_total_gross ) AND
17113 +      IMP_total_gross  <               4674.5 THEN DO;
17114 +      _NODE_  =                   12;
17115 +      _LEAF_  =                    9;
17116 +      P_audience_score_positiveTrue  =                 0.36;
17117 +      P_audience_score_positiveFalse  =                 0.64;
17118 +      Q_audience_score_positiveTrue  =                 0.36;
17119 +      Q_audience_score_positiveFalse  =                 0.64;
17120 +      V_audience_score_positiveTrue  =     0.45833333333333;
17121 +      V_audience_score_positiveFalse  =     0.54166666666666;
17122 +      I_audience_score_positive  = 'FALSE' ;
17123 +      U_audience_score_positive  = 'False' ;
17124 +      END;
17125 +    ELSE DO;
17126 +      _NODE_  =                   13;
17127 +      _LEAF_  =                   10;
17128 +      P_audience_score_positiveTrue  =     0.68036529680365;
17129 +      P_audience_score_positiveFalse  =     0.31963470319634;
17130 +      Q_audience_score_positiveTrue  =     0.68036529680365;
17131 +      Q_audience_score_positiveFalse  =     0.31963470319634;
17132 +      V_audience_score_positiveTrue  =     0.67948717948717;
17133 +      V_audience_score_positiveFalse  =     0.32051282051282;
17134 +      I_audience_score_positive  = 'TRUE' ;
17135 +      U_audience_score_positive  = 'True' ;
17136 +      END;
17137 +    END;
17138 +  END;
17139 +ELSE DO;
17140 +  IF  NOT MISSING(tomatometer_count ) AND
17141 +                   140.5 <= tomatometer_count  THEN DO;
17142 +    IF  NOT MISSING(IMP_domestic_opening ) AND
17143 +      IMP_domestic_opening  <            3169859.5 THEN DO;
17144 +      _NODE_  =                   10;
17145 +      _LEAF_  =                    6;
17146 +      P_audience_score_positiveTrue  =     0.83660130718954;
17147 +      P_audience_score_positiveFalse  =     0.16339869281045;
17148 +      Q_audience_score_positiveTrue  =     0.83660130718954;
17149 +      Q_audience_score_positiveFalse  =     0.16339869281045;
17150 +      V_audience_score_positiveTrue  =      0.7361963190184;
17151 +      V_audience_score_positiveFalse  =     0.26380368098159;
17152 +      I_audience_score_positive  = 'TRUE' ;
17153 +      U_audience_score_positive  = 'True' ;
17154 +      END;
17155 +    ELSE DO;
17156 +      IF  NOT MISSING(IMP_domestic_gross ) AND
17157 +                 100753420.5 <= IMP_domestic_gross  THEN DO;
17158 +        _NODE_  =                   23;
17159 +        _LEAF_  =                    8;
17160 +        P_audience_score_positiveTrue  =     0.82926829268292;
17161 +        P_audience_score_positiveFalse  =     0.17073170731707;
17162 +        Q_audience_score_positiveTrue  =     0.82926829268292;
17163 +        Q_audience_score_positiveFalse  =     0.17073170731707;
17164 +        V_audience_score_positiveTrue  =                  0.8;
17165 +        V_audience_score_positiveFalse  =                  0.2;
17166 +        I_audience_score_positive  = 'TRUE' ;
17167 +        U_audience_score_positive  = 'True' ;
17168 +        END;
17169 +      ELSE DO;
17170 +        _NODE_  =                   22;
17171 +        _LEAF_  =                    7;
17172 +        P_audience_score_positiveTrue  =     0.45578231292517;
17173 +        P_audience_score_positiveFalse  =     0.54421768707483;
17174 +        Q_audience_score_positiveTrue  =     0.45578231292517;
17175 +        Q_audience_score_positiveFalse  =     0.54421768707483;
17176 +        V_audience_score_positiveTrue  =     0.45138888888888;
17177 +        V_audience_score_positiveFalse  =     0.54861111111111;
17178 +        I_audience_score_positive  = 'FALSE' ;
17179 +        U_audience_score_positive  = 'False' ;
17180 +        END;
17181 +      END;
17182 +    END;
17183 +  ELSE DO;
17184 +    _ARBFMT_12 = PUT( genre_DramaTele , BEST12.);
17185 +     %DMNORMIP( _ARBFMT_12);
17186 +    IF _ARBFMT_12 IN ('0' ) THEN DO;
17187 +      _NODE_  =                    9;
17188 +      _LEAF_  =                    5;
17189 +      P_audience_score_positiveTrue  =     0.26086956521739;
17190 +      P_audience_score_positiveFalse  =      0.7391304347826;
17191 +      Q_audience_score_positiveTrue  =     0.26086956521739;
17192 +      Q_audience_score_positiveFalse  =      0.7391304347826;
17193 +      V_audience_score_positiveTrue  =      0.2832618025751;
17194 +      V_audience_score_positiveFalse  =     0.71673819742489;
17195 +      I_audience_score_positive  = 'FALSE' ;
17196 +      U_audience_score_positive  = 'False' ;
17197 +      END;
17198 +    ELSE DO;
17199 +      IF  NOT MISSING(IMP_runtime ) AND
17200 +                       101.5 <= IMP_runtime  THEN DO;
17201 +        _ARBFMT_12 = PUT( genre_ThrillMysSusp , BEST12.);
17202 +         %DMNORMIP( _ARBFMT_12);
17203 +        IF _ARBFMT_12 IN ('1' ) THEN DO;
17204 +          IF  NOT MISSING(IMP_runtime ) AND
17205 +                             119 <= IMP_runtime  THEN DO;
17206 +            _NODE_  =                   43;
17207 +            _LEAF_  =                    4;
17208 +            P_audience_score_positiveTrue  =                  0.8;
17209 +            P_audience_score_positiveFalse  =                  0.2;
17210 +            Q_audience_score_positiveTrue  =                  0.8;
17211 +            Q_audience_score_positiveFalse  =                  0.2;
17212 +            V_audience_score_positiveTrue  =                0.625;
17213 +            V_audience_score_positiveFalse  =                0.375;
17214 +            I_audience_score_positive  = 'TRUE' ;
17215 +            U_audience_score_positive  = 'True' ;
17216 +            END;
17217 +          ELSE DO;
17218 +            _NODE_  =                   42;
17219 +            _LEAF_  =                    3;
17220 +            P_audience_score_positiveTrue  =     0.24444444444444;
17221 +            P_audience_score_positiveFalse  =     0.75555555555555;
17222 +            Q_audience_score_positiveTrue  =     0.24444444444444;
17223 +            Q_audience_score_positiveFalse  =     0.75555555555555;
17224 +            V_audience_score_positiveTrue  =     0.33870967741935;
17225 +            V_audience_score_positiveFalse  =     0.66129032258064;
17226 +            I_audience_score_positive  = 'FALSE' ;
17227 +            U_audience_score_positive  = 'False' ;
17228 +            END;
17229 +          END;
17230 +        ELSE DO;
17231 +          _NODE_  =                   30;
17232 +          _LEAF_  =                    2;
17233 +          P_audience_score_positiveTrue  =     0.59011627906976;
17234 +          P_audience_score_positiveFalse  =     0.40988372093023;
17235 +          Q_audience_score_positiveTrue  =     0.59011627906976;
17236 +          Q_audience_score_positiveFalse  =     0.40988372093023;
17237 +          V_audience_score_positiveTrue  =     0.53571428571428;
17238 +          V_audience_score_positiveFalse  =     0.46428571428571;
17239 +          I_audience_score_positive  = 'TRUE' ;
17240 +          U_audience_score_positive  = 'True' ;
17241 +          END;
17242 +        END;
17243 +      ELSE DO;
17244 +        _NODE_  =                   16;
17245 +        _LEAF_  =                    1;
17246 +        P_audience_score_positiveTrue  =     0.35911602209944;
17247 +        P_audience_score_positiveFalse  =     0.64088397790055;
17248 +        Q_audience_score_positiveTrue  =     0.35911602209944;
17249 +        Q_audience_score_positiveFalse  =     0.64088397790055;
17250 +        V_audience_score_positiveTrue  =     0.36007827788649;
17251 +        V_audience_score_positiveFalse  =      0.6399217221135;
17252 +        I_audience_score_positive  = 'FALSE' ;
17253 +        U_audience_score_positive  = 'False' ;
17254 +        END;
17255 +      END;
17256 +    END;
17257 +  END;
17258 +
17259 +*****  RESIDUALS R_ *************;
17260 +IF  F_audience_score_positive  NE 'TRUE'
17261 +AND F_audience_score_positive  NE 'FALSE'  THEN DO;
17262 +        R_audience_score_positiveTrue  = .;
17263 +        R_audience_score_positiveFalse  = .;
17264 + END;
17265 + ELSE DO;
17266 +       R_audience_score_positiveTrue  =  -P_audience_score_positiveTrue ;
17267 +       R_audience_score_positiveFalse  =  -P_audience_score_positiveFalse ;
17268 +       SELECT( F_audience_score_positive  );
17269 +          WHEN( 'TRUE'  ) R_audience_score_positiveTrue  =
17270 +        R_audience_score_positiveTrue  +1;
17271 +          WHEN( 'FALSE'  ) R_audience_score_positiveFalse  =
17272 +        R_audience_score_positiveFalse  +1;
17273 +       END;
17274 + END;
17275 +
17276 +****************************************************************;
17277 +******          END OF DECISION TREE SCORING CODE         ******;
17278 +****************************************************************;
17279 +
17280 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17281  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.04 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.04 seconds
 
 
17282  quit;
17283  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17284  filename emflow "C:\Users\jy\Desktop\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
17285  *------------------------------------------------------------*;
17286  * Tree: Scoring VALIDATE data;
17287  *------------------------------------------------------------*;
17288  data EMWS1.Tree_VALIDATE
17289  / view=EMWS1.Tree_VALIDATE
17290  ;
17291  set EMWS1.Impt_VALIDATE
17292  ;
17293  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\jy\Desktop\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
17294 +****************************************************************;
17295 +******             DECISION TREE SCORING CODE             ******;
17296 +****************************************************************;
17297 +
17298 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17299 +LENGTH F_audience_score_positive  $    5;
17300 +LENGTH I_audience_score_positive  $    5;
17301 +LENGTH U_audience_score_positive  $    5;
17302 +LENGTH _WARN_  $    4;
17303 +
17304 +******              LABELS FOR NEW VARIABLES              ******;
17305 +label _NODE_ = 'Node' ;
17306 +label _LEAF_ = 'Leaf' ;
17307 +label P_audience_score_positiveTrue =
17308 +'Predicted: audience_score_positive=True' ;
17309 +label P_audience_score_positiveFalse =
17310 +'Predicted: audience_score_positive=False' ;
17311 +label Q_audience_score_positiveTrue =
17312 +'Unadjusted P: audience_score_positive=True' ;
17313 +label Q_audience_score_positiveFalse =
17314 +'Unadjusted P: audience_score_positive=False' ;
17315 +label V_audience_score_positiveTrue =
17316 +'Validated: audience_score_positive=True' ;
17317 +label V_audience_score_positiveFalse =
17318 +'Validated: audience_score_positive=False' ;
17319 +label R_audience_score_positiveTrue =
17320 +'Residual: audience_score_positive=True' ;
17321 +label R_audience_score_positiveFalse =
17322 +'Residual: audience_score_positive=False' ;
17323 +label F_audience_score_positive = 'From: audience_score_positive' ;
17324 +label I_audience_score_positive = 'Into: audience_score_positive' ;
17325 +label U_audience_score_positive =
17326 +'Unnormalized Into: audience_score_positive' ;
17327 +label _WARN_ = 'Warnings' ;
17328 +
17329 +
17330 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17331 +LENGTH _ARBFMT_5 $      5; DROP _ARBFMT_5;
17332 +_ARBFMT_5 = ' '; /* Initialize to avoid warning. */
17333 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17334 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17335 +
17336 +
17337 +_ARBFMT_5 = PUT( audience_score_positive , $5.);
17338 + %DMNORMCP( _ARBFMT_5, F_audience_score_positive );
17339 +
17340 +******             ASSIGN OBSERVATION TO NODE             ******;
17341 +_ARBFMT_12 = PUT( genre_HistDocument , BEST12.);
17342 + %DMNORMIP( _ARBFMT_12);
17343 +IF _ARBFMT_12 IN ('1' ) THEN DO;
17344 +  IF  NOT MISSING(tomatometer_count ) AND
17345 +                    27.5 <= tomatometer_count  THEN DO;
17346 +    _NODE_  =                    7;
17347 +    _LEAF_  =                   11;
17348 +    P_audience_score_positiveTrue  =     0.86184210526315;
17349 +    P_audience_score_positiveFalse  =     0.13815789473684;
17350 +    Q_audience_score_positiveTrue  =     0.86184210526315;
17351 +    Q_audience_score_positiveFalse  =     0.13815789473684;
17352 +    V_audience_score_positiveTrue  =     0.88079470198675;
17353 +    V_audience_score_positiveFalse  =     0.11920529801324;
17354 +    I_audience_score_positive  = 'TRUE' ;
17355 +    U_audience_score_positive  = 'True' ;
17356 +    END;
17357 +  ELSE DO;
17358 +    IF  NOT MISSING(IMP_total_gross ) AND
17359 +      IMP_total_gross  <               4674.5 THEN DO;
17360 +      _NODE_  =                   12;
17361 +      _LEAF_  =                    9;
17362 +      P_audience_score_positiveTrue  =                 0.36;
17363 +      P_audience_score_positiveFalse  =                 0.64;
17364 +      Q_audience_score_positiveTrue  =                 0.36;
17365 +      Q_audience_score_positiveFalse  =                 0.64;
17366 +      V_audience_score_positiveTrue  =     0.45833333333333;
17367 +      V_audience_score_positiveFalse  =     0.54166666666666;
17368 +      I_audience_score_positive  = 'FALSE' ;
17369 +      U_audience_score_positive  = 'False' ;
17370 +      END;
17371 +    ELSE DO;
17372 +      _NODE_  =                   13;
17373 +      _LEAF_  =                   10;
17374 +      P_audience_score_positiveTrue  =     0.68036529680365;
17375 +      P_audience_score_positiveFalse  =     0.31963470319634;
17376 +      Q_audience_score_positiveTrue  =     0.68036529680365;
17377 +      Q_audience_score_positiveFalse  =     0.31963470319634;
17378 +      V_audience_score_positiveTrue  =     0.67948717948717;
17379 +      V_audience_score_positiveFalse  =     0.32051282051282;
17380 +      I_audience_score_positive  = 'TRUE' ;
17381 +      U_audience_score_positive  = 'True' ;
17382 +      END;
17383 +    END;
17384 +  END;
17385 +ELSE DO;
17386 +  IF  NOT MISSING(tomatometer_count ) AND
17387 +                   140.5 <= tomatometer_count  THEN DO;
17388 +    IF  NOT MISSING(IMP_domestic_opening ) AND
17389 +      IMP_domestic_opening  <            3169859.5 THEN DO;
17390 +      _NODE_  =                   10;
17391 +      _LEAF_  =                    6;
17392 +      P_audience_score_positiveTrue  =     0.83660130718954;
17393 +      P_audience_score_positiveFalse  =     0.16339869281045;
17394 +      Q_audience_score_positiveTrue  =     0.83660130718954;
17395 +      Q_audience_score_positiveFalse  =     0.16339869281045;
17396 +      V_audience_score_positiveTrue  =      0.7361963190184;
17397 +      V_audience_score_positiveFalse  =     0.26380368098159;
17398 +      I_audience_score_positive  = 'TRUE' ;
17399 +      U_audience_score_positive  = 'True' ;
17400 +      END;
17401 +    ELSE DO;
17402 +      IF  NOT MISSING(IMP_domestic_gross ) AND
17403 +                 100753420.5 <= IMP_domestic_gross  THEN DO;
17404 +        _NODE_  =                   23;
17405 +        _LEAF_  =                    8;
17406 +        P_audience_score_positiveTrue  =     0.82926829268292;
17407 +        P_audience_score_positiveFalse  =     0.17073170731707;
17408 +        Q_audience_score_positiveTrue  =     0.82926829268292;
17409 +        Q_audience_score_positiveFalse  =     0.17073170731707;
17410 +        V_audience_score_positiveTrue  =                  0.8;
17411 +        V_audience_score_positiveFalse  =                  0.2;
17412 +        I_audience_score_positive  = 'TRUE' ;
17413 +        U_audience_score_positive  = 'True' ;
17414 +        END;
17415 +      ELSE DO;
17416 +        _NODE_  =                   22;
17417 +        _LEAF_  =                    7;
17418 +        P_audience_score_positiveTrue  =     0.45578231292517;
17419 +        P_audience_score_positiveFalse  =     0.54421768707483;
17420 +        Q_audience_score_positiveTrue  =     0.45578231292517;
17421 +        Q_audience_score_positiveFalse  =     0.54421768707483;
17422 +        V_audience_score_positiveTrue  =     0.45138888888888;
17423 +        V_audience_score_positiveFalse  =     0.54861111111111;
17424 +        I_audience_score_positive  = 'FALSE' ;
17425 +        U_audience_score_positive  = 'False' ;
17426 +        END;
17427 +      END;
17428 +    END;
17429 +  ELSE DO;
17430 +    _ARBFMT_12 = PUT( genre_DramaTele , BEST12.);
17431 +     %DMNORMIP( _ARBFMT_12);
17432 +    IF _ARBFMT_12 IN ('0' ) THEN DO;
17433 +      _NODE_  =                    9;
17434 +      _LEAF_  =                    5;
17435 +      P_audience_score_positiveTrue  =     0.26086956521739;
17436 +      P_audience_score_positiveFalse  =      0.7391304347826;
17437 +      Q_audience_score_positiveTrue  =     0.26086956521739;
17438 +      Q_audience_score_positiveFalse  =      0.7391304347826;
17439 +      V_audience_score_positiveTrue  =      0.2832618025751;
17440 +      V_audience_score_positiveFalse  =     0.71673819742489;
17441 +      I_audience_score_positive  = 'FALSE' ;
17442 +      U_audience_score_positive  = 'False' ;
17443 +      END;
17444 +    ELSE DO;
17445 +      IF  NOT MISSING(IMP_runtime ) AND
17446 +                       101.5 <= IMP_runtime  THEN DO;
17447 +        _ARBFMT_12 = PUT( genre_ThrillMysSusp , BEST12.);
17448 +         %DMNORMIP( _ARBFMT_12);
17449 +        IF _ARBFMT_12 IN ('1' ) THEN DO;
17450 +          IF  NOT MISSING(IMP_runtime ) AND
17451 +                             119 <= IMP_runtime  THEN DO;
17452 +            _NODE_  =                   43;
17453 +            _LEAF_  =                    4;
17454 +            P_audience_score_positiveTrue  =                  0.8;
17455 +            P_audience_score_positiveFalse  =                  0.2;
17456 +            Q_audience_score_positiveTrue  =                  0.8;
17457 +            Q_audience_score_positiveFalse  =                  0.2;
17458 +            V_audience_score_positiveTrue  =                0.625;
17459 +            V_audience_score_positiveFalse  =                0.375;
17460 +            I_audience_score_positive  = 'TRUE' ;
17461 +            U_audience_score_positive  = 'True' ;
17462 +            END;
17463 +          ELSE DO;
17464 +            _NODE_  =                   42;
17465 +            _LEAF_  =                    3;
17466 +            P_audience_score_positiveTrue  =     0.24444444444444;
17467 +            P_audience_score_positiveFalse  =     0.75555555555555;
17468 +            Q_audience_score_positiveTrue  =     0.24444444444444;
17469 +            Q_audience_score_positiveFalse  =     0.75555555555555;
17470 +            V_audience_score_positiveTrue  =     0.33870967741935;
17471 +            V_audience_score_positiveFalse  =     0.66129032258064;
17472 +            I_audience_score_positive  = 'FALSE' ;
17473 +            U_audience_score_positive  = 'False' ;
17474 +            END;
17475 +          END;
17476 +        ELSE DO;
17477 +          _NODE_  =                   30;
17478 +          _LEAF_  =                    2;
17479 +          P_audience_score_positiveTrue  =     0.59011627906976;
17480 +          P_audience_score_positiveFalse  =     0.40988372093023;
17481 +          Q_audience_score_positiveTrue  =     0.59011627906976;
17482 +          Q_audience_score_positiveFalse  =     0.40988372093023;
17483 +          V_audience_score_positiveTrue  =     0.53571428571428;
17484 +          V_audience_score_positiveFalse  =     0.46428571428571;
17485 +          I_audience_score_positive  = 'TRUE' ;
17486 +          U_audience_score_positive  = 'True' ;
17487 +          END;
17488 +        END;
17489 +      ELSE DO;
17490 +        _NODE_  =                   16;
17491 +        _LEAF_  =                    1;
17492 +        P_audience_score_positiveTrue  =     0.35911602209944;
17493 +        P_audience_score_positiveFalse  =     0.64088397790055;
17494 +        Q_audience_score_positiveTrue  =     0.35911602209944;
17495 +        Q_audience_score_positiveFalse  =     0.64088397790055;
17496 +        V_audience_score_positiveTrue  =     0.36007827788649;
17497 +        V_audience_score_positiveFalse  =      0.6399217221135;
17498 +        I_audience_score_positive  = 'FALSE' ;
17499 +        U_audience_score_positive  = 'False' ;
17500 +        END;
17501 +      END;
17502 +    END;
17503 +  END;
17504 +
17505 +*****  RESIDUALS R_ *************;
17506 +IF  F_audience_score_positive  NE 'TRUE'
17507 +AND F_audience_score_positive  NE 'FALSE'  THEN DO;
17508 +        R_audience_score_positiveTrue  = .;
17509 +        R_audience_score_positiveFalse  = .;
17510 + END;
17511 + ELSE DO;
17512 +       R_audience_score_positiveTrue  =  -P_audience_score_positiveTrue ;
17513 +       R_audience_score_positiveFalse  =  -P_audience_score_positiveFalse ;
17514 +       SELECT( F_audience_score_positive  );
17515 +          WHEN( 'TRUE'  ) R_audience_score_positiveTrue  =
17516 +        R_audience_score_positiveTrue  +1;
17517 +          WHEN( 'FALSE'  ) R_audience_score_positiveFalse  =
17518 +        R_audience_score_positiveFalse  +1;
17519 +       END;
17520 + END;
17521 +
17522 +****************************************************************;
17523 +******          END OF DECISION TREE SCORING CODE         ******;
17524 +****************************************************************;
17525 +
17526 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17527  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.06 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.07 seconds
 
 
17528  quit;
17529  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.09 seconds
 
17531  proc sort data=WORK.EM_USER_REPORT;
17532  by ID VIEW;
17533  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
17534  *------------------------------------------------------------*;
17535  * Tree: Computing metadata for TRAIN data;
17536  *------------------------------------------------------------*;
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.13 seconds
      cpu time            0.12 seconds
 
17992  data WORK.MODELTEMP_INFO;
17993  set EMWS1.Tree_EMINFO;
17994  where DATA='Tree' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
17995  run;
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_EMINFO.
      WHERE (DATA='Tree') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17996  data EMWS1.Tree_EMINFO;
17997  length TARGET KEY $32 DATA $43;
17998  input TARGET KEY DATA $;
17999  cards;
 
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18003  run;
18004  data EMWS1.Tree_EMINFO;
18005  set EMWS1.Tree_EMINFO WORK.MODELTEMP_INFO;
18006  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
18007  proc sort data = EMWS1.Tree_EMINFO NOTHREADS;
18008  by TARGET KEY;
18009  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.11 seconds
 
NOTE: View EMWS1.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.11 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                December 12, 2019
Time:                15:33:57
*------------------------------------------------------------*
18033  data EMWS1.Tree_EMOUTFIT;
18034  set EMWS1.Tree_EMOUTFIT;
18035  length TargetLabel $200;
18036  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18037  run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
18038  proc sort data=EMWS1.Tree_EMREPORTFIT nothreads;
18039  by TARGET;
18040  run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The data set EMWS1.TREE_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18041  %let _EMwarndup = 0;
18042  %let _EMtargetdup =;
18043  %let _EMASEtargetdup =;
18044  data _null_;
18045  set EMWS1.Tree_EMOUTFIT;
18046  if .<_ASE_<0.000001 then do;
18047  call symput('_EMwarndup', '1');
18048  call symput('_EMtargetdup', target);
18049  call symput('_EMASEtargetdup', put(_ASE_, best.));
18050  end;
18051  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
18052  %let EMEXCEPTIONSTRING=;
18053  *------------------------------------------------------------*;
18054  * REPORT: Tree;
18055  *------------------------------------------------------------*;
18056  %let EM_ACTION = REPORT;
18057  %let syscc = 0;
18058  %macro main;
18059
18060    %if %upcase(&EM_ACTION) = CREATE %then %do;
18061      filename temp catalog 'sashelp.emmodl.tree_create.source';
18062      %include temp;
18063      filename temp;
18064
18065      %em_tree_create;
18066    %end;
18067
18068     %else
18069     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18070
18071         filename temp catalog 'sashelp.emmodl.tree_train.source';
18072         %include temp;
18073         filename temp;
18074         %em_tree_train;
18075     %end;
18076
18077    %else
18078    %if %upcase(&EM_ACTION) = SCORE %then %do;
18079      filename temp catalog 'sashelp.emmodl.tree_score.source';
18080      %include temp;
18081      filename temp;
18082
18083      %em_tree_score;
18084
18085    %end;
18086
18087    %else
18088    %if %upcase(&EM_ACTION) = REPORT %then %do;
18089
18090         filename temp catalog 'sashelp.emmodl.tree_report.source';
18091         %include temp;
18092         filename temp;
18093
18094         %em_tree_report;
18095     %end;
18096
18097    %else
18098    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18099
18100         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18101         %include temp;
18102         filename temp;
18103         %EM_TREE_OPENTREEVIEWER;
18104
18105     %end;
18106
18107    %else
18108    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18109
18110         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18111         %include temp;
18112         filename temp;
18113         %EM_TREE_CLOSETREEVIEWER;
18114
18115     %end;
18116
18117
18118     %doendm:
18119  %mend main;
18120
18121  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18123 +%macro em_tree_makePlotDs( multipleTar= );
18125 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18126 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18127 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18128 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18130 +  /* determine if validation statistics will be displayed */
18131 +  %let validflag=N;
18132 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18133 +    /* determine if validation data exists */
18134 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18135 +      %let validflag=Y;
18136 +    %end;
18137 +  %end;
18139 +   /* retrieve name of decmeta even in presence of multiple targets */
18140 +   %let decmeta = ;
18141 +   %if &EM_DEC_DECMETA eq %then %do;
18142 +     data _Target;
18143 +       set &em_data_variableset;
18144 +       where ROLE='TARGET' and USE in('D', 'Y');
18145 +       keep NAME;
18146 +     run;
18147 +     proc sort data=_Target;
18148 +       by NAME;
18149 +     run;
18150 +     proc sort data=EM_TARGETDECINFO;
18151 +       by TARGET;
18152 +     run;
18153 +     data _Target;
18154 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18155 +       by NAME;
18156 +       if _a then do;
18157 +         call symput('decmeta', trim(DECMETA));
18158 +       end;
18159 +     run;
18160 +     proc delete data=_Target;run;
18161 +   %end;
18162 +   %else %let decmeta = &EM_DEC_DECMETA;
18165 +  /* retrieve targetEvent from decmeta */
18166 +  %let targetEvent=;
18167 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18168 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18169 +      data _null_;
18170 +       set &DECMETA(where=(_TYPE_="TARGET"));
18171 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18172 +      run;
18173 +    %end;
18174 +  %end;
18176 +  /* retrieve predicted var for targetEvent from decmeta */
18177 +  %let predTarget=;
18178 +  %let predLvl=;
18179 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18180 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18181 +      data _null_;
18182 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18183 +       call symput('predTarget', strip(VARIABLE));
18184 +       call symput('predLvl', strip(LEVEL));
18185 +      run;
18186 +    %end;
18187 +  %end;
18188 +  %else %do;
18189 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18190 +      data _null_;
18191 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18192 +       call symput('predTarget', strip(VARIABLE));
18193 +      run;
18194 +    %end;
18195 +  %end;
18197 +  /* create BelowText value */
18198 +  data belowtext;
18199 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18200 +    keep node belowtext;
18201 +  run;
18203 +  /* relace belowtext with variable label if it exists */
18204 +  data belowtext2;
18205 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18206 +    keep node belowtextlbl;
18207 +  run;
18209 +  proc sort data=belowtext; by node; run;
18210 +  proc sort data=belowtext2; by node; run;
18212 +  data belowtext;
18213 +    merge belowtext belowtext2(in=_a);
18214 +    by node;
18215 +    if _a then belowtext=belowtextlbl;
18216 +    keep node belowtext;
18217 +  run;
18219 +  /* create AboveText value */
18220 +  data abovetext;
18221 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18222 +  run;
18223 +  proc sort data=abovetext; by node numeric_value; run;
18225 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18226 +  data abovetext;
18227 +    set abovetext(rename=(node=parent));
18228 +    by parent numeric_value;
18229 +    retain abovetext tempstring flag branch origval origchar ;
18230 +    length abovetext $256;
18231 +    length tempstring origchar $64;
18233 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18234 +      if first.parent then do;
18235 +        if missing(character_value) then do;
18236 +          numeric_value = round(numeric_value, &sp_precision);
18237 +          abovetext = "< "||strip(NUMERIC_VALUE);
18238 +          branch = 1;
18239 +          origval = numeric_value;
18240 +          output;
18241 +        end;
18242 +        else do;
18243 +          abovetext = "< "||strip(CHARACTER_VALUE);
18244 +          branch = 1;
18245 +          origchar = character_value;
18246 +          output;
18247 +        end;
18249 +        if first.parent AND last.parent then do;
18250 +          if missing(character_value) then do;
18251 +            numeric_value = round(numeric_value, &sp_precision);
18252 +            branch = branch + 1;
18253 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18254 +            output;
18255 +          end;
18256 +          else do;
18257 +            branch = branch + 1;
18258 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18259 +            output;
18260 +          end;
18261 +        end;
18262 +      end;
18263 +      else if last.parent then do;
18264 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18265 +          if missing(character_value) then do;
18266 +            numeric_value = round(numeric_value, &sp_precision);
18267 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18268 +          end;
18269 +          else do;
18270 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18271 +          end;
18272 +          branch = branch + 1;
18273 +          output;
18275 +          if missing(character_value) then do;
18276 +            numeric_value = round(numeric_value, &sp_precision);
18277 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18278 +          end;
18279 +          else do;
18280 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18281 +          end;
18282 +          branch = branch + 1;
18283 +          output;
18284 +        end;
18285 +        else do;
18286 +          if missing(character_value) then do;
18287 +            numeric_value = round(numeric_value, &sp_precision);
18288 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18289 +          end;
18290 +          else do;
18291 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18292 +          end;
18293 +          branch = branch + 1;
18294 +          output;
18295 +        end;
18296 +      end;
18297 +      else do;
18298 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18299 +          if missing(character_value) then do;
18300 +            numeric_value = round(numeric_value,&sp_precision);
18301 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18302 +            origval = numeric_value;
18303 +          end;
18304 +          else do;
18305 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18306 +            origchar = character_value;
18307 +          end;
18308 +          branch = branch + 1;
18309 +          output;
18311 +        end;
18312 +        else do;
18313 +          if missing(character_value) then do;
18314 +            numeric_value = round(numeric_value, &sp_precision);
18315 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18316 +            origval = numeric_value;
18317 +          end;
18318 +          else do;
18319 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18320 +            origval = character_value;
18321 +          end;
18322 +          branch = branch + 1;
18323 +          output;
18324 +        end;
18325 +      end;
18326 +    end;
18327 +    else do;
18328 +       if first.numeric_value then do;
18329 +         flag = 0;
18330 +         abovetext = strip(CHARACTER_VALUE);
18331 +         branch = numeric_value;
18332 +         if first.numeric_value AND last.numeric_value then do;
18333 +           output;
18334 +         end;
18335 +       end;
18336 +       else if last.numeric_value then do;
18337 +         if flag=0 then do;
18338 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18339 +           length = length(strip(tempstring));
18340 +           if length < 32 then do;
18341 +             abovetext = strip(tempstring);
18342 +           end;
18343 +           else do;
18344 +             abovetext = strip(abovetext)||", ...";
18345 +             flag = 1;
18346 +           end;
18347 +         end;
18348 +         branch = numeric_value;
18349 +         output;
18350 +       end;
18351 +       else do;
18352 +         if flag=0 then do;
18353 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18354 +           length = length(strip(tempstring));
18355 +           if length < 32 then do;
18356 +             abovetext = strip(tempstring);
18357 +           end;
18358 +           else do;
18359 +             abovetext = strip(abovetext)||", ...";
18360 +             flag=1;
18361 +           end;
18362 +         end;
18363 +         branch = numeric_value;
18364 +       end;
18365 +    end;
18366 +    keep parent branch abovetext;
18367 +  run;
18369 +  /* MIssing value to abovetext */
18370 +  data tempmissing;
18371 +    set &EM_USER_OUTRULES;
18372 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18373 +    rename node=parent numeric_value=branch character_value=misschar;
18374 +  run;
18377 +  proc sort data=abovetext; by parent branch; run;
18378 +  proc sort data=tempmissing; by parent branch; run;
18379 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18381 +  data tempoutnodes;
18382 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18383 +    by parent branch;
18384 +    length traintotal validtotal 8;
18385 +    retain traintotal validtotal;
18387 +    if _a then do;
18388 +      if ^MISSING(abovetext) then do;
18389 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18390 +      end;
18391 +      else do;
18392 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18393 +      end;
18394 +    end;
18395 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18397 +    if node=1 then do;
18398 +      traintotal = N;
18399 +      validtotal=VN;
18400 +    end;
18402 +    drop role rank stat misschar belowtext;
18403 +  run;
18404 +  proc sort data=tempoutnodes; by node; run;
18405 +  proc sort data=belowtext; by node; run;
18407 +  data tempoutnodes;
18408 +    merge tempoutnodes belowtext;
18409 +    by node;
18411 +  run;
18413 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18414 +  %let adjusted = N;
18415 +  %let npriors = 0;
18416 +  data _null_ ;
18417 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18418 +    if eof then do ;
18419 +      call symput("npriors" , strip(put(_N_,best.))) ;
18420 +    end;
18421 +  run;
18422 +  %if &npriors gt 0 %then %let adjusted=Y;
18425 +  /* create a table with targetUsed and targetLevel columns for each node */
18426 +  data temptarmeta;
18427 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18428 +    %if &multipleTar eq N %then %do;
18429 +      AND USE in ('D', 'Y')
18430 +    %end;
18431 +    ));
18432 +    length TARGET $32;
18433 +    Target=name;
18434 +    keep target level;
18435 +  run;
18437 +  %if &multipleTar eq Y %then %do;
18438 +    data temptargetused;
18439 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18440 +      keep node target;
18441 +    run;
18442 +    proc sort data=temptargetused; by target; run;
18443 +    proc sort data=temptarmeta; by target; run;
18444 +    data temptargetused;
18445 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18446 +      by target;
18447 +      if _a and _b;
18448 +    run;
18449 +  %end;
18450 +  %else %do;
18451 +    data temptargetused;
18452 +      set &EM_USER_OUTSTATS;
18453 +      length target $32 tarlevel $10;
18454 +      target="%EM_TARGET";
18455 +      tarlevel="%EM_TARGET_LEVEL";
18456 +      keep node target tarlevel;
18457 +    run;
18458 +    proc sort data=temptargetused nodupkey; by node; run;
18459 +  %end;
18461 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
18462 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18463 +  proc sort data=temptargetused; by node; run;
18466 +  /* create tables for all interval targets as well as all class targets */
18467 +  data tempinterval tempclass;
18468 +    merge tempoutstats temptargetused( rename=(target=targetused));
18469 +    by node;
18470 +    %if "&multipleTar" eq "Y" %then %do;
18471 +      if ((missing(Target)) OR (target=targetused ));
18472 +    %end;
18474 +    if tarlevel="INTERVAL" then output tempinterval;
18475 +    else output tempclass;
18476 +  run;
18478 +  /* iniitalize intTarget and classTarget flags */
18479 +  %let em_intNobs =0;
18480 +  %let em_classNobs = 0;
18481 +  %let em_intTarget= N;
18482 +  %let em_classTarget= N;
18484 +  proc sql;
18485 +    reset noprint;
18486 +    select count(*) into :em_intNobs from tempinterval;
18487 +  quit;
18488 +  proc sql;
18489 +    reset noprint;
18490 +    select count(*) into :em_classNobs from tempclass;
18491 +  quit;
18493 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18494 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18496 +  /* retrieve all information for interval targets */
18497 +  %if &em_intTarget eq Y %then %do;
18499 +    /* determine if leaf variable exists */
18500 +    %let dsid=%sysfunc(open(tempinterval,i));
18501 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18502 +    %let rc=%sysfunc(close(&dsid));
18504 +    proc transpose data=tempinterval
18505 +      %if &leafexists %then %do;
18506 +        (drop=leaf)
18507 +      %end;
18508 +      %if &validexist %then %do;
18509 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18510 +      %end;
18511 +      %else %do;
18512 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18513 +      %end;
18514 +      by node;
18515 +      id statname;
18516 +    run;
18517 +    data tempinterval;
18518 +      set tempinterval;
18519 +      if missing(N) then delete;
18520 +    run;
18521 +  %end;
18523 +  /* retrieve all information for class targets */
18524 +  %if &em_classTarget eq Y %then %do;
18525 +    proc sort data=tempclass; by node category; run;
18526 +    %if &validflag eq N %then %do;
18527 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18528 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18529 +    %end;
18530 +    %else %do;
18531 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18532 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18533 +    %end;
18534 +      set tempclass;
18536 +      %if &validflag eq N %then %do;
18537 +        %if "&adjusted" eq "N" %then %do;
18538 +          if statname="N" then output tempn;
18539 +        %end;
18540 +        %else %do;
18541 +          if statname="NPRIORS" then output tempn;
18542 +        %end;
18543 +        else if statname="PREDICTION" then output temppredict;
18544 +        else if statname="PROBABILITY" then output tempprob;
18545 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18546 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18547 +      %end;
18548 +      %else %do;
18549 +        %if "&adjusted" eq "N" %then %do;
18550 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18551 +        %end;
18552 +        %else %do;
18553 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18554 +        %end;
18555 +        else if statname="PREDICTION" then output temppredict;
18556 +        else if statname="PROBABILITY" then output tempprob;
18557 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18558 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18559 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18560 +      %end;
18561 +    run;
18564 +    /* determine if profit/loss exists in tempprofit */
18565 +    %let em_profitflag=0;
18566 +    %let em_lossflag=0;
18567 +    proc sql;
18568 +      reset noprint;
18569 +      select count(*) into :em_profitflag from tempprofit;
18570 +    quit;
18571 +    proc sql;
18572 +      reset noprint;
18573 +      select count(*) into :em_lossflag from temploss;
18574 +    quit;
18576 +    %if &validFlag eq Y %then %do;
18577 +      proc transpose data=tempn
18578 +        %if "&adjusted" eq "N" %then %do;
18579 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18580 +        %end;
18581 +        %else %do;
18582 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18583 +        %end;
18584 +        by node;
18585 +        id statname;
18586 +      run;
18587 +      %if &em_profitflag ne 0 %then %do;
18588 +        proc transpose data=tempprofit out=tempprofit;
18589 +          by node category;
18590 +          id statname ;
18591 +        run;
18592 +      %end;
18593 +      %if &em_lossflag ne 0 %then %do;
18594 +        proc transpose data=temploss out=temploss;
18595 +          by node category;
18596 +          id statname ;
18597 +        run;
18598 +      %end;
18599 +      data tempprob;
18600 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18601 +        by node
18602 +        %if &multipleTar eq Y %then %do;
18603 +          target
18604 +        %end;
18605 +        category;
18606 +      run;
18607 +    %end;
18609 +    /* store percentcorrect value */
18610 +    data temppredict;
18611 +      merge tempprob temppredict(in=_a);
18612 +      by node category;
18613 +      if _a then do;
18614 +        percentCorrect = statvalue;
18615 +        %if &validFlag eq Y %then %do;
18616 +          vpercentCorrect= vstatvalue;
18617 +        %end;
18618 +      end;
18619 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18620 +      %if &validFlag eq Y %then %do;
18621 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18622 +      %end;
18623 +      ;
18624 +      if missing(percentCorrect) then delete;
18625 +      drop target;
18626 +    run;
18628 +    /* build profittext */
18629 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18630 +      data tempprofittext(keep= node profittext profitloss);
18631 +        length profittext $800 profitloss 8.;
18632 +        retain profittext profitloss;
18634 +        merge tempprob
18635 +        %if &em_profitflag ne 0 %then %do;
18636 +          tempprofit
18637 +        %end;
18638 +        %else %if &em_lossflag ne 0 %then %do;
18639 +          temploss
18640 +        %end;
18641 +        ;
18642 +        by node category;
18644 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18645 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
18646 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
18647 +          %let profittype = ALL;
18648 +        %end;
18650 +        /* create the profitloss variable for nodecolor if selected */
18651 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
18653 +        %if "&profittype" eq "ALL" %then %do;
18654 +          if strip(CATEGORY)="&targetEvent" then do;
18655 +            profitloss=statvalue;
18656 +          end;
18657 +          if first.node then do;
18658 +            %if &validFlag eq N %then %do;
18659 +             %if &em_profitflag ne 0 %then %do;
18660 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18661 +             %end;
18662 +             %if &em_lossflag ne 0 %then %do;
18663 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18664 +             %end;
18665 +            %end;
18666 +            %else %do;
18667 +             %if &em_profitflag ne 0 %then %do;
18668 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18668!+;
18669 +             %end;
18670 +             %if &em_lossflag ne 0 %then %do;
18671 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18672 +             %end;
18673 +            %end;
18674 +          end;
18675 +          else if last.node then do;
18676 +            %if &validFlag eq N %then %do;
18677 +             %if &em_profitflag ne 0 %then %do;
18678 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18679 +             %end;
18680 +             %if &em_lossflag ne 0 %then %do;
18681 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18682 +             %end;
18683 +             /*if CATEGORY="&targetEvent" then do;
18684 +               profitloss=statvalue;
18685 +             end;*/
18686 +            %end;
18687 +            %else %do;
18688 +             %if &em_profitflag ne 0 %then %do;
18689 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18689!+14.&EM_PROPERTY_SPLITPRECISION);
18690 +                if CATEGORY="&targetEvent" then do;
18691 +                 profitloss=ALTERNATIVE_PROFIT;
18692 +                end;
18693 +             %end;
18694 +             %if &em_lossflag ne 0 %then %do;
18695 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18695!+14.&EM_PROPERTY_SPLITPRECISION);
18696 +                if CATEGORY="&targetEvent" then do;
18697 +                  profitloss=ALTERNATIVE_LOSS;
18698 +                end;
18699 +             %end;
18700 +            %end;
18701 +            output;
18702 +          end;
18703 +          else do;
18704 +            %if &validFlag eq N %then %do;
18705 +             %if &em_profitflag ne 0 %then %do;
18706 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18707 +             %end;
18708 +             %if &em_lossflag ne 0 %then %do;
18709 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18710 +             %end;
18711 +            %end;
18712 +            %else %do;
18713 +             %if &em_profitflag ne 0 %then %do;
18714 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18714!+14.&EM_PROPERTY_SPLITPRECISION);
18715 +             %end;
18716 +             %if &em_lossflag ne 0 %then %do;
18717 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18717!+14.&EM_PROPERTY_SPLITPRECISION);
18718 +             %end;
18719 +            %end;
18720 +          end;
18721 +        %end;
18722 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18723 +          if strip(CATEGORY) = "&targetevent" then do;
18724 +            %if &validFlag eq N %then %do;
18725 +             %if &em_profitflag ne 0 %then %do;
18726 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18727 +             %end;
18728 +             %if &em_lossflag ne 0 %then %do;
18729 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18730 +             %end;
18731 +             profitloss=statvalue;
18732 +            %end;
18733 +            %else %do;
18734 +             %if &em_profitflag ne 0 %then %do;
18735 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18735!+;
18736 +                profitloss=ALTERNATIVE_PROFIT;
18737 +             %end;
18738 +             %if &em_lossflag ne 0 %then %do;
18739 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18740 +                profitloss=ALTERNATIVE_LOSS;
18741 +             %end;
18742 +            %end;
18743 +            output;
18744 +          end;
18745 +        %end;
18746 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
18747 +          if strip(CATEGORY) = "&targetevent" then do;
18748 +            %if &validFlag eq N %then %do;
18749 +             profitloss=statvalue;
18750 +            %end;
18751 +            %else %do;
18752 +             %if &em_profitflag ne 0 %then %do;
18753 +                profitloss=ALTERNATIVE_PROFIT;
18754 +             %end;
18755 +             %if &em_lossflag ne 0 %then %do;
18756 +                profitloss=ALTERNATIVE_LOSS;
18757 +             %end;
18758 +            %end;
18759 +            output;
18760 +          end;
18761 +        %end;
18762 +      run;
18763 +    %end;
18765 +    data tempprob(keep= node probtext);
18766 +      length probtext $800;
18767 +      retain probtext;
18768 +      set tempprob ;
18769 +      by node;
18771 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18772 +      %let probtype = &EM_PROPERTY_TARGET;
18773 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
18774 +        %let probtype = ALL;
18775 +      %end;
18777 +      %if "&probtype" eq "ALL" %then %do;
18778 +        if first.node then do;
18779 +          %if &validFlag eq N %then %do;
18780 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18781 +          %end;
18782 +          %else %do;
18783 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18784 +          %end;
18785 +        end;
18786 +        else if last.node then do;
18787 +          %if &validFlag eq N %then %do;
18788 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18789 +          %end;
18790 +          %else %do;
18791 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18792 +          %end;
18793 +          output;
18794 +        end;
18795 +        else do;
18796 +          %if &validFlag eq N %then %do;
18797 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18798 +          %end;
18799 +          %else %do;
18800 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18801 +          %end;
18802 +        end;
18803 +      %end;
18804 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18805 +        if strip(CATEGORY) = "&targetevent" then do;
18806 +          %if &validFlag eq N %then %do;
18807 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18808 +          %end;
18809 +          %else %do;
18810 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18811 +          %end;
18812 +          output;
18813 +        end;
18814 +      %end;
18815 +      %else %if "&probtype" eq "NONE" %then %do;
18816 +        if last.node then do;
18817 +          output;
18818 +        end;
18819 +      %end;
18820 +    run;
18821 +  %end;
18823 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
18825 +  %let oldexists=0;
18826 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
18827 +     data old_tree_plot;
18828 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
18829 +        rename nodecolor=oldnodecolor;
18830 +     run;
18832 +     proc sort data=old_tree_plot;
18833 +        by node;
18834 +     run;
18836 +     %let oldexists=1;
18837 +  %end;
18839 +  data &EM_USER_TREE_PLOT;
18840 +    length textall $800;
18841 +    merge tempoutnodes temptargetused
18843 +    %if &em_intTarget eq Y %then %do;
18844 +      tempinterval
18845 +    %end;
18847 +    %if &em_classTarget eq Y %then %do;
18849 +      %if &validFlag eq N %then %do;
18850 +        tempn(rename=(statvalue=N))
18851 +      %end;
18852 +      %else %do;
18853 +        tempn
18854 +      %end;
18856 +      temppredict tempprob
18858 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18859 +        tempprofittext
18860 +      %end;
18861 +    %end;
18862 +    ;
18863 +    by node;
18865 +    /* build nodetext based on user selection */
18866 +    textall="";
18868 +    %if &em_intTarget eq Y %then %do;
18869 +    if tarlevel="INTERVAL" then do;
18870 +      /* Nodeid */
18871 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18872 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18873 +      %end;
18875 +      /* Target identifier if multiple targets are used */
18876 +      %if "&multipleTar" eq "Y" %then %do;
18877 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18878 +      %end;
18880 +      %if &validFlag eq Y %then %do;
18881 +         /* Column labels displayed in validflag eq Y only */
18882 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18883 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18883!+noquote ))";
18884 +         %end;
18886 +         /* Average values */
18887 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18888 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18889 +         %end;
18891 +         /* RASE */
18892 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18893 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
18894 +         %end;
18896 +         /* Count */
18897 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18898 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
18899 +         %end;
18900 +      %end;
18901 +      %else %do;
18902 +         /* Average values */
18903 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18904 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18905 +         %end;
18907 +         /* RASE */
18908 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18909 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
18910 +         %end;
18912 +         /* Count */
18913 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18914 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
18915 +         %end;
18916 +      %end;
18918 +      /* nodecolor */
18919 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
18920 +        nodecolor=PREDICTION;
18921 +      %end;
18922 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
18923 +        nodecolor=RASE;
18924 +      %end;
18925 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
18926 +        nodecolor=1;
18927 +      %end;
18929 +    end;
18930 +    %end;
18931 +    %if &em_classTarget eq Y %then %do;
18932 +    if tarlevel^="INTERVAL" then  do;
18934 +      /* Nodeid */
18935 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18936 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18937 +      %end;
18938 +      /* Target identifier if multiple targets are used */
18939 +      %if "&multipleTar" eq "Y" %then %do;
18940 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18941 +      %end;
18943 +      /* Predicted values */
18944 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
18945 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
18946 +      %end;
18948 +      /* Column labels displayed in validflag eq Y only */
18949 +      %if "&ValidFlag" eq "Y" %then %do;
18950 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18951 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18951!+noquote ))";
18952 +        %end;
18953 +      %end;
18955 +      /* Target Values */
18956 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
18957 +        textall=strip(textall)||"0A"x||strip(probtext);
18958 +      %end;
18960 +      /* include profit or loss for all target levels */
18961 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
18962 +        textall=strip(textall)||"0A"x||strip(profittext);
18963 +      %end;
18965 +      %if &validFlag eq N %then %do;
18966 +        /* Percent Correct */
18967 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
18968 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
18969 +        %end;
18971 +         /* Count */
18972 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18973 +          %if "&adjusted" eq "N" %then %do;
18974 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
18975 +          %end;
18976 +          %else %do;
18977 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
18978 +          %end;
18979 +         %end;
18980 +      %end;
18981 +      %else %do;
18982 +        /* Percent Correct */
18983 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
18984 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
18985 +        %end;
18987 +         /* Count */
18988 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18989 +          %if "&adjusted" eq "N" %then %do;
18990 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
18991 +          %end;
18992 +          %else %do;
18993 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
18994 +          %end;
18995 +         %end;
18996 +      %end;
18998 +      /* nodecolor */
18999 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19000 +       %if &multipleTar ne Y %then %do;
19001 +        nodecolor=&predTarget;
19002 +       %end;
19003 +       %else %do;
19004 +         nodecolor=percentcorrect;
19005 +       %end;
19006 +      %end;
19007 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19008 +        nodecolor=percentcorrect;
19009 +      %end;
19010 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19011 +        nodecolor=1;
19012 +      %end;
19013 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19014 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19015 +          nodecolor=percentcorrect;
19016 +        %end;
19017 +        %else %do;
19018 +          nodecolor=profitloss;
19019 +        %end;
19020 +      %end;
19022 +    end;
19023 +    %end;
19024 +    %if &em_intTarget eq Y %then %do;
19025 +     drop  PREDICTION  TARGET TARLEVEL
19026 +     %if &ValidFlag eq Y %then %do;
19027 +         VPREDICTION
19028 +     %end;
19029 +     ;
19030 +    %end;
19031 +    %if &em_classTarget eq Y %then %do;
19032 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19033 +     %if &ValidFlag eq Y %then %do;
19034 +         VSTATVALUE
19035 +     %end;
19036 +     ;
19037 +    %end;
19039 +  run;
19041 +  /* add leaf index information to plotds - based on primary target only*/
19042 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19043 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19044 +      set &EM_USER_OUTSTATS;
19045 +      if ((statname="PROBABILITY"
19046 +      %if &validexist %then %do;
19047 +       or statname="VALID: PROBABILITY"
19048 +      %end;
19049 +      ) AND (CATEGORY="&TARGETEVENT")
19050 +      %if "&multipleTar" eq "Y" %then %do;
19051 +        AND (Target="%EM_TARGET")
19052 +      %end;
19053 +      );
19054 +    run;
19056 +    %if &validexist %then %do;
19057 +      proc sort data=tempprob; by node; run;
19058 +      %let vpredTarget = V%substr(&predTarget, 2);
19059 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19060 +         by node;
19061 +         id statname;
19062 +      run;
19063 +    %end;
19064 +  %end;
19065 +  %else %do;
19066 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19067 +      set &EM_USER_OUTSTATS;
19068 +      if ((statname="PREDICTION"
19069 +      %if &validexist %then %do;
19070 +       or statname="VALID: PREDICTION"
19071 +      %end;
19072 +      )
19073 +      %if "&multipleTar" eq "Y" %then %do;
19074 +        AND (Target="%EM_TARGET")
19075 +      %end;
19076 +      );
19077 +    run;
19078 +    %if &validexist %then %do;
19079 +      proc sort data=tempprob; by node; run;
19080 +      %let vpredTarget = V%substr(&predTarget, 2);
19081 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19082 +         by node;
19083 +         id statname;
19084 +      run;
19085 +    %end;
19086 +  %end;
19088 +  proc sort data=tempprob; by node; run;
19089 +  data tempoutnodes;
19090 +    merge tempoutnodes tempprob;
19091 +    by node;
19092 +  run;
19094 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19095 +  data tempnodes;
19096 +    retain traintotal validtotal;
19097 +    set tempnodes(where=(leaf ne . ));
19098 +    tprob=round(&predTarget, .01);
19099 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19100 +      percevent_train=round(tprob*100, .01);
19101 +    %end;
19102 +    %else %do;
19103 +      percevent_train=tprob;
19104 +    %end;
19106 +    perc_train=round((n/traintotal)*100, 0.01);
19107 +    /* leafwidth already has a *10 multiplier */
19108 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19110 +    %if &validexist %then %do;
19111 +      %let vpredTarget = V%substr(&predTarget,2);
19112 +      vprob=round(&vpredTarget, .01);
19113 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19114 +        percevent_valid=round(vprob*100, .01);
19115 +      %end;
19116 +      %else %do;
19117 +        percevent_valid=vprob;
19118 +      %end;
19119 +      perc_valid=round((vn/validtotal)*100, .01);
19120 +    %end;
19122 +    index=_N_;
19123 +    keep node index tprob perc_train percevent_train
19124 +    %if &validexist %then %do;
19125 +        vprob percevent_valid perc_valid
19126 +    %end;
19127 +    ;
19128 +  run;
19129 +  proc sort data=tempnodes; by node; run;
19130 +  data &EM_USER_TREE_PLOT;
19131 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19132 +    by node;
19133 +    if missing(node) then delete;
19134 +    %if &oldexists %then %do;
19135 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19136 +      drop oldnodecolor;
19137 +    %end;
19138 +    abovetext = compbl(abovetext);
19140 +    /* add variable labels */
19141 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19142 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19143 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19144 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19145 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19146 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19148 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19149 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19150 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19151 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19152 +          %end;
19153 +          %else %do;
19154 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19155 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19156 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19157 +          %end;
19158 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19160 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19161 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19162 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19163 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19164 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19165 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19166 +          %end;
19167 +          %else %do;
19168 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19169 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19170 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19171 +          %end;
19172 +    ;
19173 +  run;
19175 +  /* delete temporary tables */
19176 +  proc datasets lib=work nolist;
19177 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19178 +  run;
19180 +%mend em_tree_makePlotDs;
19184 +%macro em_tree_report;
19186 +   /* report properties */
19187 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19188 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19189 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19190 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19191 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19192 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19193 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19194 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19195 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19196 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19197 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19198 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19199 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19201 +   %let validexist=0;
19202 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19203 +     %let validexist=1;
19204 +   %end;
19206 +   /* determine if multiple targets will be processed */
19207 +   %let em_tree_multipleTargets=N;
19208 +   %let em_tree_numTarget=1;
19209 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19210 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19211 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19212 +         %let em_tree_multipleTargets=N;
19213 +      %end;
19214 +      %else %do;
19215 +        data _null_;
19216 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19217 +          if eof then
19218 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19219 +        run;
19221 +        %if &em_tree_numTarget gt 1 %then %do;
19222 +           %let em_tree_multipleTargets=Y;
19223 +        %end;
19224 +     %end;
19225 +   %end;
19227 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19229 +   /* variable importance */
19230 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19231 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19233 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19234 +     /* and the columns may not be generated                                                                                 */
19235 +     %let em_tree_cvexists=;
19236 +     %let em_tree_surrexists=.;
19237 +     data _null_;
19238 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19239 +       if eof then do ;
19240 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19241 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19242 +       end;
19243 +     run;
19245 +     data &EM_USER_OUTIMPORT;
19246 +         set &EM_USER_OUTIMPORT;
19247 +         /* format columns based on Precison value specified */
19248 +         format importance 15.&EM_PROPERTY_PRECISION
19249 +              %if &validexist %then %do;
19250 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19251 +              %end;
19252 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19253 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19254 +              %end;
19255 +         ;
19256 +     run;
19258 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19259 +     proc print data=&EM_USER_OUTIMPORT
19260 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19261 +          (where=((nrules>0) OR (nsurrogates>0)))
19262 +        %end;
19263 +        %else %do;
19264 +           (where=(nrules>0))
19265 +        %end;
19266 +        label noobs
19267 +        ;
19268 +     run;
19269 +     title10;
19271 +   %end;
19273 +   /* Sequence */
19274 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19275 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19276 +   data _null_ ;
19277 +      set &EM_USER_outseq (obs=2) end=eof ;
19278 +      if eof then do ;
19279 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19280 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19281 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19282 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19283 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19284 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19285 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19286 +      end;
19287 +    run;
19289 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19290 +      data &EM_USER_OUTSEQ;
19291 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19292 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19293 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19294 +           _XMISC_=_VMISC_
19295 +        %end;
19296 +        %if "&em_tree_aprof" ne "."  %then %do;
19297 +           _XAPROF_=_VAPROF_
19298 +           _XPROF_ = _VPROF_
19299 +        %end;
19300 +        %if "&em_tree_aloss" ne "."  %then %do;
19301 +           _XALOSS_=_VALOSS_
19302 +        %end;
19303 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19304 +           _XPASE_ = _VPASE_
19305 +           _XPMISC_ = _VPMISC_
19306 +        %end;
19308 +        ));
19309 +     %end;
19310 +     %else %do;
19311 +        set &EM_USER_OUTSEQ;
19312 +     %end;
19314 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19315 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19316 +            _MISC_   15.&EM_PROPERTY_PRECISION
19317 +         %end;
19318 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19319 +            _PASE_  15.&EM_PROPERTY_PRECISION
19320 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19321 +         %end;
19322 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19323 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19324 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19325 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19326 +            %end;
19327 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19328 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19329 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19330 +            %end;
19331 +         %end;
19332 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19333 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19334 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19335 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19336 +            %end;
19337 +         %end;
19338 +         %if "&em_tree_seq" ne "." %then %do;
19339 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19340 +         %end;
19341 +         %if "&em_tree_vseq" ne "." %then %do;
19342 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19343 +         %end;
19344 +         %if "&em_tree_aprof" ne "." %then %do;
19345 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19346 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19347 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19348 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19349 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19350 +           %end;
19351 +         %end;
19352 +         %else %if "&em_tree_aloss" ne "." %then %do;
19353 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19354 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19355 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19356 +           %end;
19357 +         %end;
19358 +      ;
19359 +    run;
19360 +   %end;
19362 +   /* Observation Based Importance */
19363 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19365 +      /* need to check for 0 obs */
19366 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19367 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19368 +      %let rc=%sysfunc(close(&dsid));
19370 +      %if &onobs %then %do;
19371 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19372 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19374 +         data &EM_USER_OUTOBSIMP;
19375 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19376 +           if _a;
19377 +           by _INPUT1_;
19378 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19379 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19380 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19381 +                   %end;
19382 +                   ;
19383 +         run;
19384 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19385 +      %end;
19386 +   %end;
19388 +  %end;
19390 +  /* create dataset to support tree diagram and icicle plot */
19391 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19392 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19394 +  /* display tree diagram */
19395 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19396 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19398 +  /* display icicle diagram */
19399 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19400 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19402 +  /* Leaf Statistics Plot */
19403 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19405 +  /* print leaf information to output window */
19406 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19408 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19409 +       by descending N;
19410 +     run;
19412 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19413 +     %local vn;
19414 +     data _null_;
19415 +       set t (obs=2) end=eof;
19416 +       if eof then do;
19417 +         call symput("vn", strip(put(vn, best.)));
19418 +       end;
19419 +     run;
19421 +     data t;
19422 +       set t;
19423 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19424 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19425 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19426 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19427 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19428 +       %end;
19429 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19430 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19431 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19432 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19433 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19434 +          %end;
19435 +       %end;
19436 +       ;
19437 +     run;
19439 +     /* determine if rase is found in t */
19440 +    %let dsid=%sysfunc(open(t,i));
19441 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19442 +    %let rc=%sysfunc(close(&dsid));
19444 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19445 +     proc print data=t noobs label;
19446 +       where tprob ne .;
19447 +       var node depth N tprob
19448 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19449 +         %if "&vn" ne "." %then %do;
19450 +           VN
19451 +         %end;
19452 +         vprob
19453 +       %end;
19454 +       %if &raseexists %then %do;
19455 +            RASE
19456 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19457 +              VRASE
19458 +            %end;
19459 +       %end;
19460 +       ;
19461 +     run;
19462 +     title10;
19463 +  %end;
19465 +  /* create plots that are done during training of node */
19466 +  /* display iterative plot, including reference line */
19467 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19468 +   /* %if &nleaves eq  %then %do; */
19469 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19470 +      data _null_;
19471 +        set &EM_USER_OUTTOPOLOGY end=eof;
19472 +        if eof then do;
19473 +          call symput('nleaves', LEAF);
19474 +        end;
19475 +      run;
19476 +   /* %end; */
19478 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19479 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19480 +  %end;
19482 +  /* display leaf statistics */
19483 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19485 +  /* stats by node if multiple targets = Y */
19486 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19487 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19488 +    data &EM_USER_OUTSTATS;
19489 +      set &EM_USER_OUTSTATS;
19491 +     * if STATNAME="TARGET" then delete;
19492 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19493 +      drop leaf;
19494 +    run;
19495 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19497 +  %end;
19498 +  %else %do;
19499 +    /* add outstats and outdescribe to spk but not results */
19500 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19501 +  %end;
19503 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 32 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 32 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 24 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: The data set EMWS1.TREE_OUTSEQ has 24 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_AUDIENCE_SCORE_P_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_AUDIENCE_SCORE_P_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='TRUE');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 10 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 5 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 5 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 10 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 5 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 5 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 10 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 13 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 13 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 13 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 20 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 394 observations read from the data set EMWS1.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 10 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 20 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 10 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 21 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 10 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 10 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 10 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 147 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 147 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 147 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 126 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 21 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 147 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 147 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 147 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 21 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 147 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 147 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 147 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 147 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 42 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 21 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 42 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 42 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 21 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.TEMPPROB.
NOTE: There were 42 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 42 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 42 observations read from the data set WORK.TEMPPROB.
NOTE: There were 21 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 21 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 21 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 21 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 21 observations read from the data set WORK.TEMPN.
NOTE: There were 21 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 21 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 21 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 147 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 42 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 42 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 21 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 21 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 21 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 21 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 11 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 11 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: There were 11 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 21 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 21 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 21 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 21 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      297:141
NOTE: There were 21 observations read from the data set EMWS1.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
 
 
19504
19505  *------------------------------------------------------------*;
19506  * End REPORT: Tree;
19507  *------------------------------------------------------------*;
 
19508  /* Reset EM Options */
19509  options formchar="|----|+|---+=|-/\<>*";
19510  options nocenter ls=256 ps=10000;
19511  goptions reset=all device=GIF NODISPLAY;
 
19512  proc sort data=WORK.EM_USER_REPORT;
19513  by ID VIEW;
19514  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
19515  proc sort data=EMWS1.Impt_CMeta_TRAIN out=WORK.SUBSETINMETA;
19516  by NAME;
19517  run;
 
NOTE: There were 46 observations read from the data set EMWS1.IMPT_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 46 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
19518  proc sort data=EMWS1.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19519  by NAME;
19520  run;
 
NOTE: There were 46 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 46 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
19521  data WORK.ASSESS_META;
19522  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19523  by NAME;
19524  run;
 
NOTE: There were 46 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 46 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 46 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
19525  data EM_temp_assessMeta;
19526  set EMWS1.Tree_CMeta_TRAIN;
19527  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19528  run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
19529  data EM_temp_assessdata;
19530  set EMWS1.Tree_TRAIN(keep=
19531  F_audience_score_positive
19532  I_audience_score_positive
19533  P_audience_score_positiveFalse
19534  P_audience_score_positiveTrue
19535  Q_audience_score_positiveFalse
19536  Q_audience_score_positiveTrue
19537  R_audience_score_positiveFalse
19538  R_audience_score_positiveTrue
19539  U_audience_score_positive
19540  V_audience_score_positiveFalse
19541  V_audience_score_positiveTrue
19542  _WARN_
19543  audience_score_positive
19544  );
19545  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.23 seconds
      cpu time            0.14 seconds
 
NOTE: There were 2438 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2438 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.25 seconds
      cpu time            0.15 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
23826   data EM_temp_assessMeta;
23827   set EMWS1.Tree_CMeta_TRAIN;
23828   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
23829   run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23830   data EM_temp_assessdata;
23831   set EMWS1.Tree_VALIDATE(keep=
23832   F_audience_score_positive
23833   I_audience_score_positive
23834   P_audience_score_positiveFalse
23835   P_audience_score_positiveTrue
23836   Q_audience_score_positiveFalse
23837   Q_audience_score_positiveTrue
23838   R_audience_score_positiveFalse
23839   R_audience_score_positiveTrue
23840   U_audience_score_positive
23841   V_audience_score_positiveFalse
23842   V_audience_score_positiveTrue
23843   _WARN_
23844   audience_score_positive
23845   );
23846   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 2440 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: View EMWS1.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.22 seconds
      cpu time            0.14 seconds
 
NOTE: There were 2440 observations read from the data set EMWS1.IMPT_VALIDATE.
NOTE: There were 2440 observations read from the data set EMWS1.TREE_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2440 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.24 seconds
      cpu time            0.17 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28136   %let _cn = %sysfunc(getoption(CENTER));
28137   options nocenter;
28138   proc print data=EMWS1.Tree_EMREPORTFIT noobs label;
28139   var STAT LABEL TRAIN
28140   VALIDATE
28141   ;
28142   by TARGET TARGETLABEL;
28143   title9 ' ';
28144   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28145   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28146   title10;
28147   options &_cn;
 
28148   proc sort data=EMWS1.Tree_EMCLASSIFICATION nothreads;
28149   by DATAROLE TARGET TARGETLABEL;
28150   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS1.TREE_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28151   %let _cn = %sysfunc(getoption(CENTER));
28152   options nocenter;
28153   proc print data=EMWS1.Tree_EMCLASSIFICATION noobs label;
28154   var from into pct_row pct_col count percent
28155   ;
28156   by DATAROLE TARGET TARGETLABEL;
28157   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28158   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28159   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28160   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28161   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28162   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28163   where _TYPE_='PREDICTION';
28164   title9 ' ';
28165   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28166   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28167   title9;
28168   title10;
28169   options &_cn;
 
28170   %let _cn = %sysfunc(getoption(CENTER));
28171   options nocenter;
28172   data EMWS1.Tree_EMEVENTREPORT;
28173   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
28173 !  8;
28174   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
28174 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
28174 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28174 ! FALSEEVENT
28175   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
28175 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
28175 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28176      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28177   FALSEEVENT=0;
28178   FALSENEVENT=0;
28179   TRUEEVENT=0;
28180   TRUENEVENT=0;
28181   set EMWS1.Tree_EMEVENTREPORT;
28182   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_EMEVENTREPORT.
NOTE: The data set EMWS1.TREE_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
28183   proc print data=EMWS1.Tree_EMEVENTREPORT noobs label;
28184   title9 ' ';
28185   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28186   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28187   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28188   title10;
28189   options &_cn;
 
28190   proc datasets library=EMWS1 nolist;
28191   modify Tree_EMRANK;
28192   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28193   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28194   run;
 
NOTE: MODIFY was successful for EMWS1.TREE_EMRANK.DATA.
28195   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
28196   %let _cn = %sysfunc(getoption(CENTER));
28197   options nocenter;
28198   proc print data=EMWS1.Tree_EMRANK label noobs;
28199   var
28200   decile gain lift liftc resp respc N _meanP_;
28201   by
28202   notsorted DATAROLE
28203   notsorted TARGET
28204   notsorted TARGETLABEL
28205   ;
28206   title9 ' ';
28207   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28208   run;
 
NOTE: There were 40 observations read from the data set EMWS1.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
28209   title10;
28210   options &_cn;
 
28211   proc datasets library=EMWS1 nolist;
28212   modify Tree_EMSCOREDIST;
28213   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28214   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28215   run;
 
NOTE: MODIFY was successful for EMWS1.TREE_EMSCOREDIST.DATA.
28216   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
